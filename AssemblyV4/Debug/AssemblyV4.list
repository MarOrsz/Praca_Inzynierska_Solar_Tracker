
AssemblyV4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffcc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  08010170  08010170  00020170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a48  08010a48  000301f4  2**0
                  CONTENTS
  4 .ARM          00000000  08010a48  08010a48  000301f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010a48  08010a48  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a48  08010a48  00020a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a4c  08010a4c  00020a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08010a50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003650  200001f4  08010c44  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003844  08010c44  00033844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eed7  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043a2  00000000  00000000  0004f0fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019c0  00000000  00000000  000534a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001778  00000000  00000000  00054e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002252d  00000000  00000000  000565d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000199b1  00000000  00000000  00078b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bdd82  00000000  00000000  000924b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150238  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007414  00000000  00000000  001502b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010154 	.word	0x08010154

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	08010154 	.word	0x08010154

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <ina_init>:
#include "main.h"
#include "INA219.h"
#include "i2c.h"


void ina_init (void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0


    ina219_currentDivider_mA = 0;
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <ina_init+0x18>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
    ina219_powerMultiplier_mW = 0;
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <ina_init+0x1c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]

    // Option 1: setCalibration_32V_2A();
    // Option 2: setCalibration_32V_1A();
  // ina_calib_32V_1A(); // Option 3
    ina_calib_16V_200mA();
 8000c68:	f000 f854 	bl	8000d14 <ina_calib_16V_200mA>
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000210 	.word	0x20000210
 8000c74:	20000214 	.word	0x20000214

08000c78 <ina_write>:

void ina_write(uint8_t reg, uint16_t value)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af04      	add	r7, sp, #16
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	80bb      	strh	r3, [r7, #4]
	  uint8_t val8b[2];



	  val8b[1] = (uint8_t) (value & 0xFF);
 8000c88:	88bb      	ldrh	r3, [r7, #4]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	737b      	strb	r3, [r7, #13]
	  val8b[0] = (uint8_t) ((value >> 8) & 0xFF);
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	733b      	strb	r3, [r7, #12]


	HAL_I2C_Mem_Write(&hi2c1, INA_219_ADDR , reg, 1, val8b, sizeof(val8b), HAL_MAX_DELAY);
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	b299      	uxth	r1, r3
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca4:	9302      	str	r3, [sp, #8]
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <ina_write+0x48>)
 8000cb4:	f004 fb1a 	bl	80052ec <HAL_I2C_Mem_Write>

}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000050c 	.word	0x2000050c

08000cc4 <ina_read>:

//Function which gives two bytes data info to *value
void ina_read(uint8_t reg, uint16_t *value)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af04      	add	r7, sp, #16
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret1;
	uint8_t buf[2];
	ret1 = HAL_I2C_Mem_Read(&hi2c1, INA_219_ADDR, reg, 1, buf, 2, HAL_MAX_DELAY);
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	b299      	uxth	r1, r3
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cdc:	9302      	str	r3, [sp, #8]
 8000cde:	2302      	movs	r3, #2
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	4809      	ldr	r0, [pc, #36]	; (8000d10 <ina_read+0x4c>)
 8000cec:	f004 fc12 	bl	8005514 <HAL_I2C_Mem_Read>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	73fb      	strb	r3, [r7, #15]

	*value = ((uint16_t)buf[0]<<8 | (uint8_t)buf[1]);
 8000cf4:	7b3b      	ldrb	r3, [r7, #12]
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	b21a      	sxth	r2, r3
 8000cfa:	7b7b      	ldrb	r3, [r7, #13]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	801a      	strh	r2, [r3, #0]



}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000050c 	.word	0x2000050c

08000d14 <ina_calib_16V_200mA>:
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS));
}

void ina_calib_16V_200mA (void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
    ina219_calibrationValue = 40960;
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <ina_calib_16V_200mA+0x34>)
 8000d1a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000d1e:	801a      	strh	r2, [r3, #0]

    ina219_currentDivider_mA = 20;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <ina_calib_16V_200mA+0x38>)
 8000d22:	2214      	movs	r2, #20
 8000d24:	601a      	str	r2, [r3, #0]
    ina219_powerMultiplier_mW = 1;
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <ina_calib_16V_200mA+0x3c>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]

    ina_write(INA219_REG_CALIBRATION, ina219_calibrationValue);
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <ina_calib_16V_200mA+0x34>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	2005      	movs	r0, #5
 8000d34:	f7ff ffa0 	bl	8000c78 <ina_write>

    ina_write(INA219_REG_CONFIG, (INA219_CONFIG_BVOLTAGERANGE_16V |
 8000d38:	f240 119f 	movw	r1, #415	; 0x19f
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff ff9b 	bl	8000c78 <ina_write>
                    INA219_CONFIG_GAIN_1_40MV |
                    INA219_CONFIG_BADCRES_12BIT |
                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS));

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000474 	.word	0x20000474
 8000d4c:	20000210 	.word	0x20000210
 8000d50:	20000214 	.word	0x20000214

08000d54 <getBusVoltage_raw>:


uint16_t getBusVoltage_raw (void) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af04      	add	r7, sp, #16

	if (HAL_I2C_Master_Receive(&hi2c1, INA_219_ADDR, &buf, 2, HAL_MAX_DELAY)==HAL_OK);
	value = ((uint16_t)buf[0]<<8 | (uint8_t)buf[1]);
	*/

	HAL_I2C_Mem_Read(&hi2c1, INA_219_ADDR, INA219_REG_BUSVOLTAGE, 1, buf, 2, 100);
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	b299      	uxth	r1, r3
 8000d5e:	2364      	movs	r3, #100	; 0x64
 8000d60:	9302      	str	r3, [sp, #8]
 8000d62:	2302      	movs	r3, #2
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	480a      	ldr	r0, [pc, #40]	; (8000d98 <getBusVoltage_raw+0x44>)
 8000d70:	f004 fbd0 	bl	8005514 <HAL_I2C_Mem_Read>
	HAL_Delay(500);
 8000d74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d78:	f002 fb1a 	bl	80033b0 <HAL_Delay>


	value = (((uint16_t)buf[0]<<8 | (uint8_t)buf[1])>>3)*4;
 8000d7c:	793b      	ldrb	r3, [r7, #4]
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	797a      	ldrb	r2, [r7, #5]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	10db      	asrs	r3, r3, #3
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	80fb      	strh	r3, [r7, #6]

	return value;
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
	//return (uint16_t)((value >> 3)*4);
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000050c 	.word	0x2000050c

08000d9c <getPower_raw>:
	ina_read(INA219_REG_CURRENT, &value);

	return (uint16_t) value;
}

uint16_t getPower_raw (void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
    uint16_t value;

    //ina_write(INA219_REG_CALIBRATION, ina219_calibrationValue);

    ina_read(INA219_REG_POWER, &value);
 8000da2:	1dbb      	adds	r3, r7, #6
 8000da4:	4619      	mov	r1, r3
 8000da6:	2003      	movs	r0, #3
 8000da8:	f7ff ff8c 	bl	8000cc4 <ina_read>

    return (uint16_t) value;
 8000dac:	88fb      	ldrh	r3, [r7, #6]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <getBusVoltage_V>:

float getBusVoltage_V (void) {
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
	uint16_t value = getBusVoltage_raw();
 8000dbe:	f7ff ffc9 	bl	8000d54 <getBusVoltage_raw>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80fb      	strh	r3, [r7, #6]
	return value * 0.001;
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fbb3 	bl	8000534 <__aeabi_i2d>
 8000dce:	a30a      	add	r3, pc, #40	; (adr r3, 8000df8 <getBusVoltage_V+0x40>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	f7ff fc18 	bl	8000608 <__aeabi_dmul>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	460c      	mov	r4, r1
 8000ddc:	4618      	mov	r0, r3
 8000dde:	4621      	mov	r1, r4
 8000de0:	f7ff feea 	bl	8000bb8 <__aeabi_d2f>
 8000de4:	4603      	mov	r3, r0
 8000de6:	ee07 3a90 	vmov	s15, r3
}
 8000dea:	eeb0 0a67 	vmov.f32	s0, s15
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd90      	pop	{r4, r7, pc}
 8000df4:	f3af 8000 	nop.w
 8000df8:	d2f1a9fc 	.word	0xd2f1a9fc
 8000dfc:	3f50624d 	.word	0x3f50624d

08000e00 <ina_power_mW>:
    valueDec /= ina219_currentDivider_mA;

    return valueDec;
}

float ina_power_mW (void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
    float valueDec = getPower_raw();
 8000e06:	f7ff ffc9 	bl	8000d9c <getPower_raw>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e14:	edc7 7a01 	vstr	s15, [r7, #4]
    valueDec *= ina219_powerMultiplier_mW;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <ina_power_mW+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e24:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e2c:	edc7 7a01 	vstr	s15, [r7, #4]
    return valueDec;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	ee07 3a90 	vmov	s15, r3
}
 8000e36:	eeb0 0a67 	vmov.f32	s0, s15
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000214 	.word	0x20000214

08000e44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e66:	4b43      	ldr	r3, [pc, #268]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000e68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e6e:	4b41      	ldr	r3, [pc, #260]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000e70:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e76:	4b3f      	ldr	r3, [pc, #252]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e82:	4b3c      	ldr	r3, [pc, #240]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e88:	4b3a      	ldr	r3, [pc, #232]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e90:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e96:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9c:	4b35      	ldr	r3, [pc, #212]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000ea2:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea8:	4b32      	ldr	r3, [pc, #200]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000eb0:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000eb2:	2208      	movs	r2, #8
 8000eb4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec2:	482c      	ldr	r0, [pc, #176]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000ec4:	f002 fab4 	bl	8003430 <HAL_ADC_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ece:	f001 fd2d 	bl	800292c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4825      	ldr	r0, [pc, #148]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000ede:	f003 f905 	bl	80040ec <HAL_ADCEx_MultiModeConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000ee8:	f001 fd20 	bl	800292c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000ef8:	2307      	movs	r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	481a      	ldr	r0, [pc, #104]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000f0a:	f002 fe03 	bl	8003b14 <HAL_ADC_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000f14:	f001 fd0a 	bl	800292c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f18:	2306      	movs	r3, #6
 8000f1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4813      	ldr	r0, [pc, #76]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000f26:	f002 fdf5 	bl	8003b14 <HAL_ADC_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000f30:	f001 fcfc 	bl	800292c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f34:	2307      	movs	r3, #7
 8000f36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000f42:	f002 fde7 	bl	8003b14 <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000f4c:	f001 fcee 	bl	800292c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f50:	2308      	movs	r3, #8
 8000f52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f54:	2304      	movs	r3, #4
 8000f56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_ADC1_Init+0x130>)
 8000f5e:	f002 fdd9 	bl	8003b14 <HAL_ADC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8000f68:	f001 fce0 	bl	800292c <Error_Handler>
  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000478 	.word	0x20000478

08000f78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f98:	d164      	bne.n	8001064 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f9a:	4b34      	ldr	r3, [pc, #208]	; (800106c <HAL_ADC_MspInit+0xf4>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	4a33      	ldr	r2, [pc, #204]	; (800106c <HAL_ADC_MspInit+0xf4>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	6153      	str	r3, [r2, #20]
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <HAL_ADC_MspInit+0xf4>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	; (800106c <HAL_ADC_MspInit+0xf4>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a2d      	ldr	r2, [pc, #180]	; (800106c <HAL_ADC_MspInit+0xf4>)
 8000fb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	; (800106c <HAL_ADC_MspInit+0xf4>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <HAL_ADC_MspInit+0xf4>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a27      	ldr	r2, [pc, #156]	; (800106c <HAL_ADC_MspInit+0xf4>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <HAL_ADC_MspInit+0xf4>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	481e      	ldr	r0, [pc, #120]	; (8001070 <HAL_ADC_MspInit+0xf8>)
 8000ff6:	f003 fe3b 	bl	8004c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffe:	2303      	movs	r3, #3
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f003 fe2e 	bl	8004c70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_ADC_MspInit+0xfc>)
 8001016:	4a18      	ldr	r2, [pc, #96]	; (8001078 <HAL_ADC_MspInit+0x100>)
 8001018:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_ADC_MspInit+0xfc>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_ADC_MspInit+0xfc>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_ADC_MspInit+0xfc>)
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_ADC_MspInit+0xfc>)
 800102e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001032:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_ADC_MspInit+0xfc>)
 8001036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800103a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_ADC_MspInit+0xfc>)
 800103e:	2220      	movs	r2, #32
 8001040:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_ADC_MspInit+0xfc>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <HAL_ADC_MspInit+0xfc>)
 800104a:	f003 fc24 	bl	8004896 <HAL_DMA_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8001054:	f001 fc6a 	bl	800292c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_ADC_MspInit+0xfc>)
 800105c:	639a      	str	r2, [r3, #56]	; 0x38
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <HAL_ADC_MspInit+0xfc>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40021000 	.word	0x40021000
 8001070:	48000800 	.word	0x48000800
 8001074:	200004c8 	.word	0x200004c8
 8001078:	40020008 	.word	0x40020008

0800107c <az_init>:
#include "stdlib.h"


//Inicjalizacja silnia azymutu
void az_init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
//Uruchomienie momentu trzymającego na wale
	az_wlacz();
 8001080:	f000 f81e 	bl	80010c0 <az_wlacz>
	az_predk(5);
 8001084:	2005      	movs	r0, #5
 8001086:	f000 f89f 	bl	80011c8 <az_predk>
//Sprawdzenie czy krancowka dolna jest osiagnieta
	while (HAL_GPIO_ReadPin(KR_LEWA, KR_LEWA_PIN))
 800108a:	e001      	b.n	8001090 <az_init+0x14>
	{
		az_lewo();
 800108c:	f000 f82a 	bl	80010e4 <az_lewo>
	while (HAL_GPIO_ReadPin(KR_LEWA, KR_LEWA_PIN))
 8001090:	2120      	movs	r1, #32
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <az_init+0x3c>)
 8001094:	f003 ff76 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f6      	bne.n	800108c <az_init+0x10>
	}
//Zatrzymanie silnika po osiagnieciu dolnej krancowki
	az_stop();
 800109e:	f000 f865 	bl	800116c <az_stop>
//Stabilizacja panelu
	HAL_Delay(1000);
 80010a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a6:	f002 f983 	bl	80033b0 <HAL_Delay>
/* Urychomienie trybu przerwaniowego licznika zliczającego
liczbę wykonanych kroków */
	HAL_TIM_Base_Start_IT(&STEPS1_TIM);
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <az_init+0x40>)
 80010ac:	f006 ffc6 	bl	800803c <HAL_TIM_Base_Start_IT>
//Ustawienie panelu w pozycji początkowej
	az_poz_pocz();
 80010b0:	f000 f866 	bl	8001180 <az_poz_pocz>

/* Urychomienie trybu przerwaniowego licznika zliczającego
liczbę wykonanych kroków */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	48000400 	.word	0x48000400
 80010bc:	20001718 	.word	0x20001718

080010c0 <az_wlacz>:

//Uruchomienie trzymania na wale silnika śledzącego wysokość słońca
void az_wlacz(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_1_PORT, RESET_1_PIN, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <az_wlacz+0x20>)
 80010cc:	f003 ff72 	bl	8004fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SLEEP_1_PORT, SLEEP_1_PIN, GPIO_PIN_SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2104      	movs	r1, #4
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <az_wlacz+0x20>)
 80010d6:	f003 ff6d 	bl	8004fb4 <HAL_GPIO_WritePin>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	48000400 	.word	0x48000400

080010e4 <az_lewo>:
	HAL_GPIO_WritePin(RESET_1_PORT, RESET_1_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(SLEEP_1_PORT, SLEEP_1_PIN, GPIO_PIN_RESET);
}

void az_lewo(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	if((HAL_TIM_PWM_Start(&PULSE1_TIM, PULSE1_TIM_CH) == 0 ||
 80010e8:	210c      	movs	r1, #12
 80010ea:	480e      	ldr	r0, [pc, #56]	; (8001124 <az_lewo+0x40>)
 80010ec:	f007 f806 	bl	80080fc <HAL_TIM_PWM_Start>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <az_lewo+0x24>
	HAL_GPIO_ReadPin(DIR_1_PORT, DIR_1_PIN) == GPIO_PIN_RESET))
 80010f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f003 ff41 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
	if((HAL_TIM_PWM_Start(&PULSE1_TIM, PULSE1_TIM_CH) == 0 ||
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10a      	bne.n	800111e <az_lewo+0x3a>
	{
		HAL_GPIO_WritePin(DIR_1_PORT, DIR_1_PIN, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001112:	f003 ff4f 	bl	8004fb4 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&PULSE1_TIM, PULSE1_TIM_CH);
 8001116:	210c      	movs	r1, #12
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <az_lewo+0x40>)
 800111a:	f006 ffef 	bl	80080fc <HAL_TIM_PWM_Start>
	}
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200016d8 	.word	0x200016d8

08001128 <az_prawo>:

void az_prawo(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&PULSE1_TIM, PULSE1_TIM_CH) == 0 ||
 800112c:	210c      	movs	r1, #12
 800112e:	480e      	ldr	r0, [pc, #56]	; (8001168 <az_prawo+0x40>)
 8001130:	f006 ffe4 	bl	80080fc <HAL_TIM_PWM_Start>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <az_prawo+0x24>
	HAL_GPIO_ReadPin(DIR_1_PORT, DIR_1_PIN) == GPIO_PIN_SET)
 800113a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f003 ff1f 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
	if(HAL_TIM_PWM_Start(&PULSE1_TIM, PULSE1_TIM_CH) == 0 ||
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10a      	bne.n	8001162 <az_prawo+0x3a>
	{
	  HAL_GPIO_WritePin(DIR_1_PORT, DIR_1_PIN, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f003 ff2d 	bl	8004fb4 <HAL_GPIO_WritePin>
	  HAL_TIM_PWM_Start(&PULSE1_TIM, PULSE1_TIM_CH);
 800115a:	210c      	movs	r1, #12
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <az_prawo+0x40>)
 800115e:	f006 ffcd 	bl	80080fc <HAL_TIM_PWM_Start>
	}
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200016d8 	.word	0x200016d8

0800116c <az_stop>:

void az_stop(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&PULSE1_TIM, PULSE1_TIM_CH);
 8001170:	210c      	movs	r1, #12
 8001172:	4802      	ldr	r0, [pc, #8]	; (800117c <az_stop+0x10>)
 8001174:	f007 f822 	bl	80081bc <HAL_TIM_PWM_Stop>
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200016d8 	.word	0x200016d8

08001180 <az_poz_pocz>:

void az_poz_pocz(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	// pozycja poczatkowa azacji panelu: 45st
	uint16_t kroki, licz;
	kroki = KAT_AZ_POCZ*PRZELOZENIE_AZ*MICROSTEP_NUM/1.8;
 8001186:	f240 3309 	movw	r3, #777	; 0x309
 800118a:	80fb      	strh	r3, [r7, #6]
	az_kroki(kroki);
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f806 	bl	80011a0 <az_kroki>
	//az_predk(10);
	az_prawo();
 8001194:	f7ff ffc8 	bl	8001128 <az_prawo>
	//licz = __HAL_TIM_GET_COUNTER(&STEPS1_TIM);

}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <az_kroki>:

void az_kroki(uint16_t kroki)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&STEPS1_TIM, kroki);
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <az_kroki+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	88fa      	ldrh	r2, [r7, #6]
 80011b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	4a03      	ldr	r2, [pc, #12]	; (80011c4 <az_kroki+0x24>)
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	20001718 	.word	0x20001718

080011c8 <az_predk>:
void az_predk(uint16_t rpm)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
	if(rpm > 0)
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d01f      	beq.n	8001218 <az_predk+0x50>
	{
	  uint16_t arr_val = XT_TIM_CLK / (((XT_TIM_PSC+1) *
		  	rpm * STEPS_PER_REV * MICROSTEP_NUM) / 60) - 1;
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <az_predk+0x64>)
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	4a13      	ldr	r2, [pc, #76]	; (8001230 <az_predk+0x68>)
 80011e2:	fb82 1203 	smull	r1, r2, r2, r3
 80011e6:	441a      	add	r2, r3
 80011e8:	1152      	asrs	r2, r2, #5
 80011ea:	17db      	asrs	r3, r3, #31
 80011ec:	1ad3      	subs	r3, r2, r3
	  uint16_t arr_val = XT_TIM_CLK / (((XT_TIM_PSC+1) *
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <az_predk+0x6c>)
 80011f0:	fb92 f3f3 	sdiv	r3, r2, r3
		  	rpm * STEPS_PER_REV * MICROSTEP_NUM) / 60) - 1;
 80011f4:	b29b      	uxth	r3, r3
	  uint16_t arr_val = XT_TIM_CLK / (((XT_TIM_PSC+1) *
 80011f6:	3b01      	subs	r3, #1
 80011f8:	81fb      	strh	r3, [r7, #14]
	  uint16_t pulse_val = arr_val / 2;
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	085b      	lsrs	r3, r3, #1
 80011fe:	81bb      	strh	r3, [r7, #12]
	  __HAL_TIM_SET_AUTORELOAD(&PULSE1_TIM, arr_val);
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <az_predk+0x70>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	89fa      	ldrh	r2, [r7, #14]
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
 8001208:	89fb      	ldrh	r3, [r7, #14]
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <az_predk+0x70>)
 800120c:	60d3      	str	r3, [r2, #12]
	  __HAL_TIM_SET_COMPARE(&PULSE1_TIM, PULSE1_TIM_CH, pulse_val);
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <az_predk+0x70>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	89ba      	ldrh	r2, [r7, #12]
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&PULSE1_TIM, PULSE1_TIM_CH, 0);
	}
}
 8001216:	e003      	b.n	8001220 <az_predk+0x58>
		__HAL_TIM_SET_COMPARE(&PULSE1_TIM, PULSE1_TIM_CH, 0);
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <az_predk+0x70>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	002bf200 	.word	0x002bf200
 8001230:	88888889 	.word	0x88888889
 8001234:	044aa200 	.word	0x044aa200
 8001238:	200016d8 	.word	0x200016d8

0800123c <az_odczytaj_fotorez>:

uint32_t * az_odczytaj_fotorez(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	static uint32_t foto[4];
	HAL_ADC_Start_DMA(&FOTO_ADC, foto, 4);
 8001240:	2204      	movs	r2, #4
 8001242:	4906      	ldr	r1, [pc, #24]	; (800125c <az_odczytaj_fotorez+0x20>)
 8001244:	4806      	ldr	r0, [pc, #24]	; (8001260 <az_odczytaj_fotorez+0x24>)
 8001246:	f002 faed 	bl	8003824 <HAL_ADC_Start_DMA>
	HAL_Delay(10);
 800124a:	200a      	movs	r0, #10
 800124c:	f002 f8b0 	bl	80033b0 <HAL_Delay>
	HAL_ADC_Stop_DMA(&FOTO_ADC);
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <az_odczytaj_fotorez+0x24>)
 8001252:	f002 fc03 	bl	8003a5c <HAL_ADC_Stop_DMA>

	return  foto;
 8001256:	4b01      	ldr	r3, [pc, #4]	; (800125c <az_odczytaj_fotorez+0x20>)
}
 8001258:	4618      	mov	r0, r3
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000218 	.word	0x20000218
 8001260:	20000478 	.word	0x20000478

08001264 <az_steruj>:

void az_steruj(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
	uint32_t *foto;
	uint16_t LG, PG, LD, PD;
	const uint16_t cz_x = 100;
 800126a:	2364      	movs	r3, #100	; 0x64
 800126c:	82bb      	strh	r3, [r7, #20]
	int16_t x,p;
	foto = az_odczytaj_fotorez();
 800126e:	f7ff ffe5 	bl	800123c <az_odczytaj_fotorez>
 8001272:	6138      	str	r0, [r7, #16]
	HAL_Delay(10);
 8001274:	200a      	movs	r0, #10
 8001276:	f002 f89b 	bl	80033b0 <HAL_Delay>


	PD = foto[0];
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	81fb      	strh	r3, [r7, #14]
	PG = foto[1];
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	3304      	adds	r3, #4
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	81bb      	strh	r3, [r7, #12]
	LG = foto[2];
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	3308      	adds	r3, #8
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	817b      	strh	r3, [r7, #10]
	LD = foto[3];
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	330c      	adds	r3, #12
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	813b      	strh	r3, [r7, #8]

	x = (LG+LD) - (PG+PD);
 8001298:	897a      	ldrh	r2, [r7, #10]
 800129a:	893b      	ldrh	r3, [r7, #8]
 800129c:	4413      	add	r3, r2
 800129e:	b29a      	uxth	r2, r3
 80012a0:	89b9      	ldrh	r1, [r7, #12]
 80012a2:	89fb      	ldrh	r3, [r7, #14]
 80012a4:	440b      	add	r3, r1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	82fb      	strh	r3, [r7, #22]

	p=HAL_GPIO_ReadPin(KR_PRAWA, KR_PRAWA_PIN);
 80012ae:	2110      	movs	r1, #16
 80012b0:	4840      	ldr	r0, [pc, #256]	; (80013b4 <az_steruj+0x150>)
 80012b2:	f003 fe67 	bl	8004f84 <HAL_GPIO_ReadPin>
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]

	while ((x < -cz_x) &&
 80012ba:	e02e      	b.n	800131a <az_steruj+0xb6>
	(HAL_GPIO_ReadPin(KR_PRAWA, KR_PRAWA_PIN) == 1))
	{
		while ((x < -cz_x/2) &&
		(HAL_GPIO_ReadPin(KR_PRAWA, KR_PRAWA_PIN) == 1))
		{
			az_prawo();
 80012bc:	f7ff ff34 	bl	8001128 <az_prawo>
			foto = az_odczytaj_fotorez();
 80012c0:	f7ff ffbc 	bl	800123c <az_odczytaj_fotorez>
 80012c4:	6138      	str	r0, [r7, #16]
			PD = foto[0];
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	81fb      	strh	r3, [r7, #14]
			PG = foto[1];
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	3304      	adds	r3, #4
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	81bb      	strh	r3, [r7, #12]
			LG = foto[2];
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	3308      	adds	r3, #8
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	817b      	strh	r3, [r7, #10]
			LD = foto[3];
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	330c      	adds	r3, #12
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	813b      	strh	r3, [r7, #8]
			x = (LG+LD) - (PG+PD);
 80012e4:	897a      	ldrh	r2, [r7, #10]
 80012e6:	893b      	ldrh	r3, [r7, #8]
 80012e8:	4413      	add	r3, r2
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	89b9      	ldrh	r1, [r7, #12]
 80012ee:	89fb      	ldrh	r3, [r7, #14]
 80012f0:	440b      	add	r3, r1
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	82fb      	strh	r3, [r7, #22]
		while ((x < -cz_x/2) &&
 80012fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80012fe:	8abb      	ldrh	r3, [r7, #20]
 8001300:	425b      	negs	r3, r3
 8001302:	0fd9      	lsrs	r1, r3, #31
 8001304:	440b      	add	r3, r1
 8001306:	105b      	asrs	r3, r3, #1
 8001308:	429a      	cmp	r2, r3
 800130a:	da06      	bge.n	800131a <az_steruj+0xb6>
		(HAL_GPIO_ReadPin(KR_PRAWA, KR_PRAWA_PIN) == 1))
 800130c:	2110      	movs	r1, #16
 800130e:	4829      	ldr	r0, [pc, #164]	; (80013b4 <az_steruj+0x150>)
 8001310:	f003 fe38 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001314:	4603      	mov	r3, r0
		while ((x < -cz_x/2) &&
 8001316:	2b01      	cmp	r3, #1
 8001318:	d0d0      	beq.n	80012bc <az_steruj+0x58>
	while ((x < -cz_x) &&
 800131a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800131e:	8abb      	ldrh	r3, [r7, #20]
 8001320:	425b      	negs	r3, r3
 8001322:	429a      	cmp	r2, r3
 8001324:	da34      	bge.n	8001390 <az_steruj+0x12c>
	(HAL_GPIO_ReadPin(KR_PRAWA, KR_PRAWA_PIN) == 1))
 8001326:	2110      	movs	r1, #16
 8001328:	4822      	ldr	r0, [pc, #136]	; (80013b4 <az_steruj+0x150>)
 800132a:	f003 fe2b 	bl	8004f84 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
	while ((x < -cz_x) &&
 8001330:	2b01      	cmp	r3, #1
 8001332:	d0e2      	beq.n	80012fa <az_steruj+0x96>
		}

	}
	while ((x > cz_x) &&
 8001334:	e02c      	b.n	8001390 <az_steruj+0x12c>
	(HAL_GPIO_ReadPin(KR_LEWA, KR_LEWA_PIN) == 1))
	{
		while ((x > cz_x/2) &&
		(HAL_GPIO_ReadPin(KR_LEWA, KR_LEWA_PIN) == 1))
		{
			az_lewo();
 8001336:	f7ff fed5 	bl	80010e4 <az_lewo>
			foto = az_odczytaj_fotorez();
 800133a:	f7ff ff7f 	bl	800123c <az_odczytaj_fotorez>
 800133e:	6138      	str	r0, [r7, #16]
			PD = foto[0];
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	81fb      	strh	r3, [r7, #14]
			PG = foto[1];
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	3304      	adds	r3, #4
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	81bb      	strh	r3, [r7, #12]
			LG = foto[2];
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	3308      	adds	r3, #8
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	817b      	strh	r3, [r7, #10]
			LD = foto[3];
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	330c      	adds	r3, #12
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	813b      	strh	r3, [r7, #8]

			x = (LG+LD) - (PG+PD);
 800135e:	897a      	ldrh	r2, [r7, #10]
 8001360:	893b      	ldrh	r3, [r7, #8]
 8001362:	4413      	add	r3, r2
 8001364:	b29a      	uxth	r2, r3
 8001366:	89b9      	ldrh	r1, [r7, #12]
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	440b      	add	r3, r1
 800136c:	b29b      	uxth	r3, r3
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	b29b      	uxth	r3, r3
 8001372:	82fb      	strh	r3, [r7, #22]
		while ((x > cz_x/2) &&
 8001374:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001378:	8aba      	ldrh	r2, [r7, #20]
 800137a:	0852      	lsrs	r2, r2, #1
 800137c:	b292      	uxth	r2, r2
 800137e:	4293      	cmp	r3, r2
 8001380:	dd06      	ble.n	8001390 <az_steruj+0x12c>
		(HAL_GPIO_ReadPin(KR_LEWA, KR_LEWA_PIN) == 1))
 8001382:	2120      	movs	r1, #32
 8001384:	480b      	ldr	r0, [pc, #44]	; (80013b4 <az_steruj+0x150>)
 8001386:	f003 fdfd 	bl	8004f84 <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
		while ((x > cz_x/2) &&
 800138c:	2b01      	cmp	r3, #1
 800138e:	d0d2      	beq.n	8001336 <az_steruj+0xd2>
	while ((x > cz_x) &&
 8001390:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001394:	8abb      	ldrh	r3, [r7, #20]
 8001396:	429a      	cmp	r2, r3
 8001398:	dd06      	ble.n	80013a8 <az_steruj+0x144>
	(HAL_GPIO_ReadPin(KR_LEWA, KR_LEWA_PIN) == 1))
 800139a:	2120      	movs	r1, #32
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <az_steruj+0x150>)
 800139e:	f003 fdf1 	bl	8004f84 <HAL_GPIO_ReadPin>
 80013a2:	4603      	mov	r3, r0
	while ((x > cz_x) &&
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d0e5      	beq.n	8001374 <az_steruj+0x110>
		}

	}
	az_stop();
 80013a8:	f7ff fee0 	bl	800116c <az_stop>
}
 80013ac:	bf00      	nop
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	48000400 	.word	0x48000400

080013b8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_DMA_Init+0x38>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <MX_DMA_Init+0x38>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6153      	str	r3, [r2, #20]
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_DMA_Init+0x38>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	200b      	movs	r0, #11
 80013dc:	f003 fa25 	bl	800482a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013e0:	200b      	movs	r0, #11
 80013e2:	f003 fa3e 	bl	8004862 <HAL_NVIC_EnableIRQ>

}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000

080013f4 <elew_init>:
#include "stdlib.h"
#include "elew.h"

//Inicjalizacja silnia elewacji
void elew_init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
//Uruchomienie momentu trzymającego na wale
	elew_wlacz();
 80013f8:	f000 f81e 	bl	8001438 <elew_wlacz>
	elew_predk(5);
 80013fc:	2005      	movs	r0, #5
 80013fe:	f000 f897 	bl	8001530 <elew_predk>
//Sprawdzenie czy krancowka dolna jest osiagnieta
	while (HAL_GPIO_ReadPin(KR_DOL, KR_DOL_PIN))
 8001402:	e001      	b.n	8001408 <elew_init+0x14>
	{

		elew_dol();
 8001404:	f000 f822 	bl	800144c <elew_dol>
	while (HAL_GPIO_ReadPin(KR_DOL, KR_DOL_PIN))
 8001408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001410:	f003 fdb8 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f4      	bne.n	8001404 <elew_init+0x10>
	}
//Zatrzymanie silnika po osiagnieciu dolnej krancowki
	elew_stop();
 800141a:	f000 f85b 	bl	80014d4 <elew_stop>
	HAL_Delay(1000);
 800141e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001422:	f001 ffc5 	bl	80033b0 <HAL_Delay>

//Urychomienie trybu przerwaniowego licznika zliczającego
//liczbę wykonanych kroków
	HAL_TIM_Base_Start_IT(&STEPS2_TIM);
 8001426:	4803      	ldr	r0, [pc, #12]	; (8001434 <elew_init+0x40>)
 8001428:	f006 fe08 	bl	800803c <HAL_TIM_Base_Start_IT>
//Ustawienie panelu w pozycji początkowej
	elew_poz_pocz();
 800142c:	f000 f85c 	bl	80014e8 <elew_poz_pocz>


//Zatrzymanie trybu przerwaniowego licznika zliczającego
//liczbe wykonanych kroków
	//HAL_TIM_Base_Stop_IT(&STEPS2_TIM);
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20001658 	.word	0x20001658

08001438 <elew_wlacz>:

//Uruchomienie trzymania na wale silnika śledzącego wysokość słońca
void elew_wlacz(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENA_2_PORT,ENA2_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	2140      	movs	r1, #64	; 0x40
 8001440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001444:	f003 fdb6 	bl	8004fb4 <HAL_GPIO_WritePin>
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <elew_dol>:
{
	HAL_GPIO_WritePin(ENA_2_PORT,ENA2_Pin, GPIO_PIN_SET);
}

void elew_dol(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&PULSE2_TIM, PULSE2_TIM_CH) == 0 ||
 8001450:	210c      	movs	r1, #12
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <elew_dol+0x3c>)
 8001454:	f006 fe52 	bl	80080fc <HAL_TIM_PWM_Start>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d007      	beq.n	800146e <elew_dol+0x22>
	HAL_GPIO_ReadPin(DIR_2_PORT, DIR_2_PIN) == GPIO_PIN_SET)
 800145e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001462:	480a      	ldr	r0, [pc, #40]	; (800148c <elew_dol+0x40>)
 8001464:	f003 fd8e 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
	if(HAL_TIM_PWM_Start(&PULSE2_TIM, PULSE2_TIM_CH) == 0 ||
 800146a:	2b01      	cmp	r3, #1
 800146c:	d109      	bne.n	8001482 <elew_dol+0x36>
	{
		HAL_GPIO_WritePin(DIR_2_PORT, DIR_2_PIN, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <elew_dol+0x40>)
 8001476:	f003 fd9d 	bl	8004fb4 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&PULSE2_TIM, PULSE2_TIM_CH);
 800147a:	210c      	movs	r1, #12
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <elew_dol+0x3c>)
 800147e:	f006 fe3d 	bl	80080fc <HAL_TIM_PWM_Start>
	}
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20001618 	.word	0x20001618
 800148c:	48000400 	.word	0x48000400

08001490 <elew_gora>:

void elew_gora(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&PULSE2_TIM, PULSE2_TIM_CH) == 0 ||
 8001494:	210c      	movs	r1, #12
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <elew_gora+0x3c>)
 8001498:	f006 fe30 	bl	80080fc <HAL_TIM_PWM_Start>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d007      	beq.n	80014b2 <elew_gora+0x22>
	HAL_GPIO_ReadPin(DIR_2_PORT, DIR_2_PIN) == GPIO_PIN_RESET)
 80014a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a6:	480a      	ldr	r0, [pc, #40]	; (80014d0 <elew_gora+0x40>)
 80014a8:	f003 fd6c 	bl	8004f84 <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
	if(HAL_TIM_PWM_Start(&PULSE2_TIM, PULSE2_TIM_CH) == 0 ||
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <elew_gora+0x36>
	{
	  HAL_GPIO_WritePin(DIR_2_PORT, DIR_2_PIN, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <elew_gora+0x40>)
 80014ba:	f003 fd7b 	bl	8004fb4 <HAL_GPIO_WritePin>
	  HAL_TIM_PWM_Start(&PULSE2_TIM, PULSE2_TIM_CH);
 80014be:	210c      	movs	r1, #12
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <elew_gora+0x3c>)
 80014c2:	f006 fe1b 	bl	80080fc <HAL_TIM_PWM_Start>
	}
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20001618 	.word	0x20001618
 80014d0:	48000400 	.word	0x48000400

080014d4 <elew_stop>:

void elew_stop(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&PULSE2_TIM, PULSE2_TIM_CH);
 80014d8:	210c      	movs	r1, #12
 80014da:	4802      	ldr	r0, [pc, #8]	; (80014e4 <elew_stop+0x10>)
 80014dc:	f006 fe6e 	bl	80081bc <HAL_TIM_PWM_Stop>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20001618 	.word	0x20001618

080014e8 <elew_poz_pocz>:

void elew_poz_pocz(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
	// pozycja poczatkowa elewacji panelu: 45st
	uint16_t kroki, licz;
	kroki = KAT_ELEW_POCZ*MICROSTEP_NUM*PRZELOZENIE_ELEW/1.8;
 80014ee:	f240 73fc 	movw	r3, #2044	; 0x7fc
 80014f2:	80fb      	strh	r3, [r7, #6]

	elew_kroki(kroki);
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f806 	bl	8001508 <elew_kroki>
	//elew_predk(100);

	elew_gora();
 80014fc:	f7ff ffc8 	bl	8001490 <elew_gora>




}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <elew_kroki>:

void elew_kroki(uint16_t kroki)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
	//HAL_TIM_Base_Start_IT(&STEPS1_TIM);
	__HAL_TIM_SET_AUTORELOAD(&STEPS2_TIM, kroki);
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <elew_kroki+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	88fa      	ldrh	r2, [r7, #6]
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	4a03      	ldr	r2, [pc, #12]	; (800152c <elew_kroki+0x24>)
 800151e:	60d3      	str	r3, [r2, #12]

}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	20001658 	.word	0x20001658

08001530 <elew_predk>:
void elew_predk(uint16_t rpm)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	80fb      	strh	r3, [r7, #6]
	if(rpm > 0)
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d01f      	beq.n	8001580 <elew_predk+0x50>
	{
	  uint16_t arr_val = XT_TIM_CLK / (((XT_TIM_PSC+1) *
		  	rpm * STEPS_PER_REV * MICROSTEP_NUM) / 60) - 1;
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <elew_predk+0x64>)
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	4a13      	ldr	r2, [pc, #76]	; (8001598 <elew_predk+0x68>)
 800154a:	fb82 1203 	smull	r1, r2, r2, r3
 800154e:	441a      	add	r2, r3
 8001550:	1152      	asrs	r2, r2, #5
 8001552:	17db      	asrs	r3, r3, #31
 8001554:	1ad3      	subs	r3, r2, r3
	  uint16_t arr_val = XT_TIM_CLK / (((XT_TIM_PSC+1) *
 8001556:	4a11      	ldr	r2, [pc, #68]	; (800159c <elew_predk+0x6c>)
 8001558:	fb92 f3f3 	sdiv	r3, r2, r3
		  	rpm * STEPS_PER_REV * MICROSTEP_NUM) / 60) - 1;
 800155c:	b29b      	uxth	r3, r3
	  uint16_t arr_val = XT_TIM_CLK / (((XT_TIM_PSC+1) *
 800155e:	3b01      	subs	r3, #1
 8001560:	81fb      	strh	r3, [r7, #14]
	  uint16_t pulse_val = arr_val / 2;
 8001562:	89fb      	ldrh	r3, [r7, #14]
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	81bb      	strh	r3, [r7, #12]
	  __HAL_TIM_SET_AUTORELOAD(&PULSE2_TIM, arr_val);
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <elew_predk+0x70>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	89fa      	ldrh	r2, [r7, #14]
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001570:	89fb      	ldrh	r3, [r7, #14]
 8001572:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <elew_predk+0x70>)
 8001574:	60d3      	str	r3, [r2, #12]
	  __HAL_TIM_SET_COMPARE(&PULSE2_TIM, PULSE2_TIM_CH, pulse_val);
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <elew_predk+0x70>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	89ba      	ldrh	r2, [r7, #12]
 800157c:	641a      	str	r2, [r3, #64]	; 0x40
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&PULSE2_TIM, PULSE2_TIM_CH, 0);
	}
}
 800157e:	e003      	b.n	8001588 <elew_predk+0x58>
		__HAL_TIM_SET_COMPARE(&PULSE2_TIM, PULSE2_TIM_CH, 0);
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <elew_predk+0x70>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	00119400 	.word	0x00119400
 8001598:	88888889 	.word	0x88888889
 800159c:	044aa200 	.word	0x044aa200
 80015a0:	20001618 	.word	0x20001618

080015a4 <elew_odczytaj_fotorez>:

uint32_t * elew_odczytaj_fotorez(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	static uint32_t foto[4];
	HAL_ADC_Start_DMA(&FOTO_ADC, foto, 4);
 80015a8:	2204      	movs	r2, #4
 80015aa:	4906      	ldr	r1, [pc, #24]	; (80015c4 <elew_odczytaj_fotorez+0x20>)
 80015ac:	4806      	ldr	r0, [pc, #24]	; (80015c8 <elew_odczytaj_fotorez+0x24>)
 80015ae:	f002 f939 	bl	8003824 <HAL_ADC_Start_DMA>
	HAL_Delay(10);
 80015b2:	200a      	movs	r0, #10
 80015b4:	f001 fefc 	bl	80033b0 <HAL_Delay>
	HAL_ADC_Stop_DMA(&FOTO_ADC);
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <elew_odczytaj_fotorez+0x24>)
 80015ba:	f002 fa4f 	bl	8003a5c <HAL_ADC_Stop_DMA>

	return  foto;
 80015be:	4b01      	ldr	r3, [pc, #4]	; (80015c4 <elew_odczytaj_fotorez+0x20>)
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000228 	.word	0x20000228
 80015c8:	20000478 	.word	0x20000478

080015cc <elew_steruj>:

void elew_steruj()
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
	uint32_t *foto;
	uint16_t LG, PG, LD, PD;
	const uint16_t cz_x = 100;
 80015d2:	2364      	movs	r3, #100	; 0x64
 80015d4:	82bb      	strh	r3, [r7, #20]
	int16_t x,p;
	foto = elew_odczytaj_fotorez();
 80015d6:	f7ff ffe5 	bl	80015a4 <elew_odczytaj_fotorez>
 80015da:	6138      	str	r0, [r7, #16]
	HAL_Delay(10);
 80015dc:	200a      	movs	r0, #10
 80015de:	f001 fee7 	bl	80033b0 <HAL_Delay>

	PD = foto[0];
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	81fb      	strh	r3, [r7, #14]
	PG = foto[1];
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	3304      	adds	r3, #4
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	81bb      	strh	r3, [r7, #12]

	LG = foto[2];
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	3308      	adds	r3, #8
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	817b      	strh	r3, [r7, #10]
	LD = foto[3];
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	330c      	adds	r3, #12
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	813b      	strh	r3, [r7, #8]

	x = (LG+PG) - (LD+PD);
 8001600:	897a      	ldrh	r2, [r7, #10]
 8001602:	89bb      	ldrh	r3, [r7, #12]
 8001604:	4413      	add	r3, r2
 8001606:	b29a      	uxth	r2, r3
 8001608:	8939      	ldrh	r1, [r7, #8]
 800160a:	89fb      	ldrh	r3, [r7, #14]
 800160c:	440b      	add	r3, r1
 800160e:	b29b      	uxth	r3, r3
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	b29b      	uxth	r3, r3
 8001614:	82fb      	strh	r3, [r7, #22]

	p=HAL_GPIO_ReadPin(KR_GORA, KR_GORA_PIN);
 8001616:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800161a:	4844      	ldr	r0, [pc, #272]	; (800172c <elew_steruj+0x160>)
 800161c:	f003 fcb2 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001620:	4603      	mov	r3, r0
 8001622:	80fb      	strh	r3, [r7, #6]

	while ((x > cz_x) &&
 8001624:	e02d      	b.n	8001682 <elew_steruj+0xb6>
	(HAL_GPIO_ReadPin(KR_GORA, KR_GORA_PIN) == 1))
	{
		while ((x > cz_x/2) &&
		(HAL_GPIO_ReadPin(KR_GORA, KR_GORA_PIN) == 1))
		{
			elew_gora();
 8001626:	f7ff ff33 	bl	8001490 <elew_gora>
			foto = elew_odczytaj_fotorez();
 800162a:	f7ff ffbb 	bl	80015a4 <elew_odczytaj_fotorez>
 800162e:	6138      	str	r0, [r7, #16]
			PD = foto[0];
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	81fb      	strh	r3, [r7, #14]
			PG = foto[1];
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	3304      	adds	r3, #4
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	81bb      	strh	r3, [r7, #12]
			LG = foto[2];
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	3308      	adds	r3, #8
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	817b      	strh	r3, [r7, #10]


			LD = foto[3];
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	330c      	adds	r3, #12
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	813b      	strh	r3, [r7, #8]

			x = (LG+PG) - (LD+PD);
 800164e:	897a      	ldrh	r2, [r7, #10]
 8001650:	89bb      	ldrh	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	b29a      	uxth	r2, r3
 8001656:	8939      	ldrh	r1, [r7, #8]
 8001658:	89fb      	ldrh	r3, [r7, #14]
 800165a:	440b      	add	r3, r1
 800165c:	b29b      	uxth	r3, r3
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	b29b      	uxth	r3, r3
 8001662:	82fb      	strh	r3, [r7, #22]
		while ((x > cz_x/2) &&
 8001664:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001668:	8aba      	ldrh	r2, [r7, #20]
 800166a:	0852      	lsrs	r2, r2, #1
 800166c:	b292      	uxth	r2, r2
 800166e:	4293      	cmp	r3, r2
 8001670:	dd07      	ble.n	8001682 <elew_steruj+0xb6>
		(HAL_GPIO_ReadPin(KR_GORA, KR_GORA_PIN) == 1))
 8001672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001676:	482d      	ldr	r0, [pc, #180]	; (800172c <elew_steruj+0x160>)
 8001678:	f003 fc84 	bl	8004f84 <HAL_GPIO_ReadPin>
 800167c:	4603      	mov	r3, r0
		while ((x > cz_x/2) &&
 800167e:	2b01      	cmp	r3, #1
 8001680:	d0d1      	beq.n	8001626 <elew_steruj+0x5a>
	while ((x > cz_x) &&
 8001682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001686:	8abb      	ldrh	r3, [r7, #20]
 8001688:	429a      	cmp	r2, r3
 800168a:	dd39      	ble.n	8001700 <elew_steruj+0x134>
	(HAL_GPIO_ReadPin(KR_GORA, KR_GORA_PIN) == 1))
 800168c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001690:	4826      	ldr	r0, [pc, #152]	; (800172c <elew_steruj+0x160>)
 8001692:	f003 fc77 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001696:	4603      	mov	r3, r0
	while ((x > cz_x) &&
 8001698:	2b01      	cmp	r3, #1
 800169a:	d0e3      	beq.n	8001664 <elew_steruj+0x98>
		}

	}

	while ((x < -cz_x) &&
 800169c:	e030      	b.n	8001700 <elew_steruj+0x134>
	(HAL_GPIO_ReadPin(KR_DOL, KR_DOL_PIN) == 1))
	{
		while ((x < -cz_x/2) &&
		(HAL_GPIO_ReadPin(KR_DOL, KR_DOL_PIN) == 1))
		{
			elew_dol();
 800169e:	f7ff fed5 	bl	800144c <elew_dol>
			foto = elew_odczytaj_fotorez();
 80016a2:	f7ff ff7f 	bl	80015a4 <elew_odczytaj_fotorez>
 80016a6:	6138      	str	r0, [r7, #16]
			PD = foto[0];
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	81fb      	strh	r3, [r7, #14]
			PG = foto[1];
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	3304      	adds	r3, #4
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	81bb      	strh	r3, [r7, #12]
			LG = foto[2];
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	3308      	adds	r3, #8
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	817b      	strh	r3, [r7, #10]
			LD = foto[3];
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	330c      	adds	r3, #12
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	813b      	strh	r3, [r7, #8]

			x = (LG+PG) - (LD+PD);
 80016c6:	897a      	ldrh	r2, [r7, #10]
 80016c8:	89bb      	ldrh	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	8939      	ldrh	r1, [r7, #8]
 80016d0:	89fb      	ldrh	r3, [r7, #14]
 80016d2:	440b      	add	r3, r1
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	b29b      	uxth	r3, r3
 80016da:	82fb      	strh	r3, [r7, #22]
		while ((x < -cz_x/2) &&
 80016dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016e0:	8abb      	ldrh	r3, [r7, #20]
 80016e2:	425b      	negs	r3, r3
 80016e4:	0fd9      	lsrs	r1, r3, #31
 80016e6:	440b      	add	r3, r1
 80016e8:	105b      	asrs	r3, r3, #1
 80016ea:	429a      	cmp	r2, r3
 80016ec:	da08      	bge.n	8001700 <elew_steruj+0x134>
		(HAL_GPIO_ReadPin(KR_DOL, KR_DOL_PIN) == 1))
 80016ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f003 fc45 	bl	8004f84 <HAL_GPIO_ReadPin>
 80016fa:	4603      	mov	r3, r0
		while ((x < -cz_x/2) &&
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d0ce      	beq.n	800169e <elew_steruj+0xd2>
	while ((x < -cz_x) &&
 8001700:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001704:	8abb      	ldrh	r3, [r7, #20]
 8001706:	425b      	negs	r3, r3
 8001708:	429a      	cmp	r2, r3
 800170a:	da08      	bge.n	800171e <elew_steruj+0x152>
	(HAL_GPIO_ReadPin(KR_DOL, KR_DOL_PIN) == 1))
 800170c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f003 fc36 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001718:	4603      	mov	r3, r0
	while ((x < -cz_x) &&
 800171a:	2b01      	cmp	r3, #1
 800171c:	d0de      	beq.n	80016dc <elew_steruj+0x110>
		}

	}

	elew_stop();
 800171e:	f7ff fed9 	bl	80014d4 <elew_stop>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	48000400 	.word	0x48000400

08001730 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800173a:	4804      	ldr	r0, [pc, #16]	; (800174c <SELECT+0x1c>)
 800173c:	f003 fc3a 	bl	8004fb4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001740:	2001      	movs	r0, #1
 8001742:	f001 fe35 	bl	80033b0 <HAL_Delay>
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	48000400 	.word	0x48000400

08001750 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800175a:	4804      	ldr	r0, [pc, #16]	; (800176c <DESELECT+0x1c>)
 800175c:	f003 fc2a 	bl	8004fb4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001760:	2001      	movs	r0, #1
 8001762:	f001 fe25 	bl	80033b0 <HAL_Delay>
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	48000400 	.word	0x48000400

08001770 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800177a:	bf00      	nop
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <SPI_TxByte+0x30>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b02      	cmp	r3, #2
 8001788:	d1f8      	bne.n	800177c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800178a:	1df9      	adds	r1, r7, #7
 800178c:	2364      	movs	r3, #100	; 0x64
 800178e:	2201      	movs	r2, #1
 8001790:	4803      	ldr	r0, [pc, #12]	; (80017a0 <SPI_TxByte+0x30>)
 8001792:	f005 ff91 	bl	80076b8 <HAL_SPI_Transmit>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200015b0 	.word	0x200015b0

080017a4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017b0:	bf00      	nop
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <SPI_TxBuffer+0x30>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d1f8      	bne.n	80017b2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80017c0:	887a      	ldrh	r2, [r7, #2]
 80017c2:	2364      	movs	r3, #100	; 0x64
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4803      	ldr	r0, [pc, #12]	; (80017d4 <SPI_TxBuffer+0x30>)
 80017c8:	f005 ff76 	bl	80076b8 <HAL_SPI_Transmit>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	200015b0 	.word	0x200015b0

080017d8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80017de:	23ff      	movs	r3, #255	; 0xff
 80017e0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017e2:	bf00      	nop
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <SPI_RxByte+0x34>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d1f8      	bne.n	80017e4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80017f2:	1dba      	adds	r2, r7, #6
 80017f4:	1df9      	adds	r1, r7, #7
 80017f6:	2364      	movs	r3, #100	; 0x64
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2301      	movs	r3, #1
 80017fc:	4803      	ldr	r0, [pc, #12]	; (800180c <SPI_RxByte+0x34>)
 80017fe:	f006 f8c1 	bl	8007984 <HAL_SPI_TransmitReceive>

	return data;
 8001802:	79bb      	ldrb	r3, [r7, #6]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200015b0 	.word	0x200015b0

08001810 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001818:	f7ff ffde 	bl	80017d8 <SPI_RxByte>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	701a      	strb	r2, [r3, #0]
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <SD_ReadyWait+0x30>)
 8001834:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001838:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800183a:	f7ff ffcd 	bl	80017d8 <SPI_RxByte>
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2bff      	cmp	r3, #255	; 0xff
 8001846:	d004      	beq.n	8001852 <SD_ReadyWait+0x26>
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <SD_ReadyWait+0x30>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b29b      	uxth	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f3      	bne.n	800183a <SD_ReadyWait+0xe>

	return res;
 8001852:	79fb      	ldrb	r3, [r7, #7]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20001614 	.word	0x20001614

08001860 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001866:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800186a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800186c:	f7ff ff70 	bl	8001750 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	e005      	b.n	8001882 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001876:	20ff      	movs	r0, #255	; 0xff
 8001878:	f7ff ff7a 	bl	8001770 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3301      	adds	r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b09      	cmp	r3, #9
 8001886:	ddf6      	ble.n	8001876 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001888:	f7ff ff52 	bl	8001730 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800188c:	2340      	movs	r3, #64	; 0x40
 800188e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80018a0:	2395      	movs	r3, #149	; 0x95
 80018a2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80018a4:	463b      	mov	r3, r7
 80018a6:	2106      	movs	r1, #6
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff7b 	bl	80017a4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80018ae:	e002      	b.n	80018b6 <SD_PowerOn+0x56>
	{
		cnt--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80018b6:	f7ff ff8f 	bl	80017d8 <SPI_RxByte>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d002      	beq.n	80018c6 <SD_PowerOn+0x66>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f4      	bne.n	80018b0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80018c6:	f7ff ff43 	bl	8001750 <DESELECT>
	SPI_TxByte(0XFF);
 80018ca:	20ff      	movs	r0, #255	; 0xff
 80018cc:	f7ff ff50 	bl	8001770 <SPI_TxByte>

	PowerFlag = 1;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <SD_PowerOn+0x80>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000239 	.word	0x20000239

080018e4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <SD_PowerOff+0x14>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	20000239 	.word	0x20000239

080018fc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <SD_CheckPower+0x14>)
 8001902:	781b      	ldrb	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000239 	.word	0x20000239

08001914 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <SD_RxDataBlock+0x5c>)
 8001920:	22c8      	movs	r2, #200	; 0xc8
 8001922:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001924:	f7ff ff58 	bl	80017d8 <SPI_RxByte>
 8001928:	4603      	mov	r3, r0
 800192a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	2bff      	cmp	r3, #255	; 0xff
 8001930:	d104      	bne.n	800193c <SD_RxDataBlock+0x28>
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <SD_RxDataBlock+0x5c>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f3      	bne.n	8001924 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	2bfe      	cmp	r3, #254	; 0xfe
 8001940:	d001      	beq.n	8001946 <SD_RxDataBlock+0x32>
 8001942:	2300      	movs	r3, #0
 8001944:	e00f      	b.n	8001966 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5f 	bl	8001810 <SPI_RxBytePtr>
	} while(len--);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	1e5a      	subs	r2, r3, #1
 8001956:	603a      	str	r2, [r7, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f4      	bne.n	8001946 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800195c:	f7ff ff3c 	bl	80017d8 <SPI_RxByte>
	SPI_RxByte();
 8001960:	f7ff ff3a 	bl	80017d8 <SPI_RxByte>

	return TRUE;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20001615 	.word	0x20001615

08001974 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001984:	f7ff ff52 	bl	800182c <SD_ReadyWait>
 8001988:	4603      	mov	r3, r0
 800198a:	2bff      	cmp	r3, #255	; 0xff
 800198c:	d001      	beq.n	8001992 <SD_TxDataBlock+0x1e>
 800198e:	2300      	movs	r3, #0
 8001990:	e02f      	b.n	80019f2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff feeb 	bl	8001770 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	2bfd      	cmp	r3, #253	; 0xfd
 800199e:	d020      	beq.n	80019e2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80019a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fefd 	bl	80017a4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80019aa:	f7ff ff15 	bl	80017d8 <SPI_RxByte>
		SPI_RxByte();
 80019ae:	f7ff ff13 	bl	80017d8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80019b2:	e00b      	b.n	80019cc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80019b4:	f7ff ff10 	bl	80017d8 <SPI_RxByte>
 80019b8:	4603      	mov	r3, r0
 80019ba:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	2b05      	cmp	r3, #5
 80019c4:	d006      	beq.n	80019d4 <SD_TxDataBlock+0x60>
			i++;
 80019c6:	7bbb      	ldrb	r3, [r7, #14]
 80019c8:	3301      	adds	r3, #1
 80019ca:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	2b40      	cmp	r3, #64	; 0x40
 80019d0:	d9f0      	bls.n	80019b4 <SD_TxDataBlock+0x40>
 80019d2:	e000      	b.n	80019d6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80019d4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80019d6:	bf00      	nop
 80019d8:	f7ff fefe 	bl	80017d8 <SPI_RxByte>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0fa      	beq.n	80019d8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d101      	bne.n	80019f0 <SD_TxDataBlock+0x7c>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	6039      	str	r1, [r7, #0]
 8001a04:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001a06:	f7ff ff11 	bl	800182c <SD_ReadyWait>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2bff      	cmp	r3, #255	; 0xff
 8001a0e:	d001      	beq.n	8001a14 <SD_SendCmd+0x1a>
 8001a10:	23ff      	movs	r3, #255	; 0xff
 8001a12:	e042      	b.n	8001a9a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff feaa 	bl	8001770 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	0e1b      	lsrs	r3, r3, #24
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fea4 	bl	8001770 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	0c1b      	lsrs	r3, r3, #16
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fe9e 	bl	8001770 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fe98 	bl	8001770 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fe93 	bl	8001770 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b40      	cmp	r3, #64	; 0x40
 8001a4e:	d102      	bne.n	8001a56 <SD_SendCmd+0x5c>
 8001a50:	2395      	movs	r3, #149	; 0x95
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e007      	b.n	8001a66 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b48      	cmp	r3, #72	; 0x48
 8001a5a:	d102      	bne.n	8001a62 <SD_SendCmd+0x68>
 8001a5c:	2387      	movs	r3, #135	; 0x87
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	e001      	b.n	8001a66 <SD_SendCmd+0x6c>
	else crc = 1;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fe81 	bl	8001770 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b4c      	cmp	r3, #76	; 0x4c
 8001a72:	d101      	bne.n	8001a78 <SD_SendCmd+0x7e>
 8001a74:	f7ff feb0 	bl	80017d8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001a78:	230a      	movs	r3, #10
 8001a7a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001a7c:	f7ff feac 	bl	80017d8 <SPI_RxByte>
 8001a80:	4603      	mov	r3, r0
 8001a82:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001a84:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da05      	bge.n	8001a98 <SD_SendCmd+0x9e>
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	73bb      	strb	r3, [r7, #14]
 8001a92:	7bbb      	ldrb	r3, [r7, #14]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f1      	bne.n	8001a7c <SD_SendCmd+0x82>

	return res;
 8001a98:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SD_disk_initialize+0x14>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0d6      	b.n	8001c66 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001ab8:	4b6d      	ldr	r3, [pc, #436]	; (8001c70 <SD_disk_initialize+0x1cc>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <SD_disk_initialize+0x2a>
 8001ac6:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <SD_disk_initialize+0x1cc>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	e0cb      	b.n	8001c66 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8001ace:	f7ff fec7 	bl	8001860 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001ad2:	f7ff fe2d 	bl	8001730 <SELECT>

	/* check disk type */
	type = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001ada:	2100      	movs	r1, #0
 8001adc:	2040      	movs	r0, #64	; 0x40
 8001ade:	f7ff ff8c 	bl	80019fa <SD_SendCmd>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	f040 80a6 	bne.w	8001c36 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <SD_disk_initialize+0x1d0>)
 8001aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001af0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001af2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001af6:	2048      	movs	r0, #72	; 0x48
 8001af8:	f7ff ff7f 	bl	80019fa <SD_SendCmd>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d158      	bne.n	8001bb4 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	73fb      	strb	r3, [r7, #15]
 8001b06:	e00c      	b.n	8001b22 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001b08:	7bfc      	ldrb	r4, [r7, #15]
 8001b0a:	f7ff fe65 	bl	80017d8 <SPI_RxByte>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4423      	add	r3, r4
 8001b18:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d9ef      	bls.n	8001b08 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001b28:	7abb      	ldrb	r3, [r7, #10]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	f040 8083 	bne.w	8001c36 <SD_disk_initialize+0x192>
 8001b30:	7afb      	ldrb	r3, [r7, #11]
 8001b32:	2baa      	cmp	r3, #170	; 0xaa
 8001b34:	d17f      	bne.n	8001c36 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b36:	2100      	movs	r1, #0
 8001b38:	2077      	movs	r0, #119	; 0x77
 8001b3a:	f7ff ff5e 	bl	80019fa <SD_SendCmd>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d807      	bhi.n	8001b54 <SD_disk_initialize+0xb0>
 8001b44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b48:	2069      	movs	r0, #105	; 0x69
 8001b4a:	f7ff ff56 	bl	80019fa <SD_SendCmd>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001b54:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <SD_disk_initialize+0x1d0>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1eb      	bne.n	8001b36 <SD_disk_initialize+0x92>
 8001b5e:	e000      	b.n	8001b62 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b60:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001b62:	4b44      	ldr	r3, [pc, #272]	; (8001c74 <SD_disk_initialize+0x1d0>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d064      	beq.n	8001c36 <SD_disk_initialize+0x192>
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	207a      	movs	r0, #122	; 0x7a
 8001b70:	f7ff ff43 	bl	80019fa <SD_SendCmd>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d15d      	bne.n	8001c36 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	e00c      	b.n	8001b9a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001b80:	7bfc      	ldrb	r4, [r7, #15]
 8001b82:	f7ff fe29 	bl	80017d8 <SPI_RxByte>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	4423      	add	r3, r4
 8001b90:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	3301      	adds	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d9ef      	bls.n	8001b80 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001ba0:	7a3b      	ldrb	r3, [r7, #8]
 8001ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <SD_disk_initialize+0x10a>
 8001baa:	230c      	movs	r3, #12
 8001bac:	e000      	b.n	8001bb0 <SD_disk_initialize+0x10c>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	73bb      	strb	r3, [r7, #14]
 8001bb2:	e040      	b.n	8001c36 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2077      	movs	r0, #119	; 0x77
 8001bb8:	f7ff ff1f 	bl	80019fa <SD_SendCmd>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d808      	bhi.n	8001bd4 <SD_disk_initialize+0x130>
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2069      	movs	r0, #105	; 0x69
 8001bc6:	f7ff ff18 	bl	80019fa <SD_SendCmd>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d801      	bhi.n	8001bd4 <SD_disk_initialize+0x130>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e000      	b.n	8001bd6 <SD_disk_initialize+0x132>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001bd8:	7bbb      	ldrb	r3, [r7, #14]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d10e      	bne.n	8001bfc <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001bde:	2100      	movs	r1, #0
 8001be0:	2077      	movs	r0, #119	; 0x77
 8001be2:	f7ff ff0a 	bl	80019fa <SD_SendCmd>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d80e      	bhi.n	8001c0a <SD_disk_initialize+0x166>
 8001bec:	2100      	movs	r1, #0
 8001bee:	2069      	movs	r0, #105	; 0x69
 8001bf0:	f7ff ff03 	bl	80019fa <SD_SendCmd>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d107      	bne.n	8001c0a <SD_disk_initialize+0x166>
 8001bfa:	e00d      	b.n	8001c18 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2041      	movs	r0, #65	; 0x41
 8001c00:	f7ff fefb 	bl	80019fa <SD_SendCmd>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <SD_disk_initialize+0x1d0>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e1      	bne.n	8001bd8 <SD_disk_initialize+0x134>
 8001c14:	e000      	b.n	8001c18 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001c16:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <SD_disk_initialize+0x1d0>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <SD_disk_initialize+0x18e>
 8001c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c26:	2050      	movs	r0, #80	; 0x50
 8001c28:	f7ff fee7 	bl	80019fa <SD_SendCmd>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <SD_disk_initialize+0x192>
 8001c32:	2300      	movs	r3, #0
 8001c34:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <SD_disk_initialize+0x1d4>)
 8001c38:	7bbb      	ldrb	r3, [r7, #14]
 8001c3a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001c3c:	f7ff fd88 	bl	8001750 <DESELECT>
	SPI_RxByte();
 8001c40:	f7ff fdca 	bl	80017d8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001c44:	7bbb      	ldrb	r3, [r7, #14]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d008      	beq.n	8001c5c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <SD_disk_initialize+0x1cc>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <SD_disk_initialize+0x1cc>)
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e001      	b.n	8001c60 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001c5c:	f7ff fe42 	bl	80018e4 <SD_PowerOff>
	}

	return Stat;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <SD_disk_initialize+0x1cc>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b2db      	uxtb	r3, r3
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd90      	pop	{r4, r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20001615 	.word	0x20001615
 8001c78:	20000238 	.word	0x20000238

08001c7c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <SD_disk_status+0x14>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e002      	b.n	8001c96 <SD_disk_status+0x1a>
	return Stat;
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <SD_disk_status+0x28>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b2db      	uxtb	r3, r3
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000000 	.word	0x20000000

08001ca8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <SD_disk_read+0x1c>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <SD_disk_read+0x20>
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	e051      	b.n	8001d6c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <SD_disk_read+0xcc>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SD_disk_read+0x32>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e048      	b.n	8001d6c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <SD_disk_read+0xd0>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <SD_disk_read+0x44>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	025b      	lsls	r3, r3, #9
 8001cea:	607b      	str	r3, [r7, #4]

	SELECT();
 8001cec:	f7ff fd20 	bl	8001730 <SELECT>

	if (count == 1)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d111      	bne.n	8001d1a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	2051      	movs	r0, #81	; 0x51
 8001cfa:	f7ff fe7e 	bl	80019fa <SD_SendCmd>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d129      	bne.n	8001d58 <SD_disk_read+0xb0>
 8001d04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d08:	68b8      	ldr	r0, [r7, #8]
 8001d0a:	f7ff fe03 	bl	8001914 <SD_RxDataBlock>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d021      	beq.n	8001d58 <SD_disk_read+0xb0>
 8001d14:	2300      	movs	r3, #0
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	e01e      	b.n	8001d58 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	2052      	movs	r0, #82	; 0x52
 8001d1e:	f7ff fe6c 	bl	80019fa <SD_SendCmd>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d117      	bne.n	8001d58 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001d28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d2c:	68b8      	ldr	r0, [r7, #8]
 8001d2e:	f7ff fdf1 	bl	8001914 <SD_RxDataBlock>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00a      	beq.n	8001d4e <SD_disk_read+0xa6>
				buff += 512;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d3e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ed      	bne.n	8001d28 <SD_disk_read+0x80>
 8001d4c:	e000      	b.n	8001d50 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001d4e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001d50:	2100      	movs	r1, #0
 8001d52:	204c      	movs	r0, #76	; 0x4c
 8001d54:	f7ff fe51 	bl	80019fa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001d58:	f7ff fcfa 	bl	8001750 <DESELECT>
	SPI_RxByte();
 8001d5c:	f7ff fd3c 	bl	80017d8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bf14      	ite	ne
 8001d66:	2301      	movne	r3, #1
 8001d68:	2300      	moveq	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000238 	.word	0x20000238

08001d7c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <SD_disk_write+0x1c>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <SD_disk_write+0x20>
 8001d98:	2304      	movs	r3, #4
 8001d9a:	e06b      	b.n	8001e74 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d9c:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <SD_disk_write+0x100>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <SD_disk_write+0x32>
 8001daa:	2303      	movs	r3, #3
 8001dac:	e062      	b.n	8001e74 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001dae:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <SD_disk_write+0x100>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SD_disk_write+0x44>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e059      	b.n	8001e74 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001dc0:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <SD_disk_write+0x104>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <SD_disk_write+0x56>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	025b      	lsls	r3, r3, #9
 8001dd0:	607b      	str	r3, [r7, #4]

	SELECT();
 8001dd2:	f7ff fcad 	bl	8001730 <SELECT>

	if (count == 1)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d110      	bne.n	8001dfe <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	2058      	movs	r0, #88	; 0x58
 8001de0:	f7ff fe0b 	bl	80019fa <SD_SendCmd>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d13a      	bne.n	8001e60 <SD_disk_write+0xe4>
 8001dea:	21fe      	movs	r1, #254	; 0xfe
 8001dec:	68b8      	ldr	r0, [r7, #8]
 8001dee:	f7ff fdc1 	bl	8001974 <SD_TxDataBlock>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d033      	beq.n	8001e60 <SD_disk_write+0xe4>
			count = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	e030      	b.n	8001e60 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <SD_disk_write+0x104>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	2077      	movs	r0, #119	; 0x77
 8001e0e:	f7ff fdf4 	bl	80019fa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001e12:	6839      	ldr	r1, [r7, #0]
 8001e14:	2057      	movs	r0, #87	; 0x57
 8001e16:	f7ff fdf0 	bl	80019fa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	2059      	movs	r0, #89	; 0x59
 8001e1e:	f7ff fdec 	bl	80019fa <SD_SendCmd>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001e28:	21fc      	movs	r1, #252	; 0xfc
 8001e2a:	68b8      	ldr	r0, [r7, #8]
 8001e2c:	f7ff fda2 	bl	8001974 <SD_TxDataBlock>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <SD_disk_write+0xd0>
				buff += 512;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e3c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1ee      	bne.n	8001e28 <SD_disk_write+0xac>
 8001e4a:	e000      	b.n	8001e4e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001e4c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001e4e:	21fd      	movs	r1, #253	; 0xfd
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff fd8f 	bl	8001974 <SD_TxDataBlock>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <SD_disk_write+0xe4>
			{
				count = 1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001e60:	f7ff fc76 	bl	8001750 <DESELECT>
	SPI_RxByte();
 8001e64:	f7ff fcb8 	bl	80017d8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf14      	ite	ne
 8001e6e:	2301      	movne	r3, #1
 8001e70:	2300      	moveq	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000238 	.word	0x20000238

08001e84 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b08b      	sub	sp, #44	; 0x2c
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	603a      	str	r2, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
 8001e90:	460b      	mov	r3, r1
 8001e92:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <SD_disk_ioctl+0x1e>
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	e113      	b.n	80020ca <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001ea8:	79bb      	ldrb	r3, [r7, #6]
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	d121      	bne.n	8001ef2 <SD_disk_ioctl+0x6e>
	{
		switch (*ptr)
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d009      	beq.n	8001eca <SD_disk_ioctl+0x46>
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d00d      	beq.n	8001ed6 <SD_disk_ioctl+0x52>
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d115      	bne.n	8001eea <SD_disk_ioctl+0x66>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001ebe:	f7ff fd11 	bl	80018e4 <SD_PowerOff>
			res = RES_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ec8:	e0fd      	b.n	80020c6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001eca:	f7ff fcc9 	bl	8001860 <SD_PowerOn>
			res = RES_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ed4:	e0f7      	b.n	80020c6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	1c5c      	adds	r4, r3, #1
 8001eda:	f7ff fd0f 	bl	80018fc <SD_CheckPower>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ee8:	e0ed      	b.n	80020c6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001eea:	2304      	movs	r3, #4
 8001eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ef0:	e0e9      	b.n	80020c6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ef2:	4b78      	ldr	r3, [pc, #480]	; (80020d4 <SD_disk_ioctl+0x250>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <SD_disk_ioctl+0x80>
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0e2      	b.n	80020ca <SD_disk_ioctl+0x246>

		SELECT();
 8001f04:	f7ff fc14 	bl	8001730 <SELECT>

		switch (ctrl)
 8001f08:	79bb      	ldrb	r3, [r7, #6]
 8001f0a:	2b0d      	cmp	r3, #13
 8001f0c:	f200 80cc 	bhi.w	80020a8 <SD_disk_ioctl+0x224>
 8001f10:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <SD_disk_ioctl+0x94>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08002013 	.word	0x08002013
 8001f1c:	08001f51 	.word	0x08001f51
 8001f20:	08002003 	.word	0x08002003
 8001f24:	080020a9 	.word	0x080020a9
 8001f28:	080020a9 	.word	0x080020a9
 8001f2c:	080020a9 	.word	0x080020a9
 8001f30:	080020a9 	.word	0x080020a9
 8001f34:	080020a9 	.word	0x080020a9
 8001f38:	080020a9 	.word	0x080020a9
 8001f3c:	080020a9 	.word	0x080020a9
 8001f40:	080020a9 	.word	0x080020a9
 8001f44:	08002025 	.word	0x08002025
 8001f48:	08002049 	.word	0x08002049
 8001f4c:	0800206d 	.word	0x0800206d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001f50:	2100      	movs	r1, #0
 8001f52:	2049      	movs	r0, #73	; 0x49
 8001f54:	f7ff fd51 	bl	80019fa <SD_SendCmd>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 80a8 	bne.w	80020b0 <SD_disk_ioctl+0x22c>
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	2110      	movs	r1, #16
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fcd4 	bl	8001914 <SD_RxDataBlock>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 809e 	beq.w	80020b0 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001f74:	7b3b      	ldrb	r3, [r7, #12]
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d10e      	bne.n	8001f9c <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001f7e:	7d7b      	ldrb	r3, [r7, #21]
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	7d3b      	ldrb	r3, [r7, #20]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001f92:	8bfb      	ldrh	r3, [r7, #30]
 8001f94:	029a      	lsls	r2, r3, #10
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	e02e      	b.n	8001ffa <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001f9c:	7c7b      	ldrb	r3, [r7, #17]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	7dbb      	ldrb	r3, [r7, #22]
 8001fa6:	09db      	lsrs	r3, r3, #7
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	7d7b      	ldrb	r3, [r7, #21]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f003 0306 	and.w	r3, r3, #6
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001fc4:	7d3b      	ldrb	r3, [r7, #20]
 8001fc6:	099b      	lsrs	r3, r3, #6
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	7cfb      	ldrb	r3, [r7, #19]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	7cbb      	ldrb	r3, [r7, #18]
 8001fda:	029b      	lsls	r3, r3, #10
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001fec:	8bfa      	ldrh	r2, [r7, #30]
 8001fee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ff2:	3b09      	subs	r3, #9
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002000:	e056      	b.n	80020b0 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002008:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002010:	e055      	b.n	80020be <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002012:	f7ff fc0b 	bl	800182c <SD_ReadyWait>
 8002016:	4603      	mov	r3, r0
 8002018:	2bff      	cmp	r3, #255	; 0xff
 800201a:	d14b      	bne.n	80020b4 <SD_disk_ioctl+0x230>
 800201c:	2300      	movs	r3, #0
 800201e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002022:	e047      	b.n	80020b4 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002024:	2100      	movs	r1, #0
 8002026:	2049      	movs	r0, #73	; 0x49
 8002028:	f7ff fce7 	bl	80019fa <SD_SendCmd>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d142      	bne.n	80020b8 <SD_disk_ioctl+0x234>
 8002032:	2110      	movs	r1, #16
 8002034:	6a38      	ldr	r0, [r7, #32]
 8002036:	f7ff fc6d 	bl	8001914 <SD_RxDataBlock>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d03b      	beq.n	80020b8 <SD_disk_ioctl+0x234>
 8002040:	2300      	movs	r3, #0
 8002042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002046:	e037      	b.n	80020b8 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002048:	2100      	movs	r1, #0
 800204a:	204a      	movs	r0, #74	; 0x4a
 800204c:	f7ff fcd5 	bl	80019fa <SD_SendCmd>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d132      	bne.n	80020bc <SD_disk_ioctl+0x238>
 8002056:	2110      	movs	r1, #16
 8002058:	6a38      	ldr	r0, [r7, #32]
 800205a:	f7ff fc5b 	bl	8001914 <SD_RxDataBlock>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d02b      	beq.n	80020bc <SD_disk_ioctl+0x238>
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800206a:	e027      	b.n	80020bc <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800206c:	2100      	movs	r1, #0
 800206e:	207a      	movs	r0, #122	; 0x7a
 8002070:	f7ff fcc3 	bl	80019fa <SD_SendCmd>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d116      	bne.n	80020a8 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800207a:	2300      	movs	r3, #0
 800207c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002080:	e00b      	b.n	800209a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8002082:	6a3c      	ldr	r4, [r7, #32]
 8002084:	1c63      	adds	r3, r4, #1
 8002086:	623b      	str	r3, [r7, #32]
 8002088:	f7ff fba6 	bl	80017d8 <SPI_RxByte>
 800208c:	4603      	mov	r3, r0
 800208e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002090:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002094:	3301      	adds	r3, #1
 8002096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800209a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d9ef      	bls.n	8002082 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80020a8:	2304      	movs	r3, #4
 80020aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020ae:	e006      	b.n	80020be <SD_disk_ioctl+0x23a>
			break;
 80020b0:	bf00      	nop
 80020b2:	e004      	b.n	80020be <SD_disk_ioctl+0x23a>
			break;
 80020b4:	bf00      	nop
 80020b6:	e002      	b.n	80020be <SD_disk_ioctl+0x23a>
			break;
 80020b8:	bf00      	nop
 80020ba:	e000      	b.n	80020be <SD_disk_ioctl+0x23a>
			break;
 80020bc:	bf00      	nop
		}

		DESELECT();
 80020be:	f7ff fb47 	bl	8001750 <DESELECT>
		SPI_RxByte();
 80020c2:	f7ff fb89 	bl	80017d8 <SPI_RxByte>
	}

	return res;
 80020c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	372c      	adds	r7, #44	; 0x2c
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd90      	pop	{r4, r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000000 	.word	0x20000000

080020d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ee:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <MX_GPIO_Init+0x140>)
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	4a49      	ldr	r2, [pc, #292]	; (8002218 <MX_GPIO_Init+0x140>)
 80020f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020f8:	6153      	str	r3, [r2, #20]
 80020fa:	4b47      	ldr	r3, [pc, #284]	; (8002218 <MX_GPIO_Init+0x140>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002106:	4b44      	ldr	r3, [pc, #272]	; (8002218 <MX_GPIO_Init+0x140>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	4a43      	ldr	r2, [pc, #268]	; (8002218 <MX_GPIO_Init+0x140>)
 800210c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002110:	6153      	str	r3, [r2, #20]
 8002112:	4b41      	ldr	r3, [pc, #260]	; (8002218 <MX_GPIO_Init+0x140>)
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	4b3e      	ldr	r3, [pc, #248]	; (8002218 <MX_GPIO_Init+0x140>)
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <MX_GPIO_Init+0x140>)
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002128:	6153      	str	r3, [r2, #20]
 800212a:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <MX_GPIO_Init+0x140>)
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	4b38      	ldr	r3, [pc, #224]	; (8002218 <MX_GPIO_Init+0x140>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	4a37      	ldr	r2, [pc, #220]	; (8002218 <MX_GPIO_Init+0x140>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6153      	str	r3, [r2, #20]
 8002142:	4b35      	ldr	r3, [pc, #212]	; (8002218 <MX_GPIO_Init+0x140>)
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ENA2_Pin|DIR1_Pin, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f44f 5183 	mov.w	r1, #4192	; 0x1060
 8002154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002158:	f002 ff2c 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLEEP1_Pin|RESET1_Pin|CS_Pin|DIR2_Pin, GPIO_PIN_RESET);
 800215c:	2200      	movs	r2, #0
 800215e:	f641 1104 	movw	r1, #6404	; 0x1904
 8002162:	482e      	ldr	r0, [pc, #184]	; (800221c <MX_GPIO_Init+0x144>)
 8002164:	f002 ff26 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800216c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800216e:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <MX_GPIO_Init+0x148>)
 8002170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4619      	mov	r1, r3
 800217c:	4829      	ldr	r0, [pc, #164]	; (8002224 <MX_GPIO_Init+0x14c>)
 800217e:	f002 fd77 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|ENA2_Pin|DIR1_Pin;
 8002182:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8002186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002188:	2301      	movs	r3, #1
 800218a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4619      	mov	r1, r3
 800219a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219e:	f002 fd67 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SLEEP1_Pin|RESET1_Pin|CS_Pin|DIR2_Pin;
 80021a2:	f641 1304 	movw	r3, #6404	; 0x1904
 80021a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	4818      	ldr	r0, [pc, #96]	; (800221c <MX_GPIO_Init+0x144>)
 80021bc:	f002 fd58 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PB10_KG_Pin|PB4_KP_Pin|PB5_KL_Pin;
 80021c0:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80021c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	4811      	ldr	r0, [pc, #68]	; (800221c <MX_GPIO_Init+0x144>)
 80021d6:	f002 fd4b 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA8_KD_Pin;
 80021da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA8_KD_GPIO_Port, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f2:	f002 fd3d 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	4806      	ldr	r0, [pc, #24]	; (8002224 <MX_GPIO_Init+0x14c>)
 800220c:	f002 fd30 	bl	8004c70 <HAL_GPIO_Init>

}
 8002210:	bf00      	nop
 8002212:	3728      	adds	r7, #40	; 0x28
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	48000400 	.word	0x48000400
 8002220:	10210000 	.word	0x10210000
 8002224:	48000800 	.word	0x48000800

08002228 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <MX_I2C1_Init+0x74>)
 800222e:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <MX_I2C1_Init+0x78>)
 8002230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <MX_I2C1_Init+0x74>)
 8002234:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <MX_I2C1_Init+0x7c>)
 8002236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002238:	4b18      	ldr	r3, [pc, #96]	; (800229c <MX_I2C1_Init+0x74>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <MX_I2C1_Init+0x74>)
 8002240:	2201      	movs	r2, #1
 8002242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <MX_I2C1_Init+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <MX_I2C1_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <MX_I2C1_Init+0x74>)
 8002252:	2200      	movs	r2, #0
 8002254:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_I2C1_Init+0x74>)
 8002258:	2200      	movs	r2, #0
 800225a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <MX_I2C1_Init+0x74>)
 800225e:	2200      	movs	r2, #0
 8002260:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002262:	480e      	ldr	r0, [pc, #56]	; (800229c <MX_I2C1_Init+0x74>)
 8002264:	f002 febe 	bl	8004fe4 <HAL_I2C_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800226e:	f000 fb5d 	bl	800292c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002272:	2100      	movs	r1, #0
 8002274:	4809      	ldr	r0, [pc, #36]	; (800229c <MX_I2C1_Init+0x74>)
 8002276:	f003 fd8b 	bl	8005d90 <HAL_I2CEx_ConfigAnalogFilter>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002280:	f000 fb54 	bl	800292c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002284:	2100      	movs	r1, #0
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_I2C1_Init+0x74>)
 8002288:	f003 fdcd 	bl	8005e26 <HAL_I2CEx_ConfigDigitalFilter>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002292:	f000 fb4b 	bl	800292c <Error_Handler>
  }

}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000050c 	.word	0x2000050c
 80022a0:	40005400 	.word	0x40005400
 80022a4:	2000090e 	.word	0x2000090e

080022a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a17      	ldr	r2, [pc, #92]	; (8002324 <HAL_I2C_MspInit+0x7c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d127      	bne.n	800231a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_I2C_MspInit+0x80>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	4a16      	ldr	r2, [pc, #88]	; (8002328 <HAL_I2C_MspInit+0x80>)
 80022d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d4:	6153      	str	r3, [r2, #20]
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_I2C_MspInit+0x80>)
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022e2:	23c0      	movs	r3, #192	; 0xc0
 80022e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e6:	2312      	movs	r3, #18
 80022e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ea:	2301      	movs	r3, #1
 80022ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ee:	2303      	movs	r3, #3
 80022f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022f2:	2304      	movs	r3, #4
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	480b      	ldr	r0, [pc, #44]	; (800232c <HAL_I2C_MspInit+0x84>)
 80022fe:	f002 fcb7 	bl	8004c70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_I2C_MspInit+0x80>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4a08      	ldr	r2, [pc, #32]	; (8002328 <HAL_I2C_MspInit+0x80>)
 8002308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800230c:	61d3      	str	r3, [r2, #28]
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_I2C_MspInit+0x80>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800231a:	bf00      	nop
 800231c:	3728      	adds	r7, #40	; 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40005400 	.word	0x40005400
 8002328:	40021000 	.word	0x40021000
 800232c:	48000400 	.word	0x48000400

08002330 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8002346:	2308      	movs	r3, #8
 8002348:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 800234a:	2028      	movs	r0, #40	; 0x28
 800234c:	f001 f830 	bl	80033b0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	2130      	movs	r1, #48	; 0x30
 8002358:	4618      	mov	r0, r3
 800235a:	f000 f829 	bl	80023b0 <lcd_write>
	HAL_Delay(5);
 800235e:	2005      	movs	r0, #5
 8002360:	f001 f826 	bl	80033b0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	2130      	movs	r1, #48	; 0x30
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f81f 	bl	80023b0 <lcd_write>
	HAL_Delay(1);
 8002372:	2001      	movs	r0, #1
 8002374:	f001 f81c 	bl	80033b0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	2130      	movs	r1, #48	; 0x30
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f815 	bl	80023b0 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	2102      	movs	r1, #2
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f80e 	bl	80023b0 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	210c      	movs	r1, #12
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f807 	bl	80023b0 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f89e 	bl	80024e4 <lcd_clear>

}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
 80023ba:	460b      	mov	r3, r1
 80023bc:	71bb      	strb	r3, [r7, #6]
 80023be:	4613      	mov	r3, r2
 80023c0:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80023c2:	79bb      	ldrb	r3, [r7, #6]
 80023c4:	f023 030f 	bic.w	r3, r3, #15
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	797b      	ldrb	r3, [r7, #5]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80023d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80023dc:	f023 030f 	bic.w	r3, r3, #15
 80023e0:	b25a      	sxtb	r2, r3
 80023e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b25b      	sxtb	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80023ee:	79bb      	ldrb	r3, [r7, #6]
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	797b      	ldrb	r3, [r7, #5]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8002402:	79bb      	ldrb	r3, [r7, #6]
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	b25a      	sxtb	r2, r3
 8002408:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800240c:	4313      	orrs	r3, r2
 800240e:	b25b      	sxtb	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	b299      	uxth	r1, r3
 8002418:	f107 020c 	add.w	r2, r7, #12
 800241c:	2364      	movs	r3, #100	; 0x64
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2304      	movs	r3, #4
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <lcd_write+0x88>)
 8002424:	f002 fe6e 	bl	8005104 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8002428:	2005      	movs	r0, #5
 800242a:	f000 ffc1 	bl	80033b0 <HAL_Delay>
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	2000050c 	.word	0x2000050c

0800243c <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	2300      	movs	r3, #0
 800244a:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8002456:	2308      	movs	r3, #8
 8002458:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f842 	bl	80024e4 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ffa1 	bl	80023b0 <lcd_write>
	while(lcd->f_line[i])
 800246e:	e00f      	b.n	8002490 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	7818      	ldrb	r0, [r3, #0]
 8002474:	7bbb      	ldrb	r3, [r7, #14]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	7859      	ldrb	r1, [r3, #1]
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	f7ff ff93 	bl	80023b0 <lcd_write>
		i++;
 800248a:	7bbb      	ldrb	r3, [r7, #14]
 800248c:	3301      	adds	r3, #1
 800248e:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8002490:	7bbb      	ldrb	r3, [r7, #14]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e9      	bne.n	8002470 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	21c0      	movs	r1, #192	; 0xc0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff81 	bl	80023b0 <lcd_write>
	while(lcd->s_line[i])
 80024ae:	e00f      	b.n	80024d0 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7818      	ldrb	r0, [r3, #0]
 80024b4:	7bbb      	ldrb	r3, [r7, #14]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	7c99      	ldrb	r1, [r3, #18]
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	461a      	mov	r2, r3
 80024c6:	f7ff ff73 	bl	80023b0 <lcd_write>
		i++;
 80024ca:	7bbb      	ldrb	r3, [r7, #14]
 80024cc:	3301      	adds	r3, #1
 80024ce:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 80024d0:	7bbb      	ldrb	r3, [r7, #14]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	7c9b      	ldrb	r3, [r3, #18]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e9      	bne.n	80024b0 <lcd_display+0x74>
	}
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80024fa:	2308      	movs	r3, #8
 80024fc:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	2101      	movs	r1, #1
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff52 	bl	80023b0 <lcd_write>
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <open_append>:
//funkcja obsługująca zapis danych do pliku
FRESULT open_append (
    FIL* fp,            /* [OUT] File object to create */
    const char* path    /* [IN]  File name to be opened */
)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
    FRESULT fr;

    /* Otwiera istniejacy plik, lub tworzy nowy */
    fr = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS);
 800251e:	2212      	movs	r2, #18
 8002520:	6839      	ldr	r1, [r7, #0]
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f00a fa78 	bl	800ca18 <f_open>
 8002528:	4603      	mov	r3, r0
 800252a:	73fb      	strb	r3, [r7, #15]
    if (fr == FR_OK) {
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d110      	bne.n	8002554 <open_append+0x40>
        /* Seek to end of the file to append data */
        fr = f_lseek(fp, f_size(fp));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002538:	330c      	adds	r3, #12
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f00b f920 	bl	800d784 <f_lseek>
 8002544:	4603      	mov	r3, r0
 8002546:	73fb      	strb	r3, [r7, #15]
        if (fr != FR_OK)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <open_append+0x40>
            f_close(fp);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f00b f8ed 	bl	800d72e <f_close>
    }
    return fr;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <send_uart>:
void send_uart(char *string)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7fd fe39 	bl	80001e0 <strlen>
 800256e:	4603      	mov	r3, r0
 8002570:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, 2000); //blocking mode transmit
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	b29a      	uxth	r2, r3
 8002576:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4803      	ldr	r0, [pc, #12]	; (800258c <send_uart+0x2c>)
 800257e:	f007 f857 	bl	8009630 <HAL_UART_Transmit>
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20001758 	.word	0x20001758

08002590 <zapis_danych>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void zapis_danych(void)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 8002596:	b08b      	sub	sp, #44	; 0x2c
 8002598:	af00      	add	r7, sp, #0
		FIL fil;
		FRESULT fresult;

		float moc, voltage;
		char moc_str[30], volt_str[30];
		moc = ina_power_mW();
 800259a:	f7fe fc31 	bl	8000e00 <ina_power_mW>
 800259e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80025a2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80025a6:	ed83 0a00 	vstr	s0, [r3]
		voltage = getBusVoltage_V();
 80025aa:	f7fe fc05 	bl	8000db8 <getBusVoltage_V>
 80025ae:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80025b2:	f103 0320 	add.w	r3, r3, #32
 80025b6:	ed83 0a00 	vstr	s0, [r3]

		fresult = f_mount(&fs, "/", 1);
 80025ba:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80025be:	f103 0308 	add.w	r3, r3, #8
 80025c2:	3b1c      	subs	r3, #28
 80025c4:	2201      	movs	r2, #1
 80025c6:	4942      	ldr	r1, [pc, #264]	; (80026d0 <zapis_danych+0x140>)
 80025c8:	4618      	mov	r0, r3
 80025ca:	f00a f9db 	bl	800c984 <f_mount>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80025d4:	f102 021f 	add.w	r2, r2, #31
 80025d8:	7013      	strb	r3, [r2, #0]
		if (fresult != FR_OK) send_uart ("BLĄD, Karta zainstalowana niepoprawnie...\n\n");
 80025da:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80025de:	f103 031f 	add.w	r3, r3, #31
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <zapis_danych+0x60>
 80025e8:	483a      	ldr	r0, [pc, #232]	; (80026d4 <zapis_danych+0x144>)
 80025ea:	f7ff ffb9 	bl	8002560 <send_uart>
 80025ee:	e036      	b.n	800265e <zapis_danych+0xce>
		else {
			send_uart("Karta SD zamontowana poprawniey...\n\n");
 80025f0:	4839      	ldr	r0, [pc, #228]	; (80026d8 <zapis_danych+0x148>)
 80025f2:	f7ff ffb5 	bl	8002560 <send_uart>
			//Otwarcie pliku do zapisu danych
			fresult = open_append(&fil, "dane.txt");
 80025f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80025fa:	3b28      	subs	r3, #40	; 0x28
 80025fc:	4937      	ldr	r1, [pc, #220]	; (80026dc <zapis_danych+0x14c>)
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff88 	bl	8002514 <open_append>
 8002604:	4603      	mov	r3, r0
 8002606:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 800260a:	f102 021f 	add.w	r2, r2, #31
 800260e:	7013      	strb	r3, [r2, #0]

			// Dodanie danych na końcu pliku

			sprintf(moc_str, "%f\n", moc);
 8002610:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002614:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	f7fd ff9d 	bl	8000558 <__aeabi_f2d>
 800261e:	4603      	mov	r3, r0
 8002620:	460c      	mov	r4, r1
 8002622:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002626:	3808      	subs	r0, #8
 8002628:	461a      	mov	r2, r3
 800262a:	4623      	mov	r3, r4
 800262c:	492c      	ldr	r1, [pc, #176]	; (80026e0 <zapis_danych+0x150>)
 800262e:	f00c f9a3 	bl	800e978 <siprintf>
			f_puts(moc_str, &fil);
 8002632:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002636:	3a28      	subs	r2, #40	; 0x28
 8002638:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800263c:	3b08      	subs	r3, #8
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f00b fc10 	bl	800de66 <f_puts>

			// Zamknięcie pliku
			fresult = f_close(&fil);
 8002646:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800264a:	3b28      	subs	r3, #40	; 0x28
 800264c:	4618      	mov	r0, r3
 800264e:	f00b f86e 	bl	800d72e <f_close>
 8002652:	4603      	mov	r3, r0
 8002654:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8002658:	f102 021f 	add.w	r2, r2, #31
 800265c:	7013      	strb	r3, [r2, #0]
		}

		sprintf(moc_str, "Moc[mW]: %f", moc);
 800265e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002662:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	f7fd ff76 	bl	8000558 <__aeabi_f2d>
 800266c:	4603      	mov	r3, r0
 800266e:	460c      	mov	r4, r1
 8002670:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002674:	3808      	subs	r0, #8
 8002676:	461a      	mov	r2, r3
 8002678:	4623      	mov	r3, r4
 800267a:	491a      	ldr	r1, [pc, #104]	; (80026e4 <zapis_danych+0x154>)
 800267c:	f00c f97c 	bl	800e978 <siprintf>
		sprintf(volt_str,"Vol[V]: %f", voltage);
 8002680:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002684:	f103 0320 	add.w	r3, r3, #32
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	f7fd ff65 	bl	8000558 <__aeabi_f2d>
 800268e:	4603      	mov	r3, r0
 8002690:	460c      	mov	r4, r1
 8002692:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002696:	3828      	subs	r0, #40	; 0x28
 8002698:	461a      	mov	r2, r3
 800269a:	4623      	mov	r3, r4
 800269c:	4912      	ldr	r1, [pc, #72]	; (80026e8 <zapis_danych+0x158>)
 800269e:	f00c f96b 	bl	800e978 <siprintf>

		sprintf((char *)disp.f_line, moc_str);
 80026a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a6:	3b08      	subs	r3, #8
 80026a8:	4619      	mov	r1, r3
 80026aa:	4810      	ldr	r0, [pc, #64]	; (80026ec <zapis_danych+0x15c>)
 80026ac:	f00c f964 	bl	800e978 <siprintf>
		sprintf((char *)disp.s_line, volt_str);
 80026b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026b4:	3b28      	subs	r3, #40	; 0x28
 80026b6:	4619      	mov	r1, r3
 80026b8:	480d      	ldr	r0, [pc, #52]	; (80026f0 <zapis_danych+0x160>)
 80026ba:	f00c f95d 	bl	800e978 <siprintf>
		lcd_display(&disp);
 80026be:	480d      	ldr	r0, [pc, #52]	; (80026f4 <zapis_danych+0x164>)
 80026c0:	f7ff febc 	bl	800243c <lcd_display>
}
 80026c4:	bf00      	nop
 80026c6:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 80026ca:	372c      	adds	r7, #44	; 0x2c
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd90      	pop	{r4, r7, pc}
 80026d0:	08010170 	.word	0x08010170
 80026d4:	08010174 	.word	0x08010174
 80026d8:	080101a4 	.word	0x080101a4
 80026dc:	080101cc 	.word	0x080101cc
 80026e0:	080101d8 	.word	0x080101d8
 80026e4:	080101dc 	.word	0x080101dc
 80026e8:	080101e8 	.word	0x080101e8
 80026ec:	2000158d 	.word	0x2000158d
 80026f0:	2000159e 	.word	0x2000159e
 80026f4:	2000158c 	.word	0x2000158c

080026f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002708:	d101      	bne.n	800270e <HAL_TIM_PeriodElapsedCallback+0x16>
		{
		//Zatrzymanie pozycji elewacji panelu po osiągnięciu zadanej pozycji początkowej
		  az_stop();
 800270a:	f7fe fd2f 	bl	800116c <az_stop>
		}
	if(htim->Instance == TIM4)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a04      	ldr	r2, [pc, #16]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d101      	bne.n	800271c <HAL_TIM_PeriodElapsedCallback+0x24>
		{
		//Zatrzymanie pozycji azymutu panelu po osiągnięciu zadanej pozycji początkowej
		 	 elew_stop();
 8002718:	f7fe fedc 	bl	80014d4 <elew_stop>
		}
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40000800 	.word	0x40000800

08002728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800272e:	f000 fdd9 	bl	80032e4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002732:	f000 f88d 	bl	8002850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002736:	f7ff fccf 	bl	80020d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800273a:	f7fe fe3d 	bl	80013b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800273e:	f000 fd35 	bl	80031ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002742:	f7fe fb7f 	bl	8000e44 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002746:	f7ff fd6f 	bl	8002228 <MX_I2C1_Init>
  MX_TIM1_Init();
 800274a:	f000 fa09 	bl	8002b60 <MX_TIM1_Init>
  MX_TIM2_Init();
 800274e:	f000 fab1 	bl	8002cb4 <MX_TIM2_Init>
  MX_SPI2_Init();
 8002752:	f000 f8f3 	bl	800293c <MX_SPI2_Init>
  MX_FATFS_Init();
 8002756:	f007 fb7b 	bl	8009e50 <MX_FATFS_Init>
  MX_TIM8_Init();
 800275a:	f000 fb99 	bl	8002e90 <MX_TIM8_Init>
  MX_TIM4_Init();
 800275e:	f000 fb47 	bl	8002df0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002762:	f000 faf5 	bl	8002d50 <MX_TIM3_Init>
  // inicjalizacja modułu pomiaru mocy INA219


  HAL_StatusTypeDef ina_stat;

  ina_stat = HAL_I2C_IsDeviceReady(&hi2c1, INA_219_ADDR, 5, 20);
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	b299      	uxth	r1, r3
 800276a:	2314      	movs	r3, #20
 800276c:	2205      	movs	r2, #5
 800276e:	4831      	ldr	r0, [pc, #196]	; (8002834 <main+0x10c>)
 8002770:	f002 ffea 	bl	8005748 <HAL_I2C_IsDeviceReady>
 8002774:	4603      	mov	r3, r0
 8002776:	71fb      	strb	r3, [r7, #7]

  if (ina_stat == HAL_OK)
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <main+0x5a>
	  ina_init();
 800277e:	f7fe fa6b 	bl	8000c58 <ina_init>

  // incicjalizacja wyświetlacza LCD
  disp.addr = (0x27 << 1);
 8002782:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <main+0x110>)
 8002784:	224e      	movs	r2, #78	; 0x4e
 8002786:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <main+0x110>)
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  HAL_StatusTypeDef i2c_stat;
  i2c_stat = HAL_I2C_IsDeviceReady(&hi2c1, disp.addr, 5, 20);
 8002790:	4b29      	ldr	r3, [pc, #164]	; (8002838 <main+0x110>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b299      	uxth	r1, r3
 8002796:	2314      	movs	r3, #20
 8002798:	2205      	movs	r2, #5
 800279a:	4826      	ldr	r0, [pc, #152]	; (8002834 <main+0x10c>)
 800279c:	f002 ffd4 	bl	8005748 <HAL_I2C_IsDeviceReady>
 80027a0:	4603      	mov	r3, r0
 80027a2:	71bb      	strb	r3, [r7, #6]

  if(i2c_stat == HAL_OK)
 80027a4:	79bb      	ldrb	r3, [r7, #6]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <main+0x88>

  {
	  lcd_init(&disp);
 80027aa:	4823      	ldr	r0, [pc, #140]	; (8002838 <main+0x110>)
 80027ac:	f7ff fdc0 	bl	8002330 <lcd_init>
  }

  sprintf((char *)disp.f_line, "Pozycjonowanie");
 80027b0:	4a22      	ldr	r2, [pc, #136]	; (800283c <main+0x114>)
 80027b2:	4b23      	ldr	r3, [pc, #140]	; (8002840 <main+0x118>)
 80027b4:	4614      	mov	r4, r2
 80027b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027b8:	6020      	str	r0, [r4, #0]
 80027ba:	6061      	str	r1, [r4, #4]
 80027bc:	60a2      	str	r2, [r4, #8]
 80027be:	881a      	ldrh	r2, [r3, #0]
 80027c0:	789b      	ldrb	r3, [r3, #2]
 80027c2:	81a2      	strh	r2, [r4, #12]
 80027c4:	73a3      	strb	r3, [r4, #14]
  sprintf((char *)disp.s_line, "poczatkowe");
 80027c6:	4a1f      	ldr	r2, [pc, #124]	; (8002844 <main+0x11c>)
 80027c8:	4b1f      	ldr	r3, [pc, #124]	; (8002848 <main+0x120>)
 80027ca:	cb03      	ldmia	r3!, {r0, r1}
 80027cc:	6010      	str	r0, [r2, #0]
 80027ce:	6051      	str	r1, [r2, #4]
 80027d0:	8819      	ldrh	r1, [r3, #0]
 80027d2:	789b      	ldrb	r3, [r3, #2]
 80027d4:	8111      	strh	r1, [r2, #8]
 80027d6:	7293      	strb	r3, [r2, #10]
  lcd_display(&disp);
 80027d8:	4817      	ldr	r0, [pc, #92]	; (8002838 <main+0x110>)
 80027da:	f7ff fe2f 	bl	800243c <lcd_display>

  //Pozycjonowanie poczatkowe
  elew_init();
 80027de:	f7fe fe09 	bl	80013f4 <elew_init>
  az_init();
 80027e2:	f7fe fc4b 	bl	800107c <az_init>

  HAL_Delay(10000);
 80027e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80027ea:	f000 fde1 	bl	80033b0 <HAL_Delay>
  sprintf((char *)disp.f_line, "Tryb pracy");
 80027ee:	4a13      	ldr	r2, [pc, #76]	; (800283c <main+0x114>)
 80027f0:	4b16      	ldr	r3, [pc, #88]	; (800284c <main+0x124>)
 80027f2:	cb03      	ldmia	r3!, {r0, r1}
 80027f4:	6010      	str	r0, [r2, #0]
 80027f6:	6051      	str	r1, [r2, #4]
 80027f8:	8819      	ldrh	r1, [r3, #0]
 80027fa:	789b      	ldrb	r3, [r3, #2]
 80027fc:	8111      	strh	r1, [r2, #8]
 80027fe:	7293      	strb	r3, [r2, #10]
  sprintf((char *)disp.s_line, "");
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <main+0x110>)
 8002802:	2200      	movs	r2, #0
 8002804:	749a      	strb	r2, [r3, #18]
  lcd_display(&disp);
 8002806:	480c      	ldr	r0, [pc, #48]	; (8002838 <main+0x110>)
 8002808:	f7ff fe18 	bl	800243c <lcd_display>

  HAL_Delay(2000);
 800280c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002810:	f000 fdce 	bl	80033b0 <HAL_Delay>
  disp.bl = true;
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <main+0x110>)
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//if(f_mount(&fs, "/", 1) == FR_OK)
		zapis_danych();
 800281c:	f7ff feb8 	bl	8002590 <zapis_danych>
	az_steruj();
 8002820:	f7fe fd20 	bl	8001264 <az_steruj>

	elew_steruj();
 8002824:	f7fe fed2 	bl	80015cc <elew_steruj>

	HAL_Delay(5000);
 8002828:	f241 3088 	movw	r0, #5000	; 0x1388
 800282c:	f000 fdc0 	bl	80033b0 <HAL_Delay>
		zapis_danych();
 8002830:	e7f4      	b.n	800281c <main+0xf4>
 8002832:	bf00      	nop
 8002834:	2000050c 	.word	0x2000050c
 8002838:	2000158c 	.word	0x2000158c
 800283c:	2000158d 	.word	0x2000158d
 8002840:	080101f4 	.word	0x080101f4
 8002844:	2000159e 	.word	0x2000159e
 8002848:	08010204 	.word	0x08010204
 800284c:	08010210 	.word	0x08010210

08002850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b0a6      	sub	sp, #152	; 0x98
 8002854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002856:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800285a:	2228      	movs	r2, #40	; 0x28
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f00b fc26 	bl	800e0b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002864:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	2258      	movs	r2, #88	; 0x58
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f00b fc18 	bl	800e0b0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002880:	2303      	movs	r3, #3
 8002882:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002884:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002888:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800288a:	2301      	movs	r3, #1
 800288c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800288e:	2310      	movs	r3, #16
 8002890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002894:	2302      	movs	r3, #2
 8002896:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800289a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800289e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 fb03 	bl	8005ec0 <HAL_RCC_OscConfig>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80028c0:	f000 f834 	bl	800292c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028c4:	230f      	movs	r3, #15
 80028c6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c8:	2302      	movs	r3, #2
 80028ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028cc:	2300      	movs	r3, #0
 80028ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028da:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028e0:	2102      	movs	r1, #2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f004 fa02 	bl	8006cec <HAL_RCC_ClockConfig>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80028ee:	f000 f81d 	bl	800292c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <SystemClock_Config+0xd8>)
 80028f4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80028fe:	2300      	movs	r3, #0
 8002900:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8002902:	2300      	movs	r3, #0
 8002904:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002906:	2300      	movs	r3, #0
 8002908:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800290a:	2300      	movs	r3, #0
 800290c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	4618      	mov	r0, r3
 8002912:	f004 fc21 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800291c:	f000 f806 	bl	800292c <Error_Handler>
  }
}
 8002920:	bf00      	nop
 8002922:	3798      	adds	r7, #152	; 0x98
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	00303022 	.word	0x00303022

0800292c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <MX_SPI2_Init+0x74>)
 8002942:	4a1c      	ldr	r2, [pc, #112]	; (80029b4 <MX_SPI2_Init+0x78>)
 8002944:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <MX_SPI2_Init+0x74>)
 8002948:	f44f 7282 	mov.w	r2, #260	; 0x104
 800294c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800294e:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <MX_SPI2_Init+0x74>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002954:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <MX_SPI2_Init+0x74>)
 8002956:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800295a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <MX_SPI2_Init+0x74>)
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002962:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <MX_SPI2_Init+0x74>)
 8002964:	2200      	movs	r2, #0
 8002966:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <MX_SPI2_Init+0x74>)
 800296a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800296e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <MX_SPI2_Init+0x74>)
 8002972:	2218      	movs	r2, #24
 8002974:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <MX_SPI2_Init+0x74>)
 8002978:	2200      	movs	r2, #0
 800297a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <MX_SPI2_Init+0x74>)
 800297e:	2200      	movs	r2, #0
 8002980:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <MX_SPI2_Init+0x74>)
 8002984:	2200      	movs	r2, #0
 8002986:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <MX_SPI2_Init+0x74>)
 800298a:	2207      	movs	r2, #7
 800298c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <MX_SPI2_Init+0x74>)
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <MX_SPI2_Init+0x74>)
 8002996:	2208      	movs	r2, #8
 8002998:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800299a:	4805      	ldr	r0, [pc, #20]	; (80029b0 <MX_SPI2_Init+0x74>)
 800299c:	f004 fdfa 	bl	8007594 <HAL_SPI_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80029a6:	f7ff ffc1 	bl	800292c <Error_Handler>
  }

}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200015b0 	.word	0x200015b0
 80029b4:	40003800 	.word	0x40003800

080029b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <HAL_SPI_MspInit+0x7c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d128      	bne.n	8002a2c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <HAL_SPI_MspInit+0x80>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4a16      	ldr	r2, [pc, #88]	; (8002a38 <HAL_SPI_MspInit+0x80>)
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e4:	61d3      	str	r3, [r2, #28]
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <HAL_SPI_MspInit+0x80>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <HAL_SPI_MspInit+0x80>)
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	4a10      	ldr	r2, [pc, #64]	; (8002a38 <HAL_SPI_MspInit+0x80>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6153      	str	r3, [r2, #20]
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <HAL_SPI_MspInit+0x80>)
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a0a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a1c:	2305      	movs	r3, #5
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	4805      	ldr	r0, [pc, #20]	; (8002a3c <HAL_SPI_MspInit+0x84>)
 8002a28:	f002 f922 	bl	8004c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3728      	adds	r7, #40	; 0x28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40003800 	.word	0x40003800
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	48000400 	.word	0x48000400

08002a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_MspInit+0x44>)
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <HAL_MspInit+0x44>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6193      	str	r3, [r2, #24]
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_MspInit+0x44>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_MspInit+0x44>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <HAL_MspInit+0x44>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a68:	61d3      	str	r3, [r2, #28]
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_MspInit+0x44>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a76:	2007      	movs	r0, #7
 8002a78:	f001 fecc 	bl	8004814 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000

08002a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9a:	e7fe      	b.n	8002a9a <HardFault_Handler+0x4>

08002a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <MemManage_Handler+0x4>

08002aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <BusFault_Handler+0x4>

08002aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <UsageFault_Handler+0x4>

08002aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002adc:	f000 fc48 	bl	8003370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <DMA1_Channel1_IRQHandler+0x10>)
 8002aea:	f001 ffb3 	bl	8004a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200004c8 	.word	0x200004c8

08002af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <TIM2_IRQHandler+0x10>)
 8002afe:	f005 fbd1 	bl	80082a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20001718 	.word	0x20001718

08002b0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <TIM3_IRQHandler+0x10>)
 8002b12:	f005 fbc7 	bl	80082a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20001698 	.word	0x20001698

08002b20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <TIM4_IRQHandler+0x10>)
 8002b26:	f005 fbbd 	bl	80082a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20001658 	.word	0x20001658

08002b34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b38:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <SystemInit+0x28>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <SystemInit+0x28>)
 8002b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <SystemInit+0x28>)
 8002b4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b4e:	609a      	str	r2, [r3, #8]
#endif
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b09a      	sub	sp, #104	; 0x68
 8002b64:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
 8002b90:	615a      	str	r2, [r3, #20]
 8002b92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	222c      	movs	r2, #44	; 0x2c
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f00b fa88 	bl	800e0b0 <memset>

  htim1.Instance = TIM1;
 8002ba0:	4b42      	ldr	r3, [pc, #264]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002ba2:	4a43      	ldr	r2, [pc, #268]	; (8002cb0 <MX_TIM1_Init+0x150>)
 8002ba4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3600-1;
 8002ba6:	4b41      	ldr	r3, [pc, #260]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002ba8:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002bac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bae:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 8002bb4:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002bb6:	2231      	movs	r2, #49	; 0x31
 8002bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bba:	4b3c      	ldr	r3, [pc, #240]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bc0:	4b3a      	ldr	r3, [pc, #232]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bc6:	4b39      	ldr	r3, [pc, #228]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002bc8:	2280      	movs	r2, #128	; 0x80
 8002bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bcc:	4837      	ldr	r0, [pc, #220]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002bce:	f005 fa09 	bl	8007fe4 <HAL_TIM_Base_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002bd8:	f7ff fea8 	bl	800292c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002be2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002be6:	4619      	mov	r1, r3
 8002be8:	4830      	ldr	r0, [pc, #192]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002bea:	f005 fd93 	bl	8008714 <HAL_TIM_ConfigClockSource>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002bf4:	f7ff fe9a 	bl	800292c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bf8:	482c      	ldr	r0, [pc, #176]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002bfa:	f005 fa49 	bl	8008090 <HAL_TIM_PWM_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002c04:	f7ff fe92 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4824      	ldr	r0, [pc, #144]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002c1c:	f006 fb8a 	bl	8009334 <HAL_TIMEx_MasterConfigSynchronization>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002c26:	f7ff fe81 	bl	800292c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c2a:	2360      	movs	r3, #96	; 0x60
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 25-1;
 8002c2e:	2318      	movs	r3, #24
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c32:	2300      	movs	r3, #0
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c46:	220c      	movs	r2, #12
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4818      	ldr	r0, [pc, #96]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002c4c:	f005 fc4a 	bl	80084e4 <HAL_TIM_PWM_ConfigChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002c56:	f7ff fe69 	bl	800292c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4807      	ldr	r0, [pc, #28]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002c90:	f006 fbdc 	bl	800944c <HAL_TIMEx_ConfigBreakDeadTime>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8002c9a:	f7ff fe47 	bl	800292c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002c9e:	4803      	ldr	r0, [pc, #12]	; (8002cac <MX_TIM1_Init+0x14c>)
 8002ca0:	f000 fa26 	bl	80030f0 <HAL_TIM_MspPostInit>

}
 8002ca4:	bf00      	nop
 8002ca6:	3768      	adds	r7, #104	; 0x68
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	200016d8 	.word	0x200016d8
 8002cb0:	40012c00 	.word	0x40012c00

08002cb4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002cba:	f107 030c 	add.w	r3, r7, #12
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	60da      	str	r2, [r3, #12]
 8002cc8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cca:	463b      	mov	r3, r7
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <MX_TIM2_Init+0x98>)
 8002cd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <MX_TIM2_Init+0x98>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <MX_TIM2_Init+0x98>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8002ce8:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <MX_TIM2_Init+0x98>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cee:	4b17      	ldr	r3, [pc, #92]	; (8002d4c <MX_TIM2_Init+0x98>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf4:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <MX_TIM2_Init+0x98>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cfa:	4814      	ldr	r0, [pc, #80]	; (8002d4c <MX_TIM2_Init+0x98>)
 8002cfc:	f005 f972 	bl	8007fe4 <HAL_TIM_Base_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002d06:	f7ff fe11 	bl	800292c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002d0a:	2307      	movs	r3, #7
 8002d0c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002d12:	f107 030c 	add.w	r3, r7, #12
 8002d16:	4619      	mov	r1, r3
 8002d18:	480c      	ldr	r0, [pc, #48]	; (8002d4c <MX_TIM2_Init+0x98>)
 8002d1a:	f005 fdb4 	bl	8008886 <HAL_TIM_SlaveConfigSynchro>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002d24:	f7ff fe02 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d30:	463b      	mov	r3, r7
 8002d32:	4619      	mov	r1, r3
 8002d34:	4805      	ldr	r0, [pc, #20]	; (8002d4c <MX_TIM2_Init+0x98>)
 8002d36:	f006 fafd 	bl	8009334 <HAL_TIMEx_MasterConfigSynchronization>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002d40:	f7ff fdf4 	bl	800292c <Error_Handler>
  }

}
 8002d44:	bf00      	nop
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20001718 	.word	0x20001718

08002d50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d56:	f107 0310 	add.w	r3, r7, #16
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <MX_TIM3_Init+0x98>)
 8002d70:	4a1e      	ldr	r2, [pc, #120]	; (8002dec <MX_TIM3_Init+0x9c>)
 8002d72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <MX_TIM3_Init+0x98>)
 8002d76:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002d7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <MX_TIM3_Init+0x98>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002d82:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <MX_TIM3_Init+0x98>)
 8002d84:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002d88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <MX_TIM3_Init+0x98>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <MX_TIM3_Init+0x98>)
 8002d92:	2280      	movs	r2, #128	; 0x80
 8002d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d96:	4814      	ldr	r0, [pc, #80]	; (8002de8 <MX_TIM3_Init+0x98>)
 8002d98:	f005 f924 	bl	8007fe4 <HAL_TIM_Base_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002da2:	f7ff fdc3 	bl	800292c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002daa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002dac:	f107 0310 	add.w	r3, r7, #16
 8002db0:	4619      	mov	r1, r3
 8002db2:	480d      	ldr	r0, [pc, #52]	; (8002de8 <MX_TIM3_Init+0x98>)
 8002db4:	f005 fcae 	bl	8008714 <HAL_TIM_ConfigClockSource>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002dbe:	f7ff fdb5 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dca:	1d3b      	adds	r3, r7, #4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4806      	ldr	r0, [pc, #24]	; (8002de8 <MX_TIM3_Init+0x98>)
 8002dd0:	f006 fab0 	bl	8009334 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002dda:	f7ff fda7 	bl	800292c <Error_Handler>
  }

}
 8002dde:	bf00      	nop
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20001698 	.word	0x20001698
 8002dec:	40000400 	.word	0x40000400

08002df0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002df6:	f107 030c 	add.w	r3, r7, #12
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	609a      	str	r2, [r3, #8]
 8002e02:	60da      	str	r2, [r3, #12]
 8002e04:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e06:	463b      	mov	r3, r7
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <MX_TIM4_Init+0x98>)
 8002e12:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <MX_TIM4_Init+0x9c>)
 8002e14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002e16:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <MX_TIM4_Init+0x98>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <MX_TIM4_Init+0x98>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8002e22:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <MX_TIM4_Init+0x98>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <MX_TIM4_Init+0x98>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e2e:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <MX_TIM4_Init+0x98>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e34:	4814      	ldr	r0, [pc, #80]	; (8002e88 <MX_TIM4_Init+0x98>)
 8002e36:	f005 f8d5 	bl	8007fe4 <HAL_TIM_Base_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002e40:	f7ff fd74 	bl	800292c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002e44:	2307      	movs	r3, #7
 8002e46:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8002e48:	2330      	movs	r3, #48	; 0x30
 8002e4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	4619      	mov	r1, r3
 8002e52:	480d      	ldr	r0, [pc, #52]	; (8002e88 <MX_TIM4_Init+0x98>)
 8002e54:	f005 fd17 	bl	8008886 <HAL_TIM_SlaveConfigSynchro>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002e5e:	f7ff fd65 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e6a:	463b      	mov	r3, r7
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4806      	ldr	r0, [pc, #24]	; (8002e88 <MX_TIM4_Init+0x98>)
 8002e70:	f006 fa60 	bl	8009334 <HAL_TIMEx_MasterConfigSynchronization>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002e7a:	f7ff fd57 	bl	800292c <Error_Handler>
  }

}
 8002e7e:	bf00      	nop
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20001658 	.word	0x20001658
 8002e8c:	40000800 	.word	0x40000800

08002e90 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b09a      	sub	sp, #104	; 0x68
 8002e94:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
 8002ec0:	615a      	str	r2, [r3, #20]
 8002ec2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	222c      	movs	r2, #44	; 0x2c
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f00b f8f0 	bl	800e0b0 <memset>

  htim8.Instance = TIM8;
 8002ed0:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002ed2:	4a44      	ldr	r2, [pc, #272]	; (8002fe4 <MX_TIM8_Init+0x154>)
 8002ed4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 360-1;
 8002ed6:	4b42      	ldr	r3, [pc, #264]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002ed8:	f240 1267 	movw	r2, #359	; 0x167
 8002edc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ede:	4b40      	ldr	r3, [pc, #256]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20-1;
 8002ee4:	4b3e      	ldr	r3, [pc, #248]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002ee6:	2213      	movs	r2, #19
 8002ee8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002eea:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ef8:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002efa:	2280      	movs	r2, #128	; 0x80
 8002efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002efe:	4838      	ldr	r0, [pc, #224]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002f00:	f005 f870 	bl	8007fe4 <HAL_TIM_Base_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8002f0a:	f7ff fd0f 	bl	800292c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f12:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002f14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4831      	ldr	r0, [pc, #196]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002f1c:	f005 fbfa 	bl	8008714 <HAL_TIM_ConfigClockSource>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8002f26:	f7ff fd01 	bl	800292c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002f2a:	482d      	ldr	r0, [pc, #180]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002f2c:	f005 f8b0 	bl	8008090 <HAL_TIM_PWM_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8002f36:	f7ff fcf9 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4824      	ldr	r0, [pc, #144]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002f4e:	f006 f9f1 	bl	8009334 <HAL_TIMEx_MasterConfigSynchronization>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8002f58:	f7ff fce8 	bl	800292c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f5c:	2360      	movs	r3, #96	; 0x60
 8002f5e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 10-1;
 8002f60:	2309      	movs	r3, #9
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f64:	2300      	movs	r3, #0
 8002f66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f70:	2300      	movs	r3, #0
 8002f72:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f78:	220c      	movs	r2, #12
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4818      	ldr	r0, [pc, #96]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002f7e:	f005 fab1 	bl	80084e4 <HAL_TIM_PWM_ConfigChannel>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8002f88:	f7ff fcd0 	bl	800292c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fa4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4807      	ldr	r0, [pc, #28]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002fc2:	f006 fa43 	bl	800944c <HAL_TIMEx_ConfigBreakDeadTime>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002fcc:	f7ff fcae 	bl	800292c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002fd0:	4803      	ldr	r0, [pc, #12]	; (8002fe0 <MX_TIM8_Init+0x150>)
 8002fd2:	f000 f88d 	bl	80030f0 <HAL_TIM_MspPostInit>

}
 8002fd6:	bf00      	nop
 8002fd8:	3768      	adds	r7, #104	; 0x68
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20001618 	.word	0x20001618
 8002fe4:	40013400 	.word	0x40013400

08002fe8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a39      	ldr	r2, [pc, #228]	; (80030dc <HAL_TIM_Base_MspInit+0xf4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d10c      	bne.n	8003014 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ffa:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	4a38      	ldr	r2, [pc, #224]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 8003000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003004:	6193      	str	r3, [r2, #24]
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003012:	e05e      	b.n	80030d2 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d114      	bne.n	8003048 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800301e:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4a2f      	ldr	r2, [pc, #188]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	61d3      	str	r3, [r2, #28]
 800302a:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	201c      	movs	r0, #28
 800303c:	f001 fbf5 	bl	800482a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003040:	201c      	movs	r0, #28
 8003042:	f001 fc0e 	bl	8004862 <HAL_NVIC_EnableIRQ>
}
 8003046:	e044      	b.n	80030d2 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM3)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a25      	ldr	r2, [pc, #148]	; (80030e4 <HAL_TIM_Base_MspInit+0xfc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d114      	bne.n	800307c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003052:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	61d3      	str	r3, [r2, #28]
 800305e:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	201d      	movs	r0, #29
 8003070:	f001 fbdb 	bl	800482a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003074:	201d      	movs	r0, #29
 8003076:	f001 fbf4 	bl	8004862 <HAL_NVIC_EnableIRQ>
}
 800307a:	e02a      	b.n	80030d2 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM4)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <HAL_TIM_Base_MspInit+0x100>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d114      	bne.n	80030b0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003086:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	61d3      	str	r3, [r2, #28]
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2100      	movs	r1, #0
 80030a2:	201e      	movs	r0, #30
 80030a4:	f001 fbc1 	bl	800482a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030a8:	201e      	movs	r0, #30
 80030aa:	f001 fbda 	bl	8004862 <HAL_NVIC_EnableIRQ>
}
 80030ae:	e010      	b.n	80030d2 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM8)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <HAL_TIM_Base_MspInit+0x104>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d10b      	bne.n	80030d2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 80030c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030c4:	6193      	str	r3, [r2, #24]
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
}
 80030d2:	bf00      	nop
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40012c00 	.word	0x40012c00
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800
 80030ec:	40013400 	.word	0x40013400

080030f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a23      	ldr	r2, [pc, #140]	; (800319c <HAL_TIM_MspPostInit+0xac>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d11e      	bne.n	8003150 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	4b23      	ldr	r3, [pc, #140]	; (80031a0 <HAL_TIM_MspPostInit+0xb0>)
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <HAL_TIM_MspPostInit+0xb0>)
 8003118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311c:	6153      	str	r3, [r2, #20]
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_TIM_MspPostInit+0xb0>)
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = STEP1_Pin;
 800312a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800312e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003138:	2300      	movs	r3, #0
 800313a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 800313c:	230b      	movs	r3, #11
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	4619      	mov	r1, r3
 8003146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800314a:	f001 fd91 	bl	8004c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800314e:	e021      	b.n	8003194 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM8)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_TIM_MspPostInit+0xb4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d11c      	bne.n	8003194 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_TIM_MspPostInit+0xb0>)
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	4a10      	ldr	r2, [pc, #64]	; (80031a0 <HAL_TIM_MspPostInit+0xb0>)
 8003160:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003164:	6153      	str	r3, [r2, #20]
 8003166:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <HAL_TIM_MspPostInit+0xb0>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8003172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	2300      	movs	r3, #0
 8003182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003184:	2304      	movs	r3, #4
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	4619      	mov	r1, r3
 800318e:	4806      	ldr	r0, [pc, #24]	; (80031a8 <HAL_TIM_MspPostInit+0xb8>)
 8003190:	f001 fd6e 	bl	8004c70 <HAL_GPIO_Init>
}
 8003194:	bf00      	nop
 8003196:	3728      	adds	r7, #40	; 0x28
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40013400 	.word	0x40013400
 80031a8:	48000800 	.word	0x48000800

080031ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <MX_USART2_UART_Init+0x58>)
 80031b2:	4a15      	ldr	r2, [pc, #84]	; (8003208 <MX_USART2_UART_Init+0x5c>)
 80031b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <MX_USART2_UART_Init+0x58>)
 80031b8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80031bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <MX_USART2_UART_Init+0x58>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <MX_USART2_UART_Init+0x58>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <MX_USART2_UART_Init+0x58>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <MX_USART2_UART_Init+0x58>)
 80031d2:	220c      	movs	r2, #12
 80031d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d6:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <MX_USART2_UART_Init+0x58>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <MX_USART2_UART_Init+0x58>)
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <MX_USART2_UART_Init+0x58>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <MX_USART2_UART_Init+0x58>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031ee:	4805      	ldr	r0, [pc, #20]	; (8003204 <MX_USART2_UART_Init+0x58>)
 80031f0:	f006 f9d0 	bl	8009594 <HAL_UART_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80031fa:	f7ff fb97 	bl	800292c <Error_Handler>
  }

}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20001758 	.word	0x20001758
 8003208:	40004400 	.word	0x40004400

0800320c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a17      	ldr	r2, [pc, #92]	; (8003288 <HAL_UART_MspInit+0x7c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d128      	bne.n	8003280 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800322e:	4b17      	ldr	r3, [pc, #92]	; (800328c <HAL_UART_MspInit+0x80>)
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	4a16      	ldr	r2, [pc, #88]	; (800328c <HAL_UART_MspInit+0x80>)
 8003234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003238:	61d3      	str	r3, [r2, #28]
 800323a:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_UART_MspInit+0x80>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_UART_MspInit+0x80>)
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	4a10      	ldr	r2, [pc, #64]	; (800328c <HAL_UART_MspInit+0x80>)
 800324c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003250:	6153      	str	r3, [r2, #20]
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_UART_MspInit+0x80>)
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800325e:	230c      	movs	r3, #12
 8003260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800326e:	2307      	movs	r3, #7
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	4619      	mov	r1, r3
 8003278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800327c:	f001 fcf8 	bl	8004c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003280:	bf00      	nop
 8003282:	3728      	adds	r7, #40	; 0x28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40004400 	.word	0x40004400
 800328c:	40021000 	.word	0x40021000

08003290 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003294:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003296:	e003      	b.n	80032a0 <LoopCopyDataInit>

08003298 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800329a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800329c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800329e:	3104      	adds	r1, #4

080032a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80032a0:	480b      	ldr	r0, [pc, #44]	; (80032d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80032a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80032a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80032a8:	d3f6      	bcc.n	8003298 <CopyDataInit>
	ldr	r2, =_sbss
 80032aa:	4a0b      	ldr	r2, [pc, #44]	; (80032d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80032ac:	e002      	b.n	80032b4 <LoopFillZerobss>

080032ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80032ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80032b0:	f842 3b04 	str.w	r3, [r2], #4

080032b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <LoopForever+0x16>)
	cmp	r2, r3
 80032b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80032b8:	d3f9      	bcc.n	80032ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032ba:	f7ff fc3b 	bl	8002b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032be:	f00a fed3 	bl	800e068 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032c2:	f7ff fa31 	bl	8002728 <main>

080032c6 <LoopForever>:

LoopForever:
    b LoopForever
 80032c6:	e7fe      	b.n	80032c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032c8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80032cc:	08010a50 	.word	0x08010a50
	ldr	r0, =_sdata
 80032d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80032d4:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 80032d8:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 80032dc:	20003844 	.word	0x20003844

080032e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032e0:	e7fe      	b.n	80032e0 <ADC1_2_IRQHandler>
	...

080032e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <HAL_Init+0x28>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a07      	ldr	r2, [pc, #28]	; (800330c <HAL_Init+0x28>)
 80032ee:	f043 0310 	orr.w	r3, r3, #16
 80032f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f4:	2003      	movs	r0, #3
 80032f6:	f001 fa8d 	bl	8004814 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032fa:	2000      	movs	r0, #0
 80032fc:	f000 f808 	bl	8003310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003300:	f7ff fb9e 	bl	8002a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40022000 	.word	0x40022000

08003310 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_InitTick+0x54>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_InitTick+0x58>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	4619      	mov	r1, r3
 8003322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003326:	fbb3 f3f1 	udiv	r3, r3, r1
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
 800332e:	4618      	mov	r0, r3
 8003330:	f001 faa5 	bl	800487e <HAL_SYSTICK_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e00e      	b.n	800335c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b0f      	cmp	r3, #15
 8003342:	d80a      	bhi.n	800335a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003344:	2200      	movs	r2, #0
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f001 fa6d 	bl	800482a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003350:	4a06      	ldr	r2, [pc, #24]	; (800336c <HAL_InitTick+0x5c>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000004 	.word	0x20000004
 8003368:	2000000c 	.word	0x2000000c
 800336c:	20000008 	.word	0x20000008

08003370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_IncTick+0x20>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_IncTick+0x24>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4413      	add	r3, r2
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <HAL_IncTick+0x24>)
 8003382:	6013      	str	r3, [r2, #0]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	2000000c 	.word	0x2000000c
 8003394:	200017d8 	.word	0x200017d8

08003398 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return uwTick;  
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <HAL_GetTick+0x14>)
 800339e:	681b      	ldr	r3, [r3, #0]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	200017d8 	.word	0x200017d8

080033b0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff ffee 	bl	8003398 <HAL_GetTick>
 80033bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d005      	beq.n	80033d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <HAL_Delay+0x40>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80033d6:	bf00      	nop
 80033d8:	f7ff ffde 	bl	8003398 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d8f7      	bhi.n	80033d8 <HAL_Delay+0x28>
  {
  }
}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	2000000c 	.word	0x2000000c

080033f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b09a      	sub	sp, #104	; 0x68
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e1e3      	b.n	8003818 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b00      	cmp	r3, #0
 8003460:	d176      	bne.n	8003550 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d152      	bne.n	8003510 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7fd fd77 	bl	8000f78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d13b      	bne.n	8003510 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 ffdd 	bl	8004458 <ADC_Disable>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d12f      	bne.n	8003510 <HAL_ADC_Init+0xe0>
 80034b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d12b      	bne.n	8003510 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034c0:	f023 0302 	bic.w	r3, r3, #2
 80034c4:	f043 0202 	orr.w	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034da:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034ea:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034ec:	4b92      	ldr	r3, [pc, #584]	; (8003738 <HAL_ADC_Init+0x308>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a92      	ldr	r2, [pc, #584]	; (800373c <HAL_ADC_Init+0x30c>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	0c9a      	lsrs	r2, r3, #18
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003502:	e002      	b.n	800350a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	3b01      	subs	r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f9      	bne.n	8003504 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800352c:	d110      	bne.n	8003550 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f023 0312 	bic.w	r3, r3, #18
 8003536:	f043 0210 	orr.w	r2, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f043 0201 	orr.w	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	f040 8150 	bne.w	80037fe <HAL_ADC_Init+0x3ce>
 800355e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 814b 	bne.w	80037fe <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 8143 	bne.w	80037fe <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003580:	f043 0202 	orr.w	r2, r3, #2
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003590:	d004      	beq.n	800359c <HAL_ADC_Init+0x16c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6a      	ldr	r2, [pc, #424]	; (8003740 <HAL_ADC_Init+0x310>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_ADC_Init+0x170>
 800359c:	4b69      	ldr	r3, [pc, #420]	; (8003744 <HAL_ADC_Init+0x314>)
 800359e:	e000      	b.n	80035a2 <HAL_ADC_Init+0x172>
 80035a0:	4b69      	ldr	r3, [pc, #420]	; (8003748 <HAL_ADC_Init+0x318>)
 80035a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ac:	d102      	bne.n	80035b4 <HAL_ADC_Init+0x184>
 80035ae:	4b64      	ldr	r3, [pc, #400]	; (8003740 <HAL_ADC_Init+0x310>)
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	e01a      	b.n	80035ea <HAL_ADC_Init+0x1ba>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a61      	ldr	r2, [pc, #388]	; (8003740 <HAL_ADC_Init+0x310>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d103      	bne.n	80035c6 <HAL_ADC_Init+0x196>
 80035be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e011      	b.n	80035ea <HAL_ADC_Init+0x1ba>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a60      	ldr	r2, [pc, #384]	; (800374c <HAL_ADC_Init+0x31c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d102      	bne.n	80035d6 <HAL_ADC_Init+0x1a6>
 80035d0:	4b5f      	ldr	r3, [pc, #380]	; (8003750 <HAL_ADC_Init+0x320>)
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e009      	b.n	80035ea <HAL_ADC_Init+0x1ba>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a5d      	ldr	r2, [pc, #372]	; (8003750 <HAL_ADC_Init+0x320>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d102      	bne.n	80035e6 <HAL_ADC_Init+0x1b6>
 80035e0:	4b5a      	ldr	r3, [pc, #360]	; (800374c <HAL_ADC_Init+0x31c>)
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e001      	b.n	80035ea <HAL_ADC_Init+0x1ba>
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d108      	bne.n	800360a <HAL_ADC_Init+0x1da>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_ADC_Init+0x1da>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_ADC_Init+0x1dc>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11c      	bne.n	800364a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003610:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003612:	2b00      	cmp	r3, #0
 8003614:	d010      	beq.n	8003638 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_ADC_Init+0x202>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_ADC_Init+0x202>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_ADC_Init+0x204>
 8003632:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003634:	2b00      	cmp	r3, #0
 8003636:	d108      	bne.n	800364a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	431a      	orrs	r2, r3
 8003646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003648:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	7e5b      	ldrb	r3, [r3, #25]
 800364e:	035b      	lsls	r3, r3, #13
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003654:	2a01      	cmp	r2, #1
 8003656:	d002      	beq.n	800365e <HAL_ADC_Init+0x22e>
 8003658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800365c:	e000      	b.n	8003660 <HAL_ADC_Init+0x230>
 800365e:	2200      	movs	r2, #0
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4313      	orrs	r3, r2
 800366e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003670:	4313      	orrs	r3, r2
 8003672:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d11b      	bne.n	80036b6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	7e5b      	ldrb	r3, [r3, #25]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	3b01      	subs	r3, #1
 800368c:	045a      	lsls	r2, r3, #17
 800368e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003690:	4313      	orrs	r3, r2
 8003692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003696:	663b      	str	r3, [r7, #96]	; 0x60
 8003698:	e00d      	b.n	80036b6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80036a2:	f043 0220 	orr.w	r2, r3, #32
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	f043 0201 	orr.w	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d054      	beq.n	8003768 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a22      	ldr	r2, [pc, #136]	; (800374c <HAL_ADC_Init+0x31c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_ADC_Init+0x2a2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a20      	ldr	r2, [pc, #128]	; (8003750 <HAL_ADC_Init+0x320>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d140      	bne.n	8003754 <HAL_ADC_Init+0x324>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80036da:	d02a      	beq.n	8003732 <HAL_ADC_Init+0x302>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e4:	d022      	beq.n	800372c <HAL_ADC_Init+0x2fc>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80036ee:	d01a      	beq.n	8003726 <HAL_ADC_Init+0x2f6>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80036f8:	d012      	beq.n	8003720 <HAL_ADC_Init+0x2f0>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8003702:	d00a      	beq.n	800371a <HAL_ADC_Init+0x2ea>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 800370c:	d002      	beq.n	8003714 <HAL_ADC_Init+0x2e4>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	e023      	b.n	800375c <HAL_ADC_Init+0x32c>
 8003714:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003718:	e020      	b.n	800375c <HAL_ADC_Init+0x32c>
 800371a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800371e:	e01d      	b.n	800375c <HAL_ADC_Init+0x32c>
 8003720:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003724:	e01a      	b.n	800375c <HAL_ADC_Init+0x32c>
 8003726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800372a:	e017      	b.n	800375c <HAL_ADC_Init+0x32c>
 800372c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003730:	e014      	b.n	800375c <HAL_ADC_Init+0x32c>
 8003732:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003736:	e011      	b.n	800375c <HAL_ADC_Init+0x32c>
 8003738:	20000004 	.word	0x20000004
 800373c:	431bde83 	.word	0x431bde83
 8003740:	50000100 	.word	0x50000100
 8003744:	50000300 	.word	0x50000300
 8003748:	50000700 	.word	0x50000700
 800374c:	50000400 	.word	0x50000400
 8003750:	50000500 	.word	0x50000500
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003760:	4313      	orrs	r3, r2
 8003762:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003764:	4313      	orrs	r3, r2
 8003766:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b00      	cmp	r3, #0
 8003774:	d114      	bne.n	80037a0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003784:	f023 0302 	bic.w	r3, r3, #2
 8003788:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	7e1b      	ldrb	r3, [r3, #24]
 800378e:	039a      	lsls	r2, r3, #14
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4313      	orrs	r3, r2
 800379a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800379c:	4313      	orrs	r3, r2
 800379e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_ADC_Init+0x3f0>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80037b0:	430b      	orrs	r3, r1
 80037b2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d10c      	bne.n	80037d6 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f023 010f 	bic.w	r1, r3, #15
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	1e5a      	subs	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
 80037d4:	e007      	b.n	80037e6 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 020f 	bic.w	r2, r2, #15
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	f023 0303 	bic.w	r3, r3, #3
 80037f4:	f043 0201 	orr.w	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40
 80037fc:	e00a      	b.n	8003814 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f023 0312 	bic.w	r3, r3, #18
 8003806:	f043 0210 	orr.w	r2, r3, #16
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003814:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003818:	4618      	mov	r0, r3
 800381a:	3768      	adds	r7, #104	; 0x68
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	fff0c007 	.word	0xfff0c007

08003824 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	f040 80f7 	bne.w	8003a32 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_ADC_Start_DMA+0x2e>
 800384e:	2302      	movs	r3, #2
 8003850:	e0f2      	b.n	8003a38 <HAL_ADC_Start_DMA+0x214>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003862:	d004      	beq.n	800386e <HAL_ADC_Start_DMA+0x4a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a75      	ldr	r2, [pc, #468]	; (8003a40 <HAL_ADC_Start_DMA+0x21c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d109      	bne.n	8003882 <HAL_ADC_Start_DMA+0x5e>
 800386e:	4b75      	ldr	r3, [pc, #468]	; (8003a44 <HAL_ADC_Start_DMA+0x220>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf0c      	ite	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	2300      	movne	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	e008      	b.n	8003894 <HAL_ADC_Start_DMA+0x70>
 8003882:	4b71      	ldr	r3, [pc, #452]	; (8003a48 <HAL_ADC_Start_DMA+0x224>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf0c      	ite	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	2300      	movne	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80c5 	beq.w	8003a24 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fd7e 	bl	800439c <ADC_Enable>
 80038a0:	4603      	mov	r3, r0
 80038a2:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f040 80b7 	bne.w	8003a1a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038c8:	d004      	beq.n	80038d4 <HAL_ADC_Start_DMA+0xb0>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5c      	ldr	r2, [pc, #368]	; (8003a40 <HAL_ADC_Start_DMA+0x21c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d106      	bne.n	80038e2 <HAL_ADC_Start_DMA+0xbe>
 80038d4:	4b5b      	ldr	r3, [pc, #364]	; (8003a44 <HAL_ADC_Start_DMA+0x220>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d010      	beq.n	8003902 <HAL_ADC_Start_DMA+0xde>
 80038e0:	e005      	b.n	80038ee <HAL_ADC_Start_DMA+0xca>
 80038e2:	4b59      	ldr	r3, [pc, #356]	; (8003a48 <HAL_ADC_Start_DMA+0x224>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_ADC_Start_DMA+0xde>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038f6:	d004      	beq.n	8003902 <HAL_ADC_Start_DMA+0xde>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a53      	ldr	r2, [pc, #332]	; (8003a4c <HAL_ADC_Start_DMA+0x228>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d115      	bne.n	800392e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d036      	beq.n	800398a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003924:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800392c:	e02d      	b.n	800398a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003942:	d004      	beq.n	800394e <HAL_ADC_Start_DMA+0x12a>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a3d      	ldr	r2, [pc, #244]	; (8003a40 <HAL_ADC_Start_DMA+0x21c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d10a      	bne.n	8003964 <HAL_ADC_Start_DMA+0x140>
 800394e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e008      	b.n	8003976 <HAL_ADC_Start_DMA+0x152>
 8003964:	4b39      	ldr	r3, [pc, #228]	; (8003a4c <HAL_ADC_Start_DMA+0x228>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003982:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003996:	d106      	bne.n	80039a6 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	f023 0206 	bic.w	r2, r3, #6
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	645a      	str	r2, [r3, #68]	; 0x44
 80039a4:	e002      	b.n	80039ac <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	4a25      	ldr	r2, [pc, #148]	; (8003a50 <HAL_ADC_Start_DMA+0x22c>)
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	4a24      	ldr	r2, [pc, #144]	; (8003a54 <HAL_ADC_Start_DMA+0x230>)
 80039c2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	4a23      	ldr	r2, [pc, #140]	; (8003a58 <HAL_ADC_Start_DMA+0x234>)
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	221c      	movs	r2, #28
 80039d2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0210 	orr.w	r2, r2, #16
 80039e2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3340      	adds	r3, #64	; 0x40
 80039fe:	4619      	mov	r1, r3
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f000 ff8e 	bl	8004924 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0204 	orr.w	r2, r2, #4
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	e00d      	b.n	8003a36 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a22:	e008      	b.n	8003a36 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a30:	e001      	b.n	8003a36 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
 8003a34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	50000100 	.word	0x50000100
 8003a44:	50000300 	.word	0x50000300
 8003a48:	50000700 	.word	0x50000700
 8003a4c:	50000400 	.word	0x50000400
 8003a50:	080042d1 	.word	0x080042d1
 8003a54:	0800434b 	.word	0x0800434b
 8003a58:	08004367 	.word	0x08004367

08003a5c <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_ADC_Stop_DMA+0x1a>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e04a      	b.n	8003b0c <HAL_ADC_Stop_DMA+0xb0>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003a7e:	216c      	movs	r1, #108	; 0x6c
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fd49 	bl	8004518 <ADC_ConversionStop>
 8003a86:	4603      	mov	r3, r0
 8003a88:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d138      	bne.n	8003b02 <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 ff9c 	bl	80049e2 <HAL_DMA_Abort>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0210 	bic.w	r2, r2, #16
 8003ace:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fcbe 	bl	8004458 <ADC_Disable>
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]
 8003ae0:	e002      	b.n	8003ae8 <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fcb8 	bl	8004458 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	f043 0201 	orr.w	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b09b      	sub	sp, #108	; 0x6c
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x22>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e2cb      	b.n	80040ce <HAL_ADC_ConfigChannel+0x5ba>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 82af 	bne.w	80040ac <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d81c      	bhi.n	8003b90 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	4413      	add	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	461a      	mov	r2, r3
 8003b6a:	231f      	movs	r3, #31
 8003b6c:	4093      	lsls	r3, r2
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	4019      	ands	r1, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	fa00 f203 	lsl.w	r2, r0, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b8e:	e063      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b09      	cmp	r3, #9
 8003b96:	d81e      	bhi.n	8003bd6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	3b1e      	subs	r3, #30
 8003bac:	221f      	movs	r2, #31
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	4019      	ands	r1, r3
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	3b1e      	subs	r3, #30
 8003bc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	635a      	str	r2, [r3, #52]	; 0x34
 8003bd4:	e040      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b0e      	cmp	r3, #14
 8003bdc:	d81e      	bhi.n	8003c1c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	3b3c      	subs	r3, #60	; 0x3c
 8003bf2:	221f      	movs	r2, #31
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	4019      	ands	r1, r3
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4413      	add	r3, r2
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	3b3c      	subs	r3, #60	; 0x3c
 8003c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	639a      	str	r2, [r3, #56]	; 0x38
 8003c1a:	e01d      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	3b5a      	subs	r3, #90	; 0x5a
 8003c30:	221f      	movs	r2, #31
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	4019      	ands	r1, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	3b5a      	subs	r3, #90	; 0x5a
 8003c4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 80e5 	bne.w	8003e32 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b09      	cmp	r3, #9
 8003c6e:	d91c      	bls.n	8003caa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6999      	ldr	r1, [r3, #24]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4413      	add	r3, r2
 8003c80:	3b1e      	subs	r3, #30
 8003c82:	2207      	movs	r2, #7
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	4019      	ands	r1, r3
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	6898      	ldr	r0, [r3, #8]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4613      	mov	r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	4413      	add	r3, r2
 8003c9a:	3b1e      	subs	r3, #30
 8003c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	619a      	str	r2, [r3, #24]
 8003ca8:	e019      	b.n	8003cde <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6959      	ldr	r1, [r3, #20]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	4413      	add	r3, r2
 8003cba:	2207      	movs	r2, #7
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	4019      	ands	r1, r3
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	6898      	ldr	r0, [r3, #8]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4413      	add	r3, r2
 8003cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	08db      	lsrs	r3, r3, #3
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d84f      	bhi.n	8003da0 <HAL_ADC_ConfigChannel+0x28c>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <HAL_ADC_ConfigChannel+0x1f4>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d19 	.word	0x08003d19
 8003d0c:	08003d3b 	.word	0x08003d3b
 8003d10:	08003d5d 	.word	0x08003d5d
 8003d14:	08003d7f 	.word	0x08003d7f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d1e:	4b9f      	ldr	r3, [pc, #636]	; (8003f9c <HAL_ADC_ConfigChannel+0x488>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	0691      	lsls	r1, r2, #26
 8003d28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d36:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003d38:	e07e      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d40:	4b96      	ldr	r3, [pc, #600]	; (8003f9c <HAL_ADC_ConfigChannel+0x488>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	0691      	lsls	r1, r2, #26
 8003d4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d58:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003d5a:	e06d      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d62:	4b8e      	ldr	r3, [pc, #568]	; (8003f9c <HAL_ADC_ConfigChannel+0x488>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	0691      	lsls	r1, r2, #26
 8003d6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d7a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003d7c:	e05c      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d84:	4b85      	ldr	r3, [pc, #532]	; (8003f9c <HAL_ADC_ConfigChannel+0x488>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	0691      	lsls	r1, r2, #26
 8003d8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d90:	430a      	orrs	r2, r1
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d9c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003d9e:	e04b      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	069b      	lsls	r3, r3, #26
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d107      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003dc2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	069b      	lsls	r3, r3, #26
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d107      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003de6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	069b      	lsls	r3, r3, #26
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d107      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e0a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	069b      	lsls	r3, r3, #26
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d10a      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e2e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003e30:	e001      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003e32:	bf00      	nop
 8003e34:	e000      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003e36:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d108      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x344>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x344>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x346>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 8131 	bne.w	80040c2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d00f      	beq.n	8003e88 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2201      	movs	r2, #1
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	400a      	ands	r2, r1
 8003e82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003e86:	e049      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2201      	movs	r2, #1
 8003e96:	409a      	lsls	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b09      	cmp	r3, #9
 8003ea8:	d91c      	bls.n	8003ee4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6999      	ldr	r1, [r3, #24]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	3b1b      	subs	r3, #27
 8003ebc:	2207      	movs	r2, #7
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	4019      	ands	r1, r3
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6898      	ldr	r0, [r3, #8]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3b1b      	subs	r3, #27
 8003ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	619a      	str	r2, [r3, #24]
 8003ee2:	e01b      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6959      	ldr	r1, [r3, #20]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	2207      	movs	r2, #7
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	4019      	ands	r1, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	6898      	ldr	r0, [r3, #8]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4413      	add	r3, r2
 8003f10:	fa00 f203 	lsl.w	r2, r0, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f24:	d004      	beq.n	8003f30 <HAL_ADC_ConfigChannel+0x41c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <HAL_ADC_ConfigChannel+0x48c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x420>
 8003f30:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <HAL_ADC_ConfigChannel+0x490>)
 8003f32:	e000      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x422>
 8003f34:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <HAL_ADC_ConfigChannel+0x494>)
 8003f36:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d105      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d015      	beq.n	8003f78 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003f50:	2b11      	cmp	r3, #17
 8003f52:	d105      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00b      	beq.n	8003f78 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003f64:	2b12      	cmp	r3, #18
 8003f66:	f040 80ac 	bne.w	80040c2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 80a5 	bne.w	80040c2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f80:	d102      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x474>
 8003f82:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <HAL_ADC_ConfigChannel+0x48c>)
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	e023      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x4bc>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <HAL_ADC_ConfigChannel+0x48c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d10c      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x498>
 8003f92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e01a      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x4bc>
 8003f9a:	bf00      	nop
 8003f9c:	83fff000 	.word	0x83fff000
 8003fa0:	50000100 	.word	0x50000100
 8003fa4:	50000300 	.word	0x50000300
 8003fa8:	50000700 	.word	0x50000700
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a4a      	ldr	r2, [pc, #296]	; (80040dc <HAL_ADC_ConfigChannel+0x5c8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d102      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x4a8>
 8003fb6:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <HAL_ADC_ConfigChannel+0x5cc>)
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	e009      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x4bc>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a47      	ldr	r2, [pc, #284]	; (80040e0 <HAL_ADC_ConfigChannel+0x5cc>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d102      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x4b8>
 8003fc6:	4b45      	ldr	r3, [pc, #276]	; (80040dc <HAL_ADC_ConfigChannel+0x5c8>)
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	e001      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x4bc>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d108      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x4dc>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x4dc>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x4de>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d150      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003ff6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d010      	beq.n	800401e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d107      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x504>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x504>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_ADC_ConfigChannel+0x506>
 8004018:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800401a:	2b00      	cmp	r3, #0
 800401c:	d13c      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b10      	cmp	r3, #16
 8004024:	d11d      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x54e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800402e:	d118      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800403a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800403c:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <HAL_ADC_ConfigChannel+0x5d0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a29      	ldr	r2, [pc, #164]	; (80040e8 <HAL_ADC_ConfigChannel+0x5d4>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	0c9a      	lsrs	r2, r3, #18
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004052:	e002      	b.n	800405a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	3b01      	subs	r3, #1
 8004058:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f9      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004060:	e02e      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b11      	cmp	r3, #17
 8004068:	d10b      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x56e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004072:	d106      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800407c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004080:	e01e      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b12      	cmp	r3, #18
 8004088:	d11a      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800408a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004094:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004096:	e013      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80040aa:	e00a      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	f043 0220 	orr.w	r2, r3, #32
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80040be:	e000      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80040c0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80040ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	376c      	adds	r7, #108	; 0x6c
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	50000400 	.word	0x50000400
 80040e0:	50000500 	.word	0x50000500
 80040e4:	20000004 	.word	0x20000004
 80040e8:	431bde83 	.word	0x431bde83

080040ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b099      	sub	sp, #100	; 0x64
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004104:	d102      	bne.n	800410c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004106:	4b6d      	ldr	r3, [pc, #436]	; (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	e01a      	b.n	8004142 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a6a      	ldr	r2, [pc, #424]	; (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d103      	bne.n	800411e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004116:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	e011      	b.n	8004142 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a67      	ldr	r2, [pc, #412]	; (80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d102      	bne.n	800412e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004128:	4b66      	ldr	r3, [pc, #408]	; (80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	e009      	b.n	8004142 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a64      	ldr	r2, [pc, #400]	; (80042c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d102      	bne.n	800413e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004138:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	e001      	b.n	8004142 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0b0      	b.n	80042ae <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004156:	2302      	movs	r3, #2
 8004158:	e0a9      	b.n	80042ae <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	f040 808d 	bne.w	800428c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	f040 8086 	bne.w	800428c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004188:	d004      	beq.n	8004194 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a4b      	ldr	r2, [pc, #300]	; (80042bc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d101      	bne.n	8004198 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004194:	4b4c      	ldr	r3, [pc, #304]	; (80042c8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004196:	e000      	b.n	800419a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004198:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800419a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d040      	beq.n	8004226 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80041a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6859      	ldr	r1, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041b6:	035b      	lsls	r3, r3, #13
 80041b8:	430b      	orrs	r3, r1
 80041ba:	431a      	orrs	r2, r3
 80041bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041be:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d108      	bne.n	80041e0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80041e0:	2300      	movs	r3, #0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d15c      	bne.n	80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d107      	bne.n	8004202 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004202:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004204:	2b00      	cmp	r3, #0
 8004206:	d14b      	bne.n	80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004210:	f023 030f 	bic.w	r3, r3, #15
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	6811      	ldr	r1, [r2, #0]
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	6892      	ldr	r2, [r2, #8]
 800421c:	430a      	orrs	r2, r1
 800421e:	431a      	orrs	r2, r3
 8004220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004222:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004224:	e03c      	b.n	80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800422e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004230:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d108      	bne.n	8004252 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004252:	2300      	movs	r3, #0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d123      	bne.n	80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	2b01      	cmp	r3, #1
 8004262:	d107      	bne.n	8004274 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004274:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004276:	2b00      	cmp	r3, #0
 8004278:	d112      	bne.n	80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800427a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004282:	f023 030f 	bic.w	r3, r3, #15
 8004286:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004288:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800428a:	e009      	b.n	80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800429e:	e000      	b.n	80042a2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80042a0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80042aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80042ae:	4618      	mov	r0, r3
 80042b0:	3764      	adds	r7, #100	; 0x64
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	50000100 	.word	0x50000100
 80042c0:	50000400 	.word	0x50000400
 80042c4:	50000500 	.word	0x50000500
 80042c8:	50000300 	.word	0x50000300
 80042cc:	50000700 	.word	0x50000700

080042d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d126      	bne.n	8004338 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004300:	2b00      	cmp	r3, #0
 8004302:	d115      	bne.n	8004330 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004308:	2b00      	cmp	r3, #0
 800430a:	d111      	bne.n	8004330 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	f043 0201 	orr.w	r2, r3, #1
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff f85f 	bl	80033f4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004336:	e004      	b.n	8004342 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	4798      	blx	r3
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff f855 	bl	8003408 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004384:	f043 0204 	orr.w	r2, r3, #4
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f7ff f845 	bl	800341c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004392:	bf00      	nop
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d108      	bne.n	80043c8 <ADC_Enable+0x2c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <ADC_Enable+0x2c>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <ADC_Enable+0x2e>
 80043c8:	2300      	movs	r3, #0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d13c      	bne.n	8004448 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <ADC_Enable+0xb8>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f043 0210 	orr.w	r2, r3, #16
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	f043 0201 	orr.w	r2, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e028      	b.n	800444a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004408:	f7fe ffc6 	bl	8003398 <HAL_GetTick>
 800440c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800440e:	e014      	b.n	800443a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004410:	f7fe ffc2 	bl	8003398 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d90d      	bls.n	800443a <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f043 0210 	orr.w	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442e:	f043 0201 	orr.w	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e007      	b.n	800444a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b01      	cmp	r3, #1
 8004446:	d1e3      	bne.n	8004410 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	8000003f 	.word	0x8000003f

08004458 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d108      	bne.n	8004484 <ADC_Disable+0x2c>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <ADC_Disable+0x2c>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <ADC_Disable+0x2e>
 8004484:	2300      	movs	r3, #0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d040      	beq.n	800450c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 030d 	and.w	r3, r3, #13
 8004494:	2b01      	cmp	r3, #1
 8004496:	d10f      	bne.n	80044b8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0202 	orr.w	r2, r2, #2
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2203      	movs	r2, #3
 80044ae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80044b0:	f7fe ff72 	bl	8003398 <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80044b6:	e022      	b.n	80044fe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f043 0210 	orr.w	r2, r3, #16
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c8:	f043 0201 	orr.w	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e01c      	b.n	800450e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80044d4:	f7fe ff60 	bl	8003398 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d90d      	bls.n	80044fe <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f043 0210 	orr.w	r2, r3, #16
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	f043 0201 	orr.w	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e007      	b.n	800450e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d0e3      	beq.n	80044d4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8093 	beq.w	8004664 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800454c:	d12a      	bne.n	80045a4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004552:	2b01      	cmp	r3, #1
 8004554:	d126      	bne.n	80045a4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800455a:	2b01      	cmp	r3, #1
 800455c:	d122      	bne.n	80045a4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800455e:	230c      	movs	r3, #12
 8004560:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004562:	e014      	b.n	800458e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4a42      	ldr	r2, [pc, #264]	; (8004670 <ADC_ConversionStop+0x158>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d90d      	bls.n	8004588 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	f043 0210 	orr.w	r2, r3, #16
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457c:	f043 0201 	orr.w	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e06e      	b.n	8004666 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	3301      	adds	r3, #1
 800458c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	d1e3      	bne.n	8004564 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2240      	movs	r2, #64	; 0x40
 80045a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b60      	cmp	r3, #96	; 0x60
 80045a8:	d015      	beq.n	80045d6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d10e      	bne.n	80045d6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d107      	bne.n	80045d6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0210 	orr.w	r2, r2, #16
 80045d4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b0c      	cmp	r3, #12
 80045da:	d015      	beq.n	8004608 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d10e      	bne.n	8004608 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d107      	bne.n	8004608 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0220 	orr.w	r2, r2, #32
 8004606:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b60      	cmp	r3, #96	; 0x60
 800460c:	d004      	beq.n	8004618 <ADC_ConversionStop+0x100>
 800460e:	2b6c      	cmp	r3, #108	; 0x6c
 8004610:	d105      	bne.n	800461e <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004612:	230c      	movs	r3, #12
 8004614:	617b      	str	r3, [r7, #20]
        break;
 8004616:	e005      	b.n	8004624 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004618:	2308      	movs	r3, #8
 800461a:	617b      	str	r3, [r7, #20]
        break;
 800461c:	e002      	b.n	8004624 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800461e:	2304      	movs	r3, #4
 8004620:	617b      	str	r3, [r7, #20]
        break;
 8004622:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004624:	f7fe feb8 	bl	8003398 <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800462a:	e014      	b.n	8004656 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800462c:	f7fe feb4 	bl	8003398 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b0b      	cmp	r3, #11
 8004638:	d90d      	bls.n	8004656 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f043 0210 	orr.w	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	f043 0201 	orr.w	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e007      	b.n	8004666 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	4013      	ands	r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e3      	bne.n	800462c <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	000993ff 	.word	0x000993ff

08004674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004690:	4013      	ands	r3, r2
 8004692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800469c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046a6:	4a04      	ldr	r2, [pc, #16]	; (80046b8 <__NVIC_SetPriorityGrouping+0x44>)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	60d3      	str	r3, [r2, #12]
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046c0:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <__NVIC_GetPriorityGrouping+0x18>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	0a1b      	lsrs	r3, r3, #8
 80046c6:	f003 0307 	and.w	r3, r3, #7
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	e000ed00 	.word	0xe000ed00

080046d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	db0b      	blt.n	8004702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	f003 021f 	and.w	r2, r3, #31
 80046f0:	4907      	ldr	r1, [pc, #28]	; (8004710 <__NVIC_EnableIRQ+0x38>)
 80046f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	2001      	movs	r0, #1
 80046fa:	fa00 f202 	lsl.w	r2, r0, r2
 80046fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	e000e100 	.word	0xe000e100

08004714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	6039      	str	r1, [r7, #0]
 800471e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004724:	2b00      	cmp	r3, #0
 8004726:	db0a      	blt.n	800473e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	b2da      	uxtb	r2, r3
 800472c:	490c      	ldr	r1, [pc, #48]	; (8004760 <__NVIC_SetPriority+0x4c>)
 800472e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004732:	0112      	lsls	r2, r2, #4
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	440b      	add	r3, r1
 8004738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800473c:	e00a      	b.n	8004754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	b2da      	uxtb	r2, r3
 8004742:	4908      	ldr	r1, [pc, #32]	; (8004764 <__NVIC_SetPriority+0x50>)
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	3b04      	subs	r3, #4
 800474c:	0112      	lsls	r2, r2, #4
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	440b      	add	r3, r1
 8004752:	761a      	strb	r2, [r3, #24]
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	e000e100 	.word	0xe000e100
 8004764:	e000ed00 	.word	0xe000ed00

08004768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004768:	b480      	push	{r7}
 800476a:	b089      	sub	sp, #36	; 0x24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f1c3 0307 	rsb	r3, r3, #7
 8004782:	2b04      	cmp	r3, #4
 8004784:	bf28      	it	cs
 8004786:	2304      	movcs	r3, #4
 8004788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	3304      	adds	r3, #4
 800478e:	2b06      	cmp	r3, #6
 8004790:	d902      	bls.n	8004798 <NVIC_EncodePriority+0x30>
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	3b03      	subs	r3, #3
 8004796:	e000      	b.n	800479a <NVIC_EncodePriority+0x32>
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800479c:	f04f 32ff 	mov.w	r2, #4294967295
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43da      	mvns	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	401a      	ands	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047b0:	f04f 31ff 	mov.w	r1, #4294967295
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ba:	43d9      	mvns	r1, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c0:	4313      	orrs	r3, r2
         );
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3724      	adds	r7, #36	; 0x24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
	...

080047d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3b01      	subs	r3, #1
 80047dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047e0:	d301      	bcc.n	80047e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047e2:	2301      	movs	r3, #1
 80047e4:	e00f      	b.n	8004806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047e6:	4a0a      	ldr	r2, [pc, #40]	; (8004810 <SysTick_Config+0x40>)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ee:	210f      	movs	r1, #15
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295
 80047f4:	f7ff ff8e 	bl	8004714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <SysTick_Config+0x40>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047fe:	4b04      	ldr	r3, [pc, #16]	; (8004810 <SysTick_Config+0x40>)
 8004800:	2207      	movs	r2, #7
 8004802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	e000e010 	.word	0xe000e010

08004814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff ff29 	bl	8004674 <__NVIC_SetPriorityGrouping>
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b086      	sub	sp, #24
 800482e:	af00      	add	r7, sp, #0
 8004830:	4603      	mov	r3, r0
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800483c:	f7ff ff3e 	bl	80046bc <__NVIC_GetPriorityGrouping>
 8004840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	6978      	ldr	r0, [r7, #20]
 8004848:	f7ff ff8e 	bl	8004768 <NVIC_EncodePriority>
 800484c:	4602      	mov	r2, r0
 800484e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff ff5d 	bl	8004714 <__NVIC_SetPriority>
}
 800485a:	bf00      	nop
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	4603      	mov	r3, r0
 800486a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800486c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff ff31 	bl	80046d8 <__NVIC_EnableIRQ>
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ffa2 	bl	80047d0 <SysTick_Config>
 800488c:	4603      	mov	r3, r0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e037      	b.n	800491c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80048c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80048c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80048d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f97a 	bl	8004bf8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}  
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_DMA_Start_IT+0x20>
 8004940:	2302      	movs	r3, #2
 8004942:	e04a      	b.n	80049da <HAL_DMA_Start_IT+0xb6>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004952:	2b01      	cmp	r3, #1
 8004954:	d13a      	bne.n	80049cc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f90d 	bl	8004b9a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 020e 	orr.w	r2, r2, #14
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	e00f      	b.n	80049ba <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 020a 	orr.w	r2, r2, #10
 80049a8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0204 	bic.w	r2, r2, #4
 80049b8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e005      	b.n	80049d8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
 80049d6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d008      	beq.n	8004a06 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2204      	movs	r2, #4
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e020      	b.n	8004a48 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 020e 	bic.w	r2, r2, #14
 8004a14:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	2101      	movs	r1, #1
 8004a30:	fa01 f202 	lsl.w	r2, r1, r2
 8004a34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	2204      	movs	r2, #4
 8004a72:	409a      	lsls	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d024      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0x72>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01f      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d107      	bne.n	8004aa4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0204 	bic.w	r2, r2, #4
 8004aa2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	2104      	movs	r1, #4
 8004aae:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d06a      	beq.n	8004b92 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004ac4:	e065      	b.n	8004b92 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	2202      	movs	r2, #2
 8004acc:	409a      	lsls	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d02c      	beq.n	8004b30 <HAL_DMA_IRQHandler+0xdc>
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d027      	beq.n	8004b30 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10b      	bne.n	8004b06 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 020a 	bic.w	r2, r2, #10
 8004afc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0e:	2102      	movs	r1, #2
 8004b10:	fa01 f202 	lsl.w	r2, r1, r2
 8004b14:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d035      	beq.n	8004b92 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004b2e:	e030      	b.n	8004b92 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	2208      	movs	r2, #8
 8004b36:	409a      	lsls	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d028      	beq.n	8004b92 <HAL_DMA_IRQHandler+0x13e>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d023      	beq.n	8004b92 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 020e 	bic.w	r2, r2, #14
 8004b58:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	2101      	movs	r1, #1
 8004b64:	fa01 f202 	lsl.w	r2, r1, r2
 8004b68:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d004      	beq.n	8004b92 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
    }
  }
}  
 8004b90:	e7ff      	b.n	8004b92 <HAL_DMA_IRQHandler+0x13e>
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b10      	cmp	r3, #16
 8004bc6:	d108      	bne.n	8004bda <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bd8:	e007      	b.n	8004bea <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	60da      	str	r2, [r3, #12]
}
 8004bea:	bf00      	nop
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
	...

08004bf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <DMA_CalcBaseAndBitshift+0x60>)
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d80f      	bhi.n	8004c2c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <DMA_CalcBaseAndBitshift+0x64>)
 8004c14:	4413      	add	r3, r2
 8004c16:	4a12      	ldr	r2, [pc, #72]	; (8004c60 <DMA_CalcBaseAndBitshift+0x68>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	009a      	lsls	r2, r3, #2
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a0f      	ldr	r2, [pc, #60]	; (8004c64 <DMA_CalcBaseAndBitshift+0x6c>)
 8004c28:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004c2a:	e00e      	b.n	8004c4a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <DMA_CalcBaseAndBitshift+0x70>)
 8004c34:	4413      	add	r3, r2
 8004c36:	4a0a      	ldr	r2, [pc, #40]	; (8004c60 <DMA_CalcBaseAndBitshift+0x68>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	091b      	lsrs	r3, r3, #4
 8004c3e:	009a      	lsls	r2, r3, #2
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <DMA_CalcBaseAndBitshift+0x74>)
 8004c48:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40020407 	.word	0x40020407
 8004c5c:	bffdfff8 	.word	0xbffdfff8
 8004c60:	cccccccd 	.word	0xcccccccd
 8004c64:	40020000 	.word	0x40020000
 8004c68:	bffdfbf8 	.word	0xbffdfbf8
 8004c6c:	40020400 	.word	0x40020400

08004c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c7e:	e160      	b.n	8004f42 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	2101      	movs	r1, #1
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8152 	beq.w	8004f3c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d00b      	beq.n	8004cb8 <HAL_GPIO_Init+0x48>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d007      	beq.n	8004cb8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cac:	2b11      	cmp	r3, #17
 8004cae:	d003      	beq.n	8004cb8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b12      	cmp	r3, #18
 8004cb6:	d130      	bne.n	8004d1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cee:	2201      	movs	r2, #1
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	f003 0201 	and.w	r2, r3, #1
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	2203      	movs	r2, #3
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d003      	beq.n	8004d5a <HAL_GPIO_Init+0xea>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b12      	cmp	r3, #18
 8004d58:	d123      	bne.n	8004da2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	08da      	lsrs	r2, r3, #3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3208      	adds	r2, #8
 8004d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	220f      	movs	r2, #15
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	43db      	mvns	r3, r3
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	08da      	lsrs	r2, r3, #3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3208      	adds	r2, #8
 8004d9c:	6939      	ldr	r1, [r7, #16]
 8004d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	2203      	movs	r2, #3
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43db      	mvns	r3, r3
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4013      	ands	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f003 0203 	and.w	r2, r3, #3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 80ac 	beq.w	8004f3c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de4:	4b5e      	ldr	r3, [pc, #376]	; (8004f60 <HAL_GPIO_Init+0x2f0>)
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	4a5d      	ldr	r2, [pc, #372]	; (8004f60 <HAL_GPIO_Init+0x2f0>)
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	6193      	str	r3, [r2, #24]
 8004df0:	4b5b      	ldr	r3, [pc, #364]	; (8004f60 <HAL_GPIO_Init+0x2f0>)
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004dfc:	4a59      	ldr	r2, [pc, #356]	; (8004f64 <HAL_GPIO_Init+0x2f4>)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	089b      	lsrs	r3, r3, #2
 8004e02:	3302      	adds	r3, #2
 8004e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	220f      	movs	r2, #15
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e26:	d025      	beq.n	8004e74 <HAL_GPIO_Init+0x204>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a4f      	ldr	r2, [pc, #316]	; (8004f68 <HAL_GPIO_Init+0x2f8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d01f      	beq.n	8004e70 <HAL_GPIO_Init+0x200>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a4e      	ldr	r2, [pc, #312]	; (8004f6c <HAL_GPIO_Init+0x2fc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d019      	beq.n	8004e6c <HAL_GPIO_Init+0x1fc>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a4d      	ldr	r2, [pc, #308]	; (8004f70 <HAL_GPIO_Init+0x300>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d013      	beq.n	8004e68 <HAL_GPIO_Init+0x1f8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a4c      	ldr	r2, [pc, #304]	; (8004f74 <HAL_GPIO_Init+0x304>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00d      	beq.n	8004e64 <HAL_GPIO_Init+0x1f4>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a4b      	ldr	r2, [pc, #300]	; (8004f78 <HAL_GPIO_Init+0x308>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <HAL_GPIO_Init+0x1f0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a4a      	ldr	r2, [pc, #296]	; (8004f7c <HAL_GPIO_Init+0x30c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d101      	bne.n	8004e5c <HAL_GPIO_Init+0x1ec>
 8004e58:	2306      	movs	r3, #6
 8004e5a:	e00c      	b.n	8004e76 <HAL_GPIO_Init+0x206>
 8004e5c:	2307      	movs	r3, #7
 8004e5e:	e00a      	b.n	8004e76 <HAL_GPIO_Init+0x206>
 8004e60:	2305      	movs	r3, #5
 8004e62:	e008      	b.n	8004e76 <HAL_GPIO_Init+0x206>
 8004e64:	2304      	movs	r3, #4
 8004e66:	e006      	b.n	8004e76 <HAL_GPIO_Init+0x206>
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e004      	b.n	8004e76 <HAL_GPIO_Init+0x206>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e002      	b.n	8004e76 <HAL_GPIO_Init+0x206>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <HAL_GPIO_Init+0x206>
 8004e74:	2300      	movs	r3, #0
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	f002 0203 	and.w	r2, r2, #3
 8004e7c:	0092      	lsls	r2, r2, #2
 8004e7e:	4093      	lsls	r3, r2
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e86:	4937      	ldr	r1, [pc, #220]	; (8004f64 <HAL_GPIO_Init+0x2f4>)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	089b      	lsrs	r3, r3, #2
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e94:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <HAL_GPIO_Init+0x310>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004eb8:	4a31      	ldr	r2, [pc, #196]	; (8004f80 <HAL_GPIO_Init+0x310>)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ebe:	4b30      	ldr	r3, [pc, #192]	; (8004f80 <HAL_GPIO_Init+0x310>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004ee2:	4a27      	ldr	r2, [pc, #156]	; (8004f80 <HAL_GPIO_Init+0x310>)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <HAL_GPIO_Init+0x310>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <HAL_GPIO_Init+0x310>)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f12:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <HAL_GPIO_Init+0x310>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f36:	4a12      	ldr	r2, [pc, #72]	; (8004f80 <HAL_GPIO_Init+0x310>)
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f47f ae97 	bne.w	8004c80 <HAL_GPIO_Init+0x10>
  }
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40021000 	.word	0x40021000
 8004f64:	40010000 	.word	0x40010000
 8004f68:	48000400 	.word	0x48000400
 8004f6c:	48000800 	.word	0x48000800
 8004f70:	48000c00 	.word	0x48000c00
 8004f74:	48001000 	.word	0x48001000
 8004f78:	48001400 	.word	0x48001400
 8004f7c:	48001800 	.word	0x48001800
 8004f80:	40010400 	.word	0x40010400

08004f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	887b      	ldrh	r3, [r7, #2]
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e001      	b.n	8004fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	807b      	strh	r3, [r7, #2]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fc4:	787b      	ldrb	r3, [r7, #1]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fd0:	e002      	b.n	8004fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e081      	b.n	80050fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fd f94c 	bl	80022a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2224      	movs	r2, #36	; 0x24
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0201 	bic.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005034:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005044:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d107      	bne.n	800505e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800505a:	609a      	str	r2, [r3, #8]
 800505c:	e006      	b.n	800506c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800506a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d104      	bne.n	800507e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800507c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800508c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005090:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691a      	ldr	r2, [r3, #16]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	ea42 0103 	orr.w	r1, r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	021a      	lsls	r2, r3, #8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69d9      	ldr	r1, [r3, #28]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1a      	ldr	r2, [r3, #32]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af02      	add	r7, sp, #8
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	607a      	str	r2, [r7, #4]
 800510e:	461a      	mov	r2, r3
 8005110:	460b      	mov	r3, r1
 8005112:	817b      	strh	r3, [r7, #10]
 8005114:	4613      	mov	r3, r2
 8005116:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b20      	cmp	r3, #32
 8005122:	f040 80da 	bne.w	80052da <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_I2C_Master_Transmit+0x30>
 8005130:	2302      	movs	r3, #2
 8005132:	e0d3      	b.n	80052dc <HAL_I2C_Master_Transmit+0x1d8>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800513c:	f7fe f92c 	bl	8003398 <HAL_GetTick>
 8005140:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	2319      	movs	r3, #25
 8005148:	2201      	movs	r2, #1
 800514a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fcce 	bl	8005af0 <I2C_WaitOnFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e0be      	b.n	80052dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2221      	movs	r2, #33	; 0x21
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2210      	movs	r2, #16
 800516a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	893a      	ldrh	r2, [r7, #8]
 800517e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518a:	b29b      	uxth	r3, r3
 800518c:	2bff      	cmp	r3, #255	; 0xff
 800518e:	d90e      	bls.n	80051ae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	22ff      	movs	r2, #255	; 0xff
 8005194:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519a:	b2da      	uxtb	r2, r3
 800519c:	8979      	ldrh	r1, [r7, #10]
 800519e:	4b51      	ldr	r3, [pc, #324]	; (80052e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 fdc4 	bl	8005d34 <I2C_TransferConfig>
 80051ac:	e06c      	b.n	8005288 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	8979      	ldrh	r1, [r7, #10]
 80051c0:	4b48      	ldr	r3, [pc, #288]	; (80052e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 fdb3 	bl	8005d34 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80051ce:	e05b      	b.n	8005288 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	6a39      	ldr	r1, [r7, #32]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fccb 	bl	8005b70 <I2C_WaitOnTXISFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e07b      	b.n	80052dc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	781a      	ldrb	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d034      	beq.n	8005288 <HAL_I2C_Master_Transmit+0x184>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005222:	2b00      	cmp	r3, #0
 8005224:	d130      	bne.n	8005288 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	2200      	movs	r2, #0
 800522e:	2180      	movs	r1, #128	; 0x80
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fc5d 	bl	8005af0 <I2C_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e04d      	b.n	80052dc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005244:	b29b      	uxth	r3, r3
 8005246:	2bff      	cmp	r3, #255	; 0xff
 8005248:	d90e      	bls.n	8005268 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	22ff      	movs	r2, #255	; 0xff
 800524e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	b2da      	uxtb	r2, r3
 8005256:	8979      	ldrh	r1, [r7, #10]
 8005258:	2300      	movs	r3, #0
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 fd67 	bl	8005d34 <I2C_TransferConfig>
 8005266:	e00f      	b.n	8005288 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005276:	b2da      	uxtb	r2, r3
 8005278:	8979      	ldrh	r1, [r7, #10]
 800527a:	2300      	movs	r3, #0
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fd56 	bl	8005d34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d19e      	bne.n	80051d0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	6a39      	ldr	r1, [r7, #32]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fcaa 	bl	8005bf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e01a      	b.n	80052dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2220      	movs	r2, #32
 80052ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6859      	ldr	r1, [r3, #4]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_I2C_Master_Transmit+0x1e4>)
 80052ba:	400b      	ands	r3, r1
 80052bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e000      	b.n	80052dc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80052da:	2302      	movs	r3, #2
  }
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	80002000 	.word	0x80002000
 80052e8:	fe00e800 	.word	0xfe00e800

080052ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	4608      	mov	r0, r1
 80052f6:	4611      	mov	r1, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	817b      	strh	r3, [r7, #10]
 80052fe:	460b      	mov	r3, r1
 8005300:	813b      	strh	r3, [r7, #8]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b20      	cmp	r3, #32
 8005310:	f040 80f9 	bne.w	8005506 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_I2C_Mem_Write+0x34>
 800531a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800531c:	2b00      	cmp	r3, #0
 800531e:	d105      	bne.n	800532c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005326:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0ed      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_I2C_Mem_Write+0x4e>
 8005336:	2302      	movs	r3, #2
 8005338:	e0e6      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005342:	f7fe f829 	bl	8003398 <HAL_GetTick>
 8005346:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	2319      	movs	r3, #25
 800534e:	2201      	movs	r2, #1
 8005350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 fbcb 	bl	8005af0 <I2C_WaitOnFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0d1      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2221      	movs	r2, #33	; 0x21
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2240      	movs	r2, #64	; 0x40
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a3a      	ldr	r2, [r7, #32]
 800537e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005384:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800538c:	88f8      	ldrh	r0, [r7, #6]
 800538e:	893a      	ldrh	r2, [r7, #8]
 8005390:	8979      	ldrh	r1, [r7, #10]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	4603      	mov	r3, r0
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fadb 	bl	8005958 <I2C_RequestMemoryWrite>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0a9      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2bff      	cmp	r3, #255	; 0xff
 80053bc:	d90e      	bls.n	80053dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	22ff      	movs	r2, #255	; 0xff
 80053c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	8979      	ldrh	r1, [r7, #10]
 80053cc:	2300      	movs	r3, #0
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 fcad 	bl	8005d34 <I2C_TransferConfig>
 80053da:	e00f      	b.n	80053fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	8979      	ldrh	r1, [r7, #10]
 80053ee:	2300      	movs	r3, #0
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 fc9c 	bl	8005d34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fbb5 	bl	8005b70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e07b      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	781a      	ldrb	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d034      	beq.n	80054b4 <HAL_I2C_Mem_Write+0x1c8>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544e:	2b00      	cmp	r3, #0
 8005450:	d130      	bne.n	80054b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	2200      	movs	r2, #0
 800545a:	2180      	movs	r1, #128	; 0x80
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fb47 	bl	8005af0 <I2C_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e04d      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005470:	b29b      	uxth	r3, r3
 8005472:	2bff      	cmp	r3, #255	; 0xff
 8005474:	d90e      	bls.n	8005494 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	22ff      	movs	r2, #255	; 0xff
 800547a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005480:	b2da      	uxtb	r2, r3
 8005482:	8979      	ldrh	r1, [r7, #10]
 8005484:	2300      	movs	r3, #0
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 fc51 	bl	8005d34 <I2C_TransferConfig>
 8005492:	e00f      	b.n	80054b4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	8979      	ldrh	r1, [r7, #10]
 80054a6:	2300      	movs	r3, #0
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fc40 	bl	8005d34 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d19e      	bne.n	80053fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 fb94 	bl	8005bf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e01a      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2220      	movs	r2, #32
 80054d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6859      	ldr	r1, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <HAL_I2C_Mem_Write+0x224>)
 80054e6:	400b      	ands	r3, r1
 80054e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005506:	2302      	movs	r3, #2
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	fe00e800 	.word	0xfe00e800

08005514 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	4608      	mov	r0, r1
 800551e:	4611      	mov	r1, r2
 8005520:	461a      	mov	r2, r3
 8005522:	4603      	mov	r3, r0
 8005524:	817b      	strh	r3, [r7, #10]
 8005526:	460b      	mov	r3, r1
 8005528:	813b      	strh	r3, [r7, #8]
 800552a:	4613      	mov	r3, r2
 800552c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b20      	cmp	r3, #32
 8005538:	f040 80fd 	bne.w	8005736 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_I2C_Mem_Read+0x34>
 8005542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d105      	bne.n	8005554 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800554e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e0f1      	b.n	8005738 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_I2C_Mem_Read+0x4e>
 800555e:	2302      	movs	r3, #2
 8005560:	e0ea      	b.n	8005738 <HAL_I2C_Mem_Read+0x224>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800556a:	f7fd ff15 	bl	8003398 <HAL_GetTick>
 800556e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	2319      	movs	r3, #25
 8005576:	2201      	movs	r2, #1
 8005578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 fab7 	bl	8005af0 <I2C_WaitOnFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0d5      	b.n	8005738 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2222      	movs	r2, #34	; 0x22
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2240      	movs	r2, #64	; 0x40
 8005598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a3a      	ldr	r2, [r7, #32]
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055b4:	88f8      	ldrh	r0, [r7, #6]
 80055b6:	893a      	ldrh	r2, [r7, #8]
 80055b8:	8979      	ldrh	r1, [r7, #10]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	4603      	mov	r3, r0
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fa1b 	bl	8005a00 <I2C_RequestMemoryRead>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0ad      	b.n	8005738 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2bff      	cmp	r3, #255	; 0xff
 80055e4:	d90e      	bls.n	8005604 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	22ff      	movs	r2, #255	; 0xff
 80055ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	8979      	ldrh	r1, [r7, #10]
 80055f4:	4b52      	ldr	r3, [pc, #328]	; (8005740 <HAL_I2C_Mem_Read+0x22c>)
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 fb99 	bl	8005d34 <I2C_TransferConfig>
 8005602:	e00f      	b.n	8005624 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005612:	b2da      	uxtb	r2, r3
 8005614:	8979      	ldrh	r1, [r7, #10]
 8005616:	4b4a      	ldr	r3, [pc, #296]	; (8005740 <HAL_I2C_Mem_Read+0x22c>)
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 fb88 	bl	8005d34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	2200      	movs	r2, #0
 800562c:	2104      	movs	r1, #4
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 fa5e 	bl	8005af0 <I2C_WaitOnFlagUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e07c      	b.n	8005738 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d034      	beq.n	80056e4 <HAL_I2C_Mem_Read+0x1d0>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d130      	bne.n	80056e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	2200      	movs	r2, #0
 800568a:	2180      	movs	r1, #128	; 0x80
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fa2f 	bl	8005af0 <I2C_WaitOnFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e04d      	b.n	8005738 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2bff      	cmp	r3, #255	; 0xff
 80056a4:	d90e      	bls.n	80056c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	22ff      	movs	r2, #255	; 0xff
 80056aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	8979      	ldrh	r1, [r7, #10]
 80056b4:	2300      	movs	r3, #0
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fb39 	bl	8005d34 <I2C_TransferConfig>
 80056c2:	e00f      	b.n	80056e4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	8979      	ldrh	r1, [r7, #10]
 80056d6:	2300      	movs	r3, #0
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fb28 	bl	8005d34 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d19a      	bne.n	8005624 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fa7c 	bl	8005bf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e01a      	b.n	8005738 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2220      	movs	r2, #32
 8005708:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6859      	ldr	r1, [r3, #4]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <HAL_I2C_Mem_Read+0x230>)
 8005716:	400b      	ands	r3, r1
 8005718:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	e000      	b.n	8005738 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005736:	2302      	movs	r3, #2
  }
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	80002400 	.word	0x80002400
 8005744:	fe00e800 	.word	0xfe00e800

08005748 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af02      	add	r7, sp, #8
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	460b      	mov	r3, r1
 8005756:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b20      	cmp	r3, #32
 8005766:	f040 80f1 	bne.w	800594c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005778:	d101      	bne.n	800577e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800577a:	2302      	movs	r3, #2
 800577c:	e0e7      	b.n	800594e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_I2C_IsDeviceReady+0x44>
 8005788:	2302      	movs	r3, #2
 800578a:	e0e0      	b.n	800594e <HAL_I2C_IsDeviceReady+0x206>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2224      	movs	r2, #36	; 0x24
 8005798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d107      	bne.n	80057ba <HAL_I2C_IsDeviceReady+0x72>
 80057aa:	897b      	ldrh	r3, [r7, #10]
 80057ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057b8:	e004      	b.n	80057c4 <HAL_I2C_IsDeviceReady+0x7c>
 80057ba:	897b      	ldrh	r3, [r7, #10]
 80057bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057c0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80057ca:	f7fd fde5 	bl	8003398 <HAL_GetTick>
 80057ce:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b20      	cmp	r3, #32
 80057dc:	bf0c      	ite	eq
 80057de:	2301      	moveq	r3, #1
 80057e0:	2300      	movne	r3, #0
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	bf0c      	ite	eq
 80057f4:	2301      	moveq	r3, #1
 80057f6:	2300      	movne	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80057fc:	e034      	b.n	8005868 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005804:	d01a      	beq.n	800583c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005806:	f7fd fdc7 	bl	8003398 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d302      	bcc.n	800581c <HAL_I2C_IsDeviceReady+0xd4>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10f      	bne.n	800583c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005828:	f043 0220 	orr.w	r2, r3, #32
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e088      	b.n	800594e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b20      	cmp	r3, #32
 8005848:	bf0c      	ite	eq
 800584a:	2301      	moveq	r3, #1
 800584c:	2300      	movne	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b10      	cmp	r3, #16
 800585e:	bf0c      	ite	eq
 8005860:	2301      	moveq	r3, #1
 8005862:	2300      	movne	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005868:	7ffb      	ldrb	r3, [r7, #31]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <HAL_I2C_IsDeviceReady+0x12c>
 800586e:	7fbb      	ldrb	r3, [r7, #30]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0c4      	beq.n	80057fe <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f003 0310 	and.w	r3, r3, #16
 800587e:	2b10      	cmp	r3, #16
 8005880:	d01a      	beq.n	80058b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2200      	movs	r2, #0
 800588a:	2120      	movs	r1, #32
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 f92f 	bl	8005af0 <I2C_WaitOnFlagUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e058      	b.n	800594e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2220      	movs	r2, #32
 80058a2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	e04a      	b.n	800594e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2200      	movs	r2, #0
 80058c0:	2120      	movs	r1, #32
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f914 	bl	8005af0 <I2C_WaitOnFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e03d      	b.n	800594e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2210      	movs	r2, #16
 80058d8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2220      	movs	r2, #32
 80058e0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d118      	bne.n	800591c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058f8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2200      	movs	r2, #0
 8005902:	2120      	movs	r1, #32
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f8f3 	bl	8005af0 <I2C_WaitOnFlagUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e01c      	b.n	800594e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2220      	movs	r2, #32
 800591a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	3301      	adds	r3, #1
 8005920:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	429a      	cmp	r2, r3
 8005928:	f63f af3b 	bhi.w	80057a2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800594c:	2302      	movs	r3, #2
  }
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af02      	add	r7, sp, #8
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	4608      	mov	r0, r1
 8005962:	4611      	mov	r1, r2
 8005964:	461a      	mov	r2, r3
 8005966:	4603      	mov	r3, r0
 8005968:	817b      	strh	r3, [r7, #10]
 800596a:	460b      	mov	r3, r1
 800596c:	813b      	strh	r3, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	b2da      	uxtb	r2, r3
 8005976:	8979      	ldrh	r1, [r7, #10]
 8005978:	4b20      	ldr	r3, [pc, #128]	; (80059fc <I2C_RequestMemoryWrite+0xa4>)
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f9d7 	bl	8005d34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	69b9      	ldr	r1, [r7, #24]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f8f0 	bl	8005b70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e02c      	b.n	80059f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800599a:	88fb      	ldrh	r3, [r7, #6]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d105      	bne.n	80059ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059a0:	893b      	ldrh	r3, [r7, #8]
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	629a      	str	r2, [r3, #40]	; 0x28
 80059aa:	e015      	b.n	80059d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059ac:	893b      	ldrh	r3, [r7, #8]
 80059ae:	0a1b      	lsrs	r3, r3, #8
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	69b9      	ldr	r1, [r7, #24]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f8d6 	bl	8005b70 <I2C_WaitOnTXISFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e012      	b.n	80059f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059ce:	893b      	ldrh	r3, [r7, #8]
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2200      	movs	r2, #0
 80059e0:	2180      	movs	r1, #128	; 0x80
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 f884 	bl	8005af0 <I2C_WaitOnFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	80002000 	.word	0x80002000

08005a00 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	4608      	mov	r0, r1
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4603      	mov	r3, r0
 8005a10:	817b      	strh	r3, [r7, #10]
 8005a12:	460b      	mov	r3, r1
 8005a14:	813b      	strh	r3, [r7, #8]
 8005a16:	4613      	mov	r3, r2
 8005a18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	8979      	ldrh	r1, [r7, #10]
 8005a20:	4b20      	ldr	r3, [pc, #128]	; (8005aa4 <I2C_RequestMemoryRead+0xa4>)
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	2300      	movs	r3, #0
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f984 	bl	8005d34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	69b9      	ldr	r1, [r7, #24]
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f89d 	bl	8005b70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e02c      	b.n	8005a9a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d105      	bne.n	8005a52 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a46:	893b      	ldrh	r3, [r7, #8]
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8005a50:	e015      	b.n	8005a7e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a52:	893b      	ldrh	r3, [r7, #8]
 8005a54:	0a1b      	lsrs	r3, r3, #8
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	69b9      	ldr	r1, [r7, #24]
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f883 	bl	8005b70 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e012      	b.n	8005a9a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a74:	893b      	ldrh	r3, [r7, #8]
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2200      	movs	r2, #0
 8005a86:	2140      	movs	r1, #64	; 0x40
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 f831 	bl	8005af0 <I2C_WaitOnFlagUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	80002000 	.word	0x80002000

08005aa8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d103      	bne.n	8005ac6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d007      	beq.n	8005ae4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	619a      	str	r2, [r3, #24]
  }
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	603b      	str	r3, [r7, #0]
 8005afc:	4613      	mov	r3, r2
 8005afe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b00:	e022      	b.n	8005b48 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b08:	d01e      	beq.n	8005b48 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0a:	f7fd fc45 	bl	8003398 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d302      	bcc.n	8005b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d113      	bne.n	8005b48 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b24:	f043 0220 	orr.w	r2, r3, #32
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e00f      	b.n	8005b68 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4013      	ands	r3, r2
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	bf0c      	ite	eq
 8005b58:	2301      	moveq	r3, #1
 8005b5a:	2300      	movne	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d0cd      	beq.n	8005b02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b7c:	e02c      	b.n	8005bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 f870 	bl	8005c68 <I2C_IsAcknowledgeFailed>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e02a      	b.n	8005be8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d01e      	beq.n	8005bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9a:	f7fd fbfd 	bl	8003398 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d302      	bcc.n	8005bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d113      	bne.n	8005bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb4:	f043 0220 	orr.w	r2, r3, #32
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e007      	b.n	8005be8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d1cb      	bne.n	8005b7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bfc:	e028      	b.n	8005c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 f830 	bl	8005c68 <I2C_IsAcknowledgeFailed>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e026      	b.n	8005c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c12:	f7fd fbc1 	bl	8003398 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d113      	bne.n	8005c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2c:	f043 0220 	orr.w	r2, r3, #32
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e007      	b.n	8005c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d1cf      	bne.n	8005bfe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	2b10      	cmp	r3, #16
 8005c80:	d151      	bne.n	8005d26 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c82:	e022      	b.n	8005cca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8a:	d01e      	beq.n	8005cca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c8c:	f7fd fb84 	bl	8003398 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d302      	bcc.n	8005ca2 <I2C_IsAcknowledgeFailed+0x3a>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d113      	bne.n	8005cca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca6:	f043 0220 	orr.w	r2, r3, #32
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e02e      	b.n	8005d28 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d1d5      	bne.n	8005c84 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2210      	movs	r2, #16
 8005cde:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff fedd 	bl	8005aa8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	4b0d      	ldr	r3, [pc, #52]	; (8005d30 <I2C_IsAcknowledgeFailed+0xc8>)
 8005cfa:	400b      	ands	r3, r1
 8005cfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d02:	f043 0204 	orr.w	r2, r3, #4
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	fe00e800 	.word	0xfe00e800

08005d34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	607b      	str	r3, [r7, #4]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	817b      	strh	r3, [r7, #10]
 8005d42:	4613      	mov	r3, r2
 8005d44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	0d5b      	lsrs	r3, r3, #21
 8005d50:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d54:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <I2C_TransferConfig+0x58>)
 8005d56:	430b      	orrs	r3, r1
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	ea02 0103 	and.w	r1, r2, r3
 8005d5e:	897b      	ldrh	r3, [r7, #10]
 8005d60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d64:	7a7b      	ldrb	r3, [r7, #9]
 8005d66:	041b      	lsls	r3, r3, #16
 8005d68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	431a      	orrs	r2, r3
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	431a      	orrs	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	03ff63ff 	.word	0x03ff63ff

08005d90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	d138      	bne.n	8005e18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e032      	b.n	8005e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2224      	movs	r2, #36	; 0x24
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005de2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6819      	ldr	r1, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0201 	orr.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	e000      	b.n	8005e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e18:	2302      	movs	r3, #2
  }
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d139      	bne.n	8005eb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e033      	b.n	8005eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2224      	movs	r2, #36	; 0x24
 8005e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0201 	bic.w	r2, r2, #1
 8005e68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	e000      	b.n	8005eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005eb0:	2302      	movs	r3, #2
  }
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	1d3b      	adds	r3, r7, #4
 8005eca:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ecc:	1d3b      	adds	r3, r7, #4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f000 bf01 	b.w	8006cdc <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 8160 	beq.w	80061aa <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005eea:	4bae      	ldr	r3, [pc, #696]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f003 030c 	and.w	r3, r3, #12
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d00c      	beq.n	8005f10 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ef6:	4bab      	ldr	r3, [pc, #684]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f003 030c 	and.w	r3, r3, #12
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d159      	bne.n	8005fb6 <HAL_RCC_OscConfig+0xf6>
 8005f02:	4ba8      	ldr	r3, [pc, #672]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0e:	d152      	bne.n	8005fb6 <HAL_RCC_OscConfig+0xf6>
 8005f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f14:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f18:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005f1c:	fa93 f3a3 	rbit	r3, r3
 8005f20:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f24:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f28:	fab3 f383 	clz	r3, r3
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	f043 0301 	orr.w	r3, r3, #1
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d102      	bne.n	8005f42 <HAL_RCC_OscConfig+0x82>
 8005f3c:	4b99      	ldr	r3, [pc, #612]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	e015      	b.n	8005f6e <HAL_RCC_OscConfig+0xae>
 8005f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005f4e:	fa93 f3a3 	rbit	r3, r3
 8005f52:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f5a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005f5e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005f62:	fa93 f3a3 	rbit	r3, r3
 8005f66:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005f6a:	4b8e      	ldr	r3, [pc, #568]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f72:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005f76:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8005f7a:	fa92 f2a2 	rbit	r2, r2
 8005f7e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8005f82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005f86:	fab2 f282 	clz	r2, r2
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	f042 0220 	orr.w	r2, r2, #32
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	f002 021f 	and.w	r2, r2, #31
 8005f96:	2101      	movs	r1, #1
 8005f98:	fa01 f202 	lsl.w	r2, r1, r2
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 8102 	beq.w	80061a8 <HAL_RCC_OscConfig+0x2e8>
 8005fa4:	1d3b      	adds	r3, r7, #4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 80fc 	bne.w	80061a8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f000 be93 	b.w	8006cdc <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb6:	1d3b      	adds	r3, r7, #4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc0:	d106      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x110>
 8005fc2:	4b78      	ldr	r3, [pc, #480]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a77      	ldr	r2, [pc, #476]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8005fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	e030      	b.n	8006032 <HAL_RCC_OscConfig+0x172>
 8005fd0:	1d3b      	adds	r3, r7, #4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10c      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x134>
 8005fda:	4b72      	ldr	r3, [pc, #456]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a71      	ldr	r2, [pc, #452]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8005fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	4b6f      	ldr	r3, [pc, #444]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a6e      	ldr	r2, [pc, #440]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8005fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	e01e      	b.n	8006032 <HAL_RCC_OscConfig+0x172>
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ffe:	d10c      	bne.n	800601a <HAL_RCC_OscConfig+0x15a>
 8006000:	4b68      	ldr	r3, [pc, #416]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a67      	ldr	r2, [pc, #412]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8006006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	4b65      	ldr	r3, [pc, #404]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a64      	ldr	r2, [pc, #400]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8006012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	e00b      	b.n	8006032 <HAL_RCC_OscConfig+0x172>
 800601a:	4b62      	ldr	r3, [pc, #392]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a61      	ldr	r2, [pc, #388]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8006020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	4b5f      	ldr	r3, [pc, #380]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a5e      	ldr	r2, [pc, #376]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 800602c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006030:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006032:	1d3b      	adds	r3, r7, #4
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d059      	beq.n	80060f0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603c:	f7fd f9ac 	bl	8003398 <HAL_GetTick>
 8006040:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006044:	e00a      	b.n	800605c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006046:	f7fd f9a7 	bl	8003398 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b64      	cmp	r3, #100	; 0x64
 8006054:	d902      	bls.n	800605c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	f000 be40 	b.w	8006cdc <HAL_RCC_OscConfig+0xe1c>
 800605c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006060:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006064:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006068:	fa93 f3a3 	rbit	r3, r3
 800606c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8006070:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006074:	fab3 f383 	clz	r3, r3
 8006078:	b2db      	uxtb	r3, r3
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f043 0301 	orr.w	r3, r3, #1
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d102      	bne.n	800608e <HAL_RCC_OscConfig+0x1ce>
 8006088:	4b46      	ldr	r3, [pc, #280]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	e015      	b.n	80060ba <HAL_RCC_OscConfig+0x1fa>
 800608e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006092:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006096:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800609a:	fa93 f3a3 	rbit	r3, r3
 800609e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80060a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80060aa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80060ae:	fa93 f3a3 	rbit	r3, r3
 80060b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80060b6:	4b3b      	ldr	r3, [pc, #236]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060be:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80060c2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80060c6:	fa92 f2a2 	rbit	r2, r2
 80060ca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80060ce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80060d2:	fab2 f282 	clz	r2, r2
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	f042 0220 	orr.w	r2, r2, #32
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	f002 021f 	and.w	r2, r2, #31
 80060e2:	2101      	movs	r1, #1
 80060e4:	fa01 f202 	lsl.w	r2, r1, r2
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0ab      	beq.n	8006046 <HAL_RCC_OscConfig+0x186>
 80060ee:	e05c      	b.n	80061aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f0:	f7fd f952 	bl	8003398 <HAL_GetTick>
 80060f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f8:	e00a      	b.n	8006110 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060fa:	f7fd f94d 	bl	8003398 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b64      	cmp	r3, #100	; 0x64
 8006108:	d902      	bls.n	8006110 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	f000 bde6 	b.w	8006cdc <HAL_RCC_OscConfig+0xe1c>
 8006110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006114:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006118:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800611c:	fa93 f3a3 	rbit	r3, r3
 8006120:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8006124:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006128:	fab3 f383 	clz	r3, r3
 800612c:	b2db      	uxtb	r3, r3
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	b2db      	uxtb	r3, r3
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b01      	cmp	r3, #1
 800613a:	d102      	bne.n	8006142 <HAL_RCC_OscConfig+0x282>
 800613c:	4b19      	ldr	r3, [pc, #100]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	e015      	b.n	800616e <HAL_RCC_OscConfig+0x2ae>
 8006142:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006146:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800614e:	fa93 f3a3 	rbit	r3, r3
 8006152:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800615a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800615e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8006162:	fa93 f3a3 	rbit	r3, r3
 8006166:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800616a:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <HAL_RCC_OscConfig+0x2e4>)
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006172:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006176:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800617a:	fa92 f2a2 	rbit	r2, r2
 800617e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8006182:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006186:	fab2 f282 	clz	r2, r2
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	f042 0220 	orr.w	r2, r2, #32
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	f002 021f 	and.w	r2, r2, #31
 8006196:	2101      	movs	r1, #1
 8006198:	fa01 f202 	lsl.w	r2, r1, r2
 800619c:	4013      	ands	r3, r2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1ab      	bne.n	80060fa <HAL_RCC_OscConfig+0x23a>
 80061a2:	e002      	b.n	80061aa <HAL_RCC_OscConfig+0x2ea>
 80061a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061aa:	1d3b      	adds	r3, r7, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 8170 	beq.w	800649a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80061ba:	4bd0      	ldr	r3, [pc, #832]	; (80064fc <HAL_RCC_OscConfig+0x63c>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f003 030c 	and.w	r3, r3, #12
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00c      	beq.n	80061e0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80061c6:	4bcd      	ldr	r3, [pc, #820]	; (80064fc <HAL_RCC_OscConfig+0x63c>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f003 030c 	and.w	r3, r3, #12
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d16d      	bne.n	80062ae <HAL_RCC_OscConfig+0x3ee>
 80061d2:	4bca      	ldr	r3, [pc, #808]	; (80064fc <HAL_RCC_OscConfig+0x63c>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80061da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061de:	d166      	bne.n	80062ae <HAL_RCC_OscConfig+0x3ee>
 80061e0:	2302      	movs	r3, #2
 80061e2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80061ea:	fa93 f3a3 	rbit	r3, r3
 80061ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80061f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061f6:	fab3 f383 	clz	r3, r3
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	f043 0301 	orr.w	r3, r3, #1
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d102      	bne.n	8006210 <HAL_RCC_OscConfig+0x350>
 800620a:	4bbc      	ldr	r3, [pc, #752]	; (80064fc <HAL_RCC_OscConfig+0x63c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	e013      	b.n	8006238 <HAL_RCC_OscConfig+0x378>
 8006210:	2302      	movs	r3, #2
 8006212:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006216:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800621a:	fa93 f3a3 	rbit	r3, r3
 800621e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006222:	2302      	movs	r3, #2
 8006224:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006228:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800622c:	fa93 f3a3 	rbit	r3, r3
 8006230:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006234:	4bb1      	ldr	r3, [pc, #708]	; (80064fc <HAL_RCC_OscConfig+0x63c>)
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	2202      	movs	r2, #2
 800623a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800623e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8006242:	fa92 f2a2 	rbit	r2, r2
 8006246:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800624a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800624e:	fab2 f282 	clz	r2, r2
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	f042 0220 	orr.w	r2, r2, #32
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	f002 021f 	and.w	r2, r2, #31
 800625e:	2101      	movs	r1, #1
 8006260:	fa01 f202 	lsl.w	r2, r1, r2
 8006264:	4013      	ands	r3, r2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d007      	beq.n	800627a <HAL_RCC_OscConfig+0x3ba>
 800626a:	1d3b      	adds	r3, r7, #4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d002      	beq.n	800627a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	f000 bd31 	b.w	8006cdc <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800627a:	4ba0      	ldr	r3, [pc, #640]	; (80064fc <HAL_RCC_OscConfig+0x63c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006282:	1d3b      	adds	r3, r7, #4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	21f8      	movs	r1, #248	; 0xf8
 800628a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006292:	fa91 f1a1 	rbit	r1, r1
 8006296:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800629a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800629e:	fab1 f181 	clz	r1, r1
 80062a2:	b2c9      	uxtb	r1, r1
 80062a4:	408b      	lsls	r3, r1
 80062a6:	4995      	ldr	r1, [pc, #596]	; (80064fc <HAL_RCC_OscConfig+0x63c>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ac:	e0f5      	b.n	800649a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062ae:	1d3b      	adds	r3, r7, #4
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 8085 	beq.w	80063c4 <HAL_RCC_OscConfig+0x504>
 80062ba:	2301      	movs	r3, #1
 80062bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80062c4:	fa93 f3a3 	rbit	r3, r3
 80062c8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80062cc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062d0:	fab3 f383 	clz	r3, r3
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	461a      	mov	r2, r3
 80062e2:	2301      	movs	r3, #1
 80062e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e6:	f7fd f857 	bl	8003398 <HAL_GetTick>
 80062ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ee:	e00a      	b.n	8006306 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062f0:	f7fd f852 	bl	8003398 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d902      	bls.n	8006306 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	f000 bceb 	b.w	8006cdc <HAL_RCC_OscConfig+0xe1c>
 8006306:	2302      	movs	r3, #2
 8006308:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800630c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006310:	fa93 f3a3 	rbit	r3, r3
 8006314:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8006318:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800631c:	fab3 f383 	clz	r3, r3
 8006320:	b2db      	uxtb	r3, r3
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	b2db      	uxtb	r3, r3
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	d102      	bne.n	8006336 <HAL_RCC_OscConfig+0x476>
 8006330:	4b72      	ldr	r3, [pc, #456]	; (80064fc <HAL_RCC_OscConfig+0x63c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	e013      	b.n	800635e <HAL_RCC_OscConfig+0x49e>
 8006336:	2302      	movs	r3, #2
 8006338:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006340:	fa93 f3a3 	rbit	r3, r3
 8006344:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006348:	2302      	movs	r3, #2
 800634a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800634e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006352:	fa93 f3a3 	rbit	r3, r3
 8006356:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800635a:	4b68      	ldr	r3, [pc, #416]	; (80064fc <HAL_RCC_OscConfig+0x63c>)
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	2202      	movs	r2, #2
 8006360:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006364:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006368:	fa92 f2a2 	rbit	r2, r2
 800636c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8006370:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006374:	fab2 f282 	clz	r2, r2
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	f042 0220 	orr.w	r2, r2, #32
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	f002 021f 	and.w	r2, r2, #31
 8006384:	2101      	movs	r1, #1
 8006386:	fa01 f202 	lsl.w	r2, r1, r2
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0af      	beq.n	80062f0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006390:	4b5a      	ldr	r3, [pc, #360]	; (80064fc <HAL_RCC_OscConfig+0x63c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006398:	1d3b      	adds	r3, r7, #4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	21f8      	movs	r1, #248	; 0xf8
 80063a0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80063a8:	fa91 f1a1 	rbit	r1, r1
 80063ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80063b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80063b4:	fab1 f181 	clz	r1, r1
 80063b8:	b2c9      	uxtb	r1, r1
 80063ba:	408b      	lsls	r3, r1
 80063bc:	494f      	ldr	r1, [pc, #316]	; (80064fc <HAL_RCC_OscConfig+0x63c>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	600b      	str	r3, [r1, #0]
 80063c2:	e06a      	b.n	800649a <HAL_RCC_OscConfig+0x5da>
 80063c4:	2301      	movs	r3, #1
 80063c6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80063ce:	fa93 f3a3 	rbit	r3, r3
 80063d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80063d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063da:	fab3 f383 	clz	r3, r3
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80063e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	461a      	mov	r2, r3
 80063ec:	2300      	movs	r3, #0
 80063ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f0:	f7fc ffd2 	bl	8003398 <HAL_GetTick>
 80063f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063f8:	e00a      	b.n	8006410 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063fa:	f7fc ffcd 	bl	8003398 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d902      	bls.n	8006410 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	f000 bc66 	b.w	8006cdc <HAL_RCC_OscConfig+0xe1c>
 8006410:	2302      	movs	r3, #2
 8006412:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006416:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800641a:	fa93 f3a3 	rbit	r3, r3
 800641e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8006422:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006426:	fab3 f383 	clz	r3, r3
 800642a:	b2db      	uxtb	r3, r3
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b01      	cmp	r3, #1
 8006438:	d102      	bne.n	8006440 <HAL_RCC_OscConfig+0x580>
 800643a:	4b30      	ldr	r3, [pc, #192]	; (80064fc <HAL_RCC_OscConfig+0x63c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	e013      	b.n	8006468 <HAL_RCC_OscConfig+0x5a8>
 8006440:	2302      	movs	r3, #2
 8006442:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800644a:	fa93 f3a3 	rbit	r3, r3
 800644e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006452:	2302      	movs	r3, #2
 8006454:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006458:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800645c:	fa93 f3a3 	rbit	r3, r3
 8006460:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006464:	4b25      	ldr	r3, [pc, #148]	; (80064fc <HAL_RCC_OscConfig+0x63c>)
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	2202      	movs	r2, #2
 800646a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800646e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006472:	fa92 f2a2 	rbit	r2, r2
 8006476:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800647a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800647e:	fab2 f282 	clz	r2, r2
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	f042 0220 	orr.w	r2, r2, #32
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	f002 021f 	and.w	r2, r2, #31
 800648e:	2101      	movs	r1, #1
 8006490:	fa01 f202 	lsl.w	r2, r1, r2
 8006494:	4013      	ands	r3, r2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1af      	bne.n	80063fa <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800649a:	1d3b      	adds	r3, r7, #4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 80da 	beq.w	800665e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064aa:	1d3b      	adds	r3, r7, #4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d069      	beq.n	8006588 <HAL_RCC_OscConfig+0x6c8>
 80064b4:	2301      	movs	r3, #1
 80064b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064be:	fa93 f3a3 	rbit	r3, r3
 80064c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80064c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ca:	fab3 f383 	clz	r3, r3
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <HAL_RCC_OscConfig+0x640>)
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	461a      	mov	r2, r3
 80064da:	2301      	movs	r3, #1
 80064dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064de:	f7fc ff5b 	bl	8003398 <HAL_GetTick>
 80064e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064e6:	e00d      	b.n	8006504 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064e8:	f7fc ff56 	bl	8003398 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d905      	bls.n	8006504 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e3ef      	b.n	8006cdc <HAL_RCC_OscConfig+0xe1c>
 80064fc:	40021000 	.word	0x40021000
 8006500:	10908120 	.word	0x10908120
 8006504:	2302      	movs	r3, #2
 8006506:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800650e:	fa93 f2a3 	rbit	r2, r3
 8006512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800651c:	2202      	movs	r2, #2
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	fa93 f2a3 	rbit	r2, r3
 800652a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006534:	2202      	movs	r2, #2
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	fa93 f2a3 	rbit	r2, r3
 8006542:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006546:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006548:	4ba4      	ldr	r3, [pc, #656]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 800654a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800654c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006550:	2102      	movs	r1, #2
 8006552:	6019      	str	r1, [r3, #0]
 8006554:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	fa93 f1a3 	rbit	r1, r3
 800655e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006562:	6019      	str	r1, [r3, #0]
  return result;
 8006564:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	fab3 f383 	clz	r3, r3
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2101      	movs	r1, #1
 800657c:	fa01 f303 	lsl.w	r3, r1, r3
 8006580:	4013      	ands	r3, r2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0b0      	beq.n	80064e8 <HAL_RCC_OscConfig+0x628>
 8006586:	e06a      	b.n	800665e <HAL_RCC_OscConfig+0x79e>
 8006588:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800658c:	2201      	movs	r2, #1
 800658e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006590:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	fa93 f2a3 	rbit	r2, r3
 800659a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800659e:	601a      	str	r2, [r3, #0]
  return result;
 80065a0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80065a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065a6:	fab3 f383 	clz	r3, r3
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	4b8c      	ldr	r3, [pc, #560]	; (80067e0 <HAL_RCC_OscConfig+0x920>)
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	461a      	mov	r2, r3
 80065b6:	2300      	movs	r3, #0
 80065b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ba:	f7fc feed 	bl	8003398 <HAL_GetTick>
 80065be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065c2:	e009      	b.n	80065d8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065c4:	f7fc fee8 	bl	8003398 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e381      	b.n	8006cdc <HAL_RCC_OscConfig+0xe1c>
 80065d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80065dc:	2202      	movs	r2, #2
 80065de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	fa93 f2a3 	rbit	r2, r3
 80065ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80065f4:	2202      	movs	r2, #2
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	fa93 f2a3 	rbit	r2, r3
 8006602:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800660c:	2202      	movs	r2, #2
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	fa93 f2a3 	rbit	r2, r3
 800661a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800661e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006620:	4b6e      	ldr	r3, [pc, #440]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 8006622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006624:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006628:	2102      	movs	r1, #2
 800662a:	6019      	str	r1, [r3, #0]
 800662c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	fa93 f1a3 	rbit	r1, r3
 8006636:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800663a:	6019      	str	r1, [r3, #0]
  return result;
 800663c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	fab3 f383 	clz	r3, r3
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800664c:	b2db      	uxtb	r3, r3
 800664e:	f003 031f 	and.w	r3, r3, #31
 8006652:	2101      	movs	r1, #1
 8006654:	fa01 f303 	lsl.w	r3, r1, r3
 8006658:	4013      	ands	r3, r2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1b2      	bne.n	80065c4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800665e:	1d3b      	adds	r3, r7, #4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 8157 	beq.w	800691c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800666e:	2300      	movs	r3, #0
 8006670:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006674:	4b59      	ldr	r3, [pc, #356]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d112      	bne.n	80066a6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006680:	4b56      	ldr	r3, [pc, #344]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	4a55      	ldr	r2, [pc, #340]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 8006686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800668a:	61d3      	str	r3, [r2, #28]
 800668c:	4b53      	ldr	r3, [pc, #332]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006694:	f107 030c 	add.w	r3, r7, #12
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	f107 030c 	add.w	r3, r7, #12
 800669e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a6:	4b4f      	ldr	r3, [pc, #316]	; (80067e4 <HAL_RCC_OscConfig+0x924>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d11a      	bne.n	80066e8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066b2:	4b4c      	ldr	r3, [pc, #304]	; (80067e4 <HAL_RCC_OscConfig+0x924>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a4b      	ldr	r2, [pc, #300]	; (80067e4 <HAL_RCC_OscConfig+0x924>)
 80066b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066be:	f7fc fe6b 	bl	8003398 <HAL_GetTick>
 80066c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c6:	e009      	b.n	80066dc <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c8:	f7fc fe66 	bl	8003398 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b64      	cmp	r3, #100	; 0x64
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e2ff      	b.n	8006cdc <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066dc:	4b41      	ldr	r3, [pc, #260]	; (80067e4 <HAL_RCC_OscConfig+0x924>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0ef      	beq.n	80066c8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066e8:	1d3b      	adds	r3, r7, #4
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d106      	bne.n	8006700 <HAL_RCC_OscConfig+0x840>
 80066f2:	4b3a      	ldr	r3, [pc, #232]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	4a39      	ldr	r2, [pc, #228]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 80066f8:	f043 0301 	orr.w	r3, r3, #1
 80066fc:	6213      	str	r3, [r2, #32]
 80066fe:	e02f      	b.n	8006760 <HAL_RCC_OscConfig+0x8a0>
 8006700:	1d3b      	adds	r3, r7, #4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10c      	bne.n	8006724 <HAL_RCC_OscConfig+0x864>
 800670a:	4b34      	ldr	r3, [pc, #208]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	4a33      	ldr	r2, [pc, #204]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	6213      	str	r3, [r2, #32]
 8006716:	4b31      	ldr	r3, [pc, #196]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	4a30      	ldr	r2, [pc, #192]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 800671c:	f023 0304 	bic.w	r3, r3, #4
 8006720:	6213      	str	r3, [r2, #32]
 8006722:	e01d      	b.n	8006760 <HAL_RCC_OscConfig+0x8a0>
 8006724:	1d3b      	adds	r3, r7, #4
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2b05      	cmp	r3, #5
 800672c:	d10c      	bne.n	8006748 <HAL_RCC_OscConfig+0x888>
 800672e:	4b2b      	ldr	r3, [pc, #172]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	4a2a      	ldr	r2, [pc, #168]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 8006734:	f043 0304 	orr.w	r3, r3, #4
 8006738:	6213      	str	r3, [r2, #32]
 800673a:	4b28      	ldr	r3, [pc, #160]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	4a27      	ldr	r2, [pc, #156]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 8006740:	f043 0301 	orr.w	r3, r3, #1
 8006744:	6213      	str	r3, [r2, #32]
 8006746:	e00b      	b.n	8006760 <HAL_RCC_OscConfig+0x8a0>
 8006748:	4b24      	ldr	r3, [pc, #144]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	4a23      	ldr	r2, [pc, #140]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 800674e:	f023 0301 	bic.w	r3, r3, #1
 8006752:	6213      	str	r3, [r2, #32]
 8006754:	4b21      	ldr	r3, [pc, #132]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	4a20      	ldr	r2, [pc, #128]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 800675a:	f023 0304 	bic.w	r3, r3, #4
 800675e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006760:	1d3b      	adds	r3, r7, #4
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d06a      	beq.n	8006840 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800676a:	f7fc fe15 	bl	8003398 <HAL_GetTick>
 800676e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006772:	e00b      	b.n	800678c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006774:	f7fc fe10 	bl	8003398 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	f241 3288 	movw	r2, #5000	; 0x1388
 8006784:	4293      	cmp	r3, r2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e2a7      	b.n	8006cdc <HAL_RCC_OscConfig+0xe1c>
 800678c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006790:	2202      	movs	r2, #2
 8006792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006794:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	fa93 f2a3 	rbit	r2, r3
 800679e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80067a8:	2202      	movs	r2, #2
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	fa93 f2a3 	rbit	r2, r3
 80067b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80067ba:	601a      	str	r2, [r3, #0]
  return result;
 80067bc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80067c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c2:	fab3 f383 	clz	r3, r3
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	095b      	lsrs	r3, r3, #5
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	f043 0302 	orr.w	r3, r3, #2
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d108      	bne.n	80067e8 <HAL_RCC_OscConfig+0x928>
 80067d6:	4b01      	ldr	r3, [pc, #4]	; (80067dc <HAL_RCC_OscConfig+0x91c>)
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	e013      	b.n	8006804 <HAL_RCC_OscConfig+0x944>
 80067dc:	40021000 	.word	0x40021000
 80067e0:	10908120 	.word	0x10908120
 80067e4:	40007000 	.word	0x40007000
 80067e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80067ec:	2202      	movs	r2, #2
 80067ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	fa93 f2a3 	rbit	r2, r3
 80067fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	4bc0      	ldr	r3, [pc, #768]	; (8006b04 <HAL_RCC_OscConfig+0xc44>)
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006808:	2102      	movs	r1, #2
 800680a:	6011      	str	r1, [r2, #0]
 800680c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	fa92 f1a2 	rbit	r1, r2
 8006816:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800681a:	6011      	str	r1, [r2, #0]
  return result;
 800681c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	fab2 f282 	clz	r2, r2
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	f002 021f 	and.w	r2, r2, #31
 8006832:	2101      	movs	r1, #1
 8006834:	fa01 f202 	lsl.w	r2, r1, r2
 8006838:	4013      	ands	r3, r2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d09a      	beq.n	8006774 <HAL_RCC_OscConfig+0x8b4>
 800683e:	e063      	b.n	8006908 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006840:	f7fc fdaa 	bl	8003398 <HAL_GetTick>
 8006844:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006848:	e00b      	b.n	8006862 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800684a:	f7fc fda5 	bl	8003398 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	f241 3288 	movw	r2, #5000	; 0x1388
 800685a:	4293      	cmp	r3, r2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e23c      	b.n	8006cdc <HAL_RCC_OscConfig+0xe1c>
 8006862:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006866:	2202      	movs	r2, #2
 8006868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800686a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	fa93 f2a3 	rbit	r2, r3
 8006874:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800687e:	2202      	movs	r2, #2
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	fa93 f2a3 	rbit	r2, r3
 800688c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006890:	601a      	str	r2, [r3, #0]
  return result;
 8006892:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006896:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006898:	fab3 f383 	clz	r3, r3
 800689c:	b2db      	uxtb	r3, r3
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	f043 0302 	orr.w	r3, r3, #2
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d102      	bne.n	80068b2 <HAL_RCC_OscConfig+0x9f2>
 80068ac:	4b95      	ldr	r3, [pc, #596]	; (8006b04 <HAL_RCC_OscConfig+0xc44>)
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	e00d      	b.n	80068ce <HAL_RCC_OscConfig+0xa0e>
 80068b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80068b6:	2202      	movs	r2, #2
 80068b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	fa93 f2a3 	rbit	r2, r3
 80068c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	4b8e      	ldr	r3, [pc, #568]	; (8006b04 <HAL_RCC_OscConfig+0xc44>)
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80068d2:	2102      	movs	r1, #2
 80068d4:	6011      	str	r1, [r2, #0]
 80068d6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	fa92 f1a2 	rbit	r1, r2
 80068e0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80068e4:	6011      	str	r1, [r2, #0]
  return result;
 80068e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	fab2 f282 	clz	r2, r2
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	f002 021f 	and.w	r2, r2, #31
 80068fc:	2101      	movs	r1, #1
 80068fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006902:	4013      	ands	r3, r2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1a0      	bne.n	800684a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006908:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800690c:	2b01      	cmp	r3, #1
 800690e:	d105      	bne.n	800691c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006910:	4b7c      	ldr	r3, [pc, #496]	; (8006b04 <HAL_RCC_OscConfig+0xc44>)
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	4a7b      	ldr	r2, [pc, #492]	; (8006b04 <HAL_RCC_OscConfig+0xc44>)
 8006916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800691a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800691c:	1d3b      	adds	r3, r7, #4
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 81d9 	beq.w	8006cda <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006928:	4b76      	ldr	r3, [pc, #472]	; (8006b04 <HAL_RCC_OscConfig+0xc44>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f003 030c 	and.w	r3, r3, #12
 8006930:	2b08      	cmp	r3, #8
 8006932:	f000 81a6 	beq.w	8006c82 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006936:	1d3b      	adds	r3, r7, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	2b02      	cmp	r3, #2
 800693e:	f040 811e 	bne.w	8006b7e <HAL_RCC_OscConfig+0xcbe>
 8006942:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006946:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800694a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800694c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	fa93 f2a3 	rbit	r2, r3
 8006956:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800695a:	601a      	str	r2, [r3, #0]
  return result;
 800695c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006960:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006962:	fab3 f383 	clz	r3, r3
 8006966:	b2db      	uxtb	r3, r3
 8006968:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800696c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	461a      	mov	r2, r3
 8006974:	2300      	movs	r3, #0
 8006976:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006978:	f7fc fd0e 	bl	8003398 <HAL_GetTick>
 800697c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006980:	e009      	b.n	8006996 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006982:	f7fc fd09 	bl	8003398 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e1a2      	b.n	8006cdc <HAL_RCC_OscConfig+0xe1c>
 8006996:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800699a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800699e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	fa93 f2a3 	rbit	r2, r3
 80069aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80069ae:	601a      	str	r2, [r3, #0]
  return result;
 80069b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80069b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069b6:	fab3 f383 	clz	r3, r3
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d102      	bne.n	80069d0 <HAL_RCC_OscConfig+0xb10>
 80069ca:	4b4e      	ldr	r3, [pc, #312]	; (8006b04 <HAL_RCC_OscConfig+0xc44>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	e01b      	b.n	8006a08 <HAL_RCC_OscConfig+0xb48>
 80069d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80069d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	fa93 f2a3 	rbit	r2, r3
 80069e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80069ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	fa93 f2a3 	rbit	r2, r3
 80069fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	4b3f      	ldr	r3, [pc, #252]	; (8006b04 <HAL_RCC_OscConfig+0xc44>)
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006a0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006a10:	6011      	str	r1, [r2, #0]
 8006a12:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	fa92 f1a2 	rbit	r1, r2
 8006a1c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006a20:	6011      	str	r1, [r2, #0]
  return result;
 8006a22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	fab2 f282 	clz	r2, r2
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	f042 0220 	orr.w	r2, r2, #32
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	f002 021f 	and.w	r2, r2, #31
 8006a38:	2101      	movs	r1, #1
 8006a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a3e:	4013      	ands	r3, r2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d19e      	bne.n	8006982 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a44:	4b2f      	ldr	r3, [pc, #188]	; (8006b04 <HAL_RCC_OscConfig+0xc44>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	f023 020f 	bic.w	r2, r3, #15
 8006a4c:	1d3b      	adds	r3, r7, #4
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	492c      	ldr	r1, [pc, #176]	; (8006b04 <HAL_RCC_OscConfig+0xc44>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006a58:	4b2a      	ldr	r3, [pc, #168]	; (8006b04 <HAL_RCC_OscConfig+0xc44>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8006a60:	1d3b      	adds	r3, r7, #4
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6a19      	ldr	r1, [r3, #32]
 8006a66:	1d3b      	adds	r3, r7, #4
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	430b      	orrs	r3, r1
 8006a6e:	4925      	ldr	r1, [pc, #148]	; (8006b04 <HAL_RCC_OscConfig+0xc44>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	604b      	str	r3, [r1, #4]
 8006a74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006a78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	fa93 f2a3 	rbit	r2, r3
 8006a88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006a8c:	601a      	str	r2, [r3, #0]
  return result;
 8006a8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006a92:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a94:	fab3 f383 	clz	r3, r3
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006a9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aaa:	f7fc fc75 	bl	8003398 <HAL_GetTick>
 8006aae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ab2:	e009      	b.n	8006ac8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ab4:	f7fc fc70 	bl	8003398 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e109      	b.n	8006cdc <HAL_RCC_OscConfig+0xe1c>
 8006ac8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	fa93 f2a3 	rbit	r2, r3
 8006adc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ae0:	601a      	str	r2, [r3, #0]
  return result;
 8006ae2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006ae6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ae8:	fab3 f383 	clz	r3, r3
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d105      	bne.n	8006b08 <HAL_RCC_OscConfig+0xc48>
 8006afc:	4b01      	ldr	r3, [pc, #4]	; (8006b04 <HAL_RCC_OscConfig+0xc44>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	e01e      	b.n	8006b40 <HAL_RCC_OscConfig+0xc80>
 8006b02:	bf00      	nop
 8006b04:	40021000 	.word	0x40021000
 8006b08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	fa93 f2a3 	rbit	r2, r3
 8006b1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	fa93 f2a3 	rbit	r2, r3
 8006b36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	4b6a      	ldr	r3, [pc, #424]	; (8006ce8 <HAL_RCC_OscConfig+0xe28>)
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006b44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006b48:	6011      	str	r1, [r2, #0]
 8006b4a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	fa92 f1a2 	rbit	r1, r2
 8006b54:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006b58:	6011      	str	r1, [r2, #0]
  return result;
 8006b5a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	fab2 f282 	clz	r2, r2
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	f042 0220 	orr.w	r2, r2, #32
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	f002 021f 	and.w	r2, r2, #31
 8006b70:	2101      	movs	r1, #1
 8006b72:	fa01 f202 	lsl.w	r2, r1, r2
 8006b76:	4013      	ands	r3, r2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d09b      	beq.n	8006ab4 <HAL_RCC_OscConfig+0xbf4>
 8006b7c:	e0ad      	b.n	8006cda <HAL_RCC_OscConfig+0xe1a>
 8006b7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006b82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	fa93 f2a3 	rbit	r2, r3
 8006b92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b96:	601a      	str	r2, [r3, #0]
  return result;
 8006b98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b9e:	fab3 f383 	clz	r3, r3
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006ba8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	461a      	mov	r2, r3
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb4:	f7fc fbf0 	bl	8003398 <HAL_GetTick>
 8006bb8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bbc:	e009      	b.n	8006bd2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bbe:	f7fc fbeb 	bl	8003398 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e084      	b.n	8006cdc <HAL_RCC_OscConfig+0xe1c>
 8006bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	fa93 f2a3 	rbit	r2, r3
 8006be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bea:	601a      	str	r2, [r3, #0]
  return result;
 8006bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bf2:	fab3 f383 	clz	r3, r3
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d102      	bne.n	8006c0c <HAL_RCC_OscConfig+0xd4c>
 8006c06:	4b38      	ldr	r3, [pc, #224]	; (8006ce8 <HAL_RCC_OscConfig+0xe28>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	e01b      	b.n	8006c44 <HAL_RCC_OscConfig+0xd84>
 8006c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	fa93 f2a3 	rbit	r2, r3
 8006c20:	f107 0320 	add.w	r3, r7, #32
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	f107 031c 	add.w	r3, r7, #28
 8006c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	f107 031c 	add.w	r3, r7, #28
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	fa93 f2a3 	rbit	r2, r3
 8006c3a:	f107 0318 	add.w	r3, r7, #24
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	4b29      	ldr	r3, [pc, #164]	; (8006ce8 <HAL_RCC_OscConfig+0xe28>)
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	f107 0214 	add.w	r2, r7, #20
 8006c48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006c4c:	6011      	str	r1, [r2, #0]
 8006c4e:	f107 0214 	add.w	r2, r7, #20
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	fa92 f1a2 	rbit	r1, r2
 8006c58:	f107 0210 	add.w	r2, r7, #16
 8006c5c:	6011      	str	r1, [r2, #0]
  return result;
 8006c5e:	f107 0210 	add.w	r2, r7, #16
 8006c62:	6812      	ldr	r2, [r2, #0]
 8006c64:	fab2 f282 	clz	r2, r2
 8006c68:	b2d2      	uxtb	r2, r2
 8006c6a:	f042 0220 	orr.w	r2, r2, #32
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	f002 021f 	and.w	r2, r2, #31
 8006c74:	2101      	movs	r1, #1
 8006c76:	fa01 f202 	lsl.w	r2, r1, r2
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d19e      	bne.n	8006bbe <HAL_RCC_OscConfig+0xcfe>
 8006c80:	e02b      	b.n	8006cda <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c82:	1d3b      	adds	r3, r7, #4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d101      	bne.n	8006c90 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e025      	b.n	8006cdc <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c90:	4b15      	ldr	r3, [pc, #84]	; (8006ce8 <HAL_RCC_OscConfig+0xe28>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006c98:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <HAL_RCC_OscConfig+0xe28>)
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006ca0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ca4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006ca8:	1d3b      	adds	r3, r7, #4
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d111      	bne.n	8006cd6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006cb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006cb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006cba:	1d3b      	adds	r3, r7, #4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d108      	bne.n	8006cd6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006cc8:	f003 020f 	and.w	r2, r3, #15
 8006ccc:	1d3b      	adds	r3, r7, #4
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d001      	beq.n	8006cda <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	40021000 	.word	0x40021000

08006cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b09e      	sub	sp, #120	; 0x78
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e162      	b.n	8006fca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d04:	4b90      	ldr	r3, [pc, #576]	; (8006f48 <HAL_RCC_ClockConfig+0x25c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d910      	bls.n	8006d34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d12:	4b8d      	ldr	r3, [pc, #564]	; (8006f48 <HAL_RCC_ClockConfig+0x25c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f023 0207 	bic.w	r2, r3, #7
 8006d1a:	498b      	ldr	r1, [pc, #556]	; (8006f48 <HAL_RCC_ClockConfig+0x25c>)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d22:	4b89      	ldr	r3, [pc, #548]	; (8006f48 <HAL_RCC_ClockConfig+0x25c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d001      	beq.n	8006d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e14a      	b.n	8006fca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d40:	4b82      	ldr	r3, [pc, #520]	; (8006f4c <HAL_RCC_ClockConfig+0x260>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	497f      	ldr	r1, [pc, #508]	; (8006f4c <HAL_RCC_ClockConfig+0x260>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80dc 	beq.w	8006f18 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d13c      	bne.n	8006de2 <HAL_RCC_ClockConfig+0xf6>
 8006d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d70:	fa93 f3a3 	rbit	r3, r3
 8006d74:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d78:	fab3 f383 	clz	r3, r3
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	095b      	lsrs	r3, r3, #5
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d102      	bne.n	8006d92 <HAL_RCC_ClockConfig+0xa6>
 8006d8c:	4b6f      	ldr	r3, [pc, #444]	; (8006f4c <HAL_RCC_ClockConfig+0x260>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	e00f      	b.n	8006db2 <HAL_RCC_ClockConfig+0xc6>
 8006d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d9a:	fa93 f3a3 	rbit	r3, r3
 8006d9e:	667b      	str	r3, [r7, #100]	; 0x64
 8006da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006da4:	663b      	str	r3, [r7, #96]	; 0x60
 8006da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006da8:	fa93 f3a3 	rbit	r3, r3
 8006dac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dae:	4b67      	ldr	r3, [pc, #412]	; (8006f4c <HAL_RCC_ClockConfig+0x260>)
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006db6:	65ba      	str	r2, [r7, #88]	; 0x58
 8006db8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dba:	fa92 f2a2 	rbit	r2, r2
 8006dbe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006dc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dc2:	fab2 f282 	clz	r2, r2
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	f042 0220 	orr.w	r2, r2, #32
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	f002 021f 	and.w	r2, r2, #31
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8006dd8:	4013      	ands	r3, r2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d17b      	bne.n	8006ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e0f3      	b.n	8006fca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d13c      	bne.n	8006e64 <HAL_RCC_ClockConfig+0x178>
 8006dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df2:	fa93 f3a3 	rbit	r3, r3
 8006df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dfa:	fab3 f383 	clz	r3, r3
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	095b      	lsrs	r3, r3, #5
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	f043 0301 	orr.w	r3, r3, #1
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d102      	bne.n	8006e14 <HAL_RCC_ClockConfig+0x128>
 8006e0e:	4b4f      	ldr	r3, [pc, #316]	; (8006f4c <HAL_RCC_ClockConfig+0x260>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	e00f      	b.n	8006e34 <HAL_RCC_ClockConfig+0x148>
 8006e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e1c:	fa93 f3a3 	rbit	r3, r3
 8006e20:	647b      	str	r3, [r7, #68]	; 0x44
 8006e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e26:	643b      	str	r3, [r7, #64]	; 0x40
 8006e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e2a:	fa93 f3a3 	rbit	r3, r3
 8006e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e30:	4b46      	ldr	r3, [pc, #280]	; (8006f4c <HAL_RCC_ClockConfig+0x260>)
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e38:	63ba      	str	r2, [r7, #56]	; 0x38
 8006e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e3c:	fa92 f2a2 	rbit	r2, r2
 8006e40:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e44:	fab2 f282 	clz	r2, r2
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	f042 0220 	orr.w	r2, r2, #32
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	f002 021f 	and.w	r2, r2, #31
 8006e54:	2101      	movs	r1, #1
 8006e56:	fa01 f202 	lsl.w	r2, r1, r2
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d13a      	bne.n	8006ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0b2      	b.n	8006fca <HAL_RCC_ClockConfig+0x2de>
 8006e64:	2302      	movs	r3, #2
 8006e66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	fa93 f3a3 	rbit	r3, r3
 8006e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e72:	fab3 f383 	clz	r3, r3
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	095b      	lsrs	r3, r3, #5
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f043 0301 	orr.w	r3, r3, #1
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d102      	bne.n	8006e8c <HAL_RCC_ClockConfig+0x1a0>
 8006e86:	4b31      	ldr	r3, [pc, #196]	; (8006f4c <HAL_RCC_ClockConfig+0x260>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	e00d      	b.n	8006ea8 <HAL_RCC_ClockConfig+0x1bc>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	fa93 f3a3 	rbit	r3, r3
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
 8006e98:	2302      	movs	r3, #2
 8006e9a:	623b      	str	r3, [r7, #32]
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	fa93 f3a3 	rbit	r3, r3
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	4b29      	ldr	r3, [pc, #164]	; (8006f4c <HAL_RCC_ClockConfig+0x260>)
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	61ba      	str	r2, [r7, #24]
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	fa92 f2a2 	rbit	r2, r2
 8006eb2:	617a      	str	r2, [r7, #20]
  return result;
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	fab2 f282 	clz	r2, r2
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	f042 0220 	orr.w	r2, r2, #32
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	f002 021f 	and.w	r2, r2, #31
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8006ecc:	4013      	ands	r3, r2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e079      	b.n	8006fca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ed6:	4b1d      	ldr	r3, [pc, #116]	; (8006f4c <HAL_RCC_ClockConfig+0x260>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f023 0203 	bic.w	r2, r3, #3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	491a      	ldr	r1, [pc, #104]	; (8006f4c <HAL_RCC_ClockConfig+0x260>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ee8:	f7fc fa56 	bl	8003398 <HAL_GetTick>
 8006eec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eee:	e00a      	b.n	8006f06 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ef0:	f7fc fa52 	bl	8003398 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e061      	b.n	8006fca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f06:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <HAL_RCC_ClockConfig+0x260>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f003 020c 	and.w	r2, r3, #12
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d1eb      	bne.n	8006ef0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f18:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <HAL_RCC_ClockConfig+0x25c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d214      	bcs.n	8006f50 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f26:	4b08      	ldr	r3, [pc, #32]	; (8006f48 <HAL_RCC_ClockConfig+0x25c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f023 0207 	bic.w	r2, r3, #7
 8006f2e:	4906      	ldr	r1, [pc, #24]	; (8006f48 <HAL_RCC_ClockConfig+0x25c>)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f36:	4b04      	ldr	r3, [pc, #16]	; (8006f48 <HAL_RCC_ClockConfig+0x25c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0307 	and.w	r3, r3, #7
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d005      	beq.n	8006f50 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e040      	b.n	8006fca <HAL_RCC_ClockConfig+0x2de>
 8006f48:	40022000 	.word	0x40022000
 8006f4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d008      	beq.n	8006f6e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f5c:	4b1d      	ldr	r3, [pc, #116]	; (8006fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	491a      	ldr	r1, [pc, #104]	; (8006fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f7a:	4b16      	ldr	r3, [pc, #88]	; (8006fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	00db      	lsls	r3, r3, #3
 8006f88:	4912      	ldr	r1, [pc, #72]	; (8006fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006f8e:	f000 f829 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8006f92:	4601      	mov	r1, r0
 8006f94:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f9c:	22f0      	movs	r2, #240	; 0xf0
 8006f9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	fa92 f2a2 	rbit	r2, r2
 8006fa6:	60fa      	str	r2, [r7, #12]
  return result;
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	fab2 f282 	clz	r2, r2
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	40d3      	lsrs	r3, r2
 8006fb2:	4a09      	ldr	r2, [pc, #36]	; (8006fd8 <HAL_RCC_ClockConfig+0x2ec>)
 8006fb4:	5cd3      	ldrb	r3, [r2, r3]
 8006fb6:	fa21 f303 	lsr.w	r3, r1, r3
 8006fba:	4a08      	ldr	r2, [pc, #32]	; (8006fdc <HAL_RCC_ClockConfig+0x2f0>)
 8006fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006fbe:	4b08      	ldr	r3, [pc, #32]	; (8006fe0 <HAL_RCC_ClockConfig+0x2f4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fc f9a4 	bl	8003310 <HAL_InitTick>
  
  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3778      	adds	r7, #120	; 0x78
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	08010264 	.word	0x08010264
 8006fdc:	20000004 	.word	0x20000004
 8006fe0:	20000008 	.word	0x20000008

08006fe4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b08b      	sub	sp, #44	; 0x2c
 8006fe8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	61fb      	str	r3, [r7, #28]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006ffe:	4b2a      	ldr	r3, [pc, #168]	; (80070a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	f003 030c 	and.w	r3, r3, #12
 800700a:	2b04      	cmp	r3, #4
 800700c:	d002      	beq.n	8007014 <HAL_RCC_GetSysClockFreq+0x30>
 800700e:	2b08      	cmp	r3, #8
 8007010:	d003      	beq.n	800701a <HAL_RCC_GetSysClockFreq+0x36>
 8007012:	e03f      	b.n	8007094 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007014:	4b25      	ldr	r3, [pc, #148]	; (80070ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8007016:	623b      	str	r3, [r7, #32]
      break;
 8007018:	e03f      	b.n	800709a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007020:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007024:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	fa92 f2a2 	rbit	r2, r2
 800702c:	607a      	str	r2, [r7, #4]
  return result;
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	fab2 f282 	clz	r2, r2
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	40d3      	lsrs	r3, r2
 8007038:	4a1d      	ldr	r2, [pc, #116]	; (80070b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800703a:	5cd3      	ldrb	r3, [r2, r3]
 800703c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800703e:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	220f      	movs	r2, #15
 8007048:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	fa92 f2a2 	rbit	r2, r2
 8007050:	60fa      	str	r2, [r7, #12]
  return result;
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	fab2 f282 	clz	r2, r2
 8007058:	b2d2      	uxtb	r2, r2
 800705a:	40d3      	lsrs	r3, r2
 800705c:	4a15      	ldr	r2, [pc, #84]	; (80070b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800705e:	5cd3      	ldrb	r3, [r2, r3]
 8007060:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800706c:	4a0f      	ldr	r2, [pc, #60]	; (80070ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	fbb2 f2f3 	udiv	r2, r2, r3
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	fb02 f303 	mul.w	r3, r2, r3
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
 800707c:	e007      	b.n	800708e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800707e:	4a0b      	ldr	r2, [pc, #44]	; (80070ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	fbb2 f2f3 	udiv	r2, r2, r3
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	fb02 f303 	mul.w	r3, r2, r3
 800708c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	623b      	str	r3, [r7, #32]
      break;
 8007092:	e002      	b.n	800709a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007094:	4b05      	ldr	r3, [pc, #20]	; (80070ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8007096:	623b      	str	r3, [r7, #32]
      break;
 8007098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800709a:	6a3b      	ldr	r3, [r7, #32]
}
 800709c:	4618      	mov	r0, r3
 800709e:	372c      	adds	r7, #44	; 0x2c
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	40021000 	.word	0x40021000
 80070ac:	007a1200 	.word	0x007a1200
 80070b0:	0801027c 	.word	0x0801027c
 80070b4:	0801028c 	.word	0x0801028c

080070b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070bc:	4b03      	ldr	r3, [pc, #12]	; (80070cc <HAL_RCC_GetHCLKFreq+0x14>)
 80070be:	681b      	ldr	r3, [r3, #0]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	20000004 	.word	0x20000004

080070d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80070d6:	f7ff ffef 	bl	80070b8 <HAL_RCC_GetHCLKFreq>
 80070da:	4601      	mov	r1, r0
 80070dc:	4b0b      	ldr	r3, [pc, #44]	; (800710c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80070e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	fa92 f2a2 	rbit	r2, r2
 80070f0:	603a      	str	r2, [r7, #0]
  return result;
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	fab2 f282 	clz	r2, r2
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	40d3      	lsrs	r3, r2
 80070fc:	4a04      	ldr	r2, [pc, #16]	; (8007110 <HAL_RCC_GetPCLK1Freq+0x40>)
 80070fe:	5cd3      	ldrb	r3, [r2, r3]
 8007100:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40021000 	.word	0x40021000
 8007110:	08010274 	.word	0x08010274

08007114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800711a:	f7ff ffcd 	bl	80070b8 <HAL_RCC_GetHCLKFreq>
 800711e:	4601      	mov	r1, r0
 8007120:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007128:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800712c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	fa92 f2a2 	rbit	r2, r2
 8007134:	603a      	str	r2, [r7, #0]
  return result;
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	fab2 f282 	clz	r2, r2
 800713c:	b2d2      	uxtb	r2, r2
 800713e:	40d3      	lsrs	r3, r2
 8007140:	4a04      	ldr	r2, [pc, #16]	; (8007154 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007142:	5cd3      	ldrb	r3, [r2, r3]
 8007144:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007148:	4618      	mov	r0, r3
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	40021000 	.word	0x40021000
 8007154:	08010274 	.word	0x08010274

08007158 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b092      	sub	sp, #72	; 0x48
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 80d7 	beq.w	8007324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007176:	2300      	movs	r3, #0
 8007178:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800717c:	4b4e      	ldr	r3, [pc, #312]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10e      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007188:	4b4b      	ldr	r3, [pc, #300]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	4a4a      	ldr	r2, [pc, #296]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800718e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007192:	61d3      	str	r3, [r2, #28]
 8007194:	4b48      	ldr	r3, [pc, #288]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071a6:	4b45      	ldr	r3, [pc, #276]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d118      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071b2:	4b42      	ldr	r3, [pc, #264]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a41      	ldr	r2, [pc, #260]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071be:	f7fc f8eb 	bl	8003398 <HAL_GetTick>
 80071c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c4:	e008      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071c6:	f7fc f8e7 	bl	8003398 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b64      	cmp	r3, #100	; 0x64
 80071d2:	d901      	bls.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e1d6      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d8:	4b38      	ldr	r3, [pc, #224]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0f0      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071e4:	4b34      	ldr	r3, [pc, #208]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 8084 	beq.w	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007200:	429a      	cmp	r2, r3
 8007202:	d07c      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007204:	4b2c      	ldr	r3, [pc, #176]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800720e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007212:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	fa93 f3a3 	rbit	r3, r3
 800721a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800721e:	fab3 f383 	clz	r3, r3
 8007222:	b2db      	uxtb	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	4b26      	ldr	r3, [pc, #152]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	461a      	mov	r2, r3
 800722e:	2301      	movs	r3, #1
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007236:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	fa93 f3a3 	rbit	r3, r3
 800723e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007242:	fab3 f383 	clz	r3, r3
 8007246:	b2db      	uxtb	r3, r3
 8007248:	461a      	mov	r2, r3
 800724a:	4b1d      	ldr	r3, [pc, #116]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800724c:	4413      	add	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	461a      	mov	r2, r3
 8007252:	2300      	movs	r3, #0
 8007254:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007256:	4a18      	ldr	r2, [pc, #96]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800725a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800725c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d04b      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007266:	f7fc f897 	bl	8003398 <HAL_GetTick>
 800726a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800726c:	e00a      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800726e:	f7fc f893 	bl	8003398 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	f241 3288 	movw	r2, #5000	; 0x1388
 800727c:	4293      	cmp	r3, r2
 800727e:	d901      	bls.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e180      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007284:	2302      	movs	r3, #2
 8007286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	fa93 f3a3 	rbit	r3, r3
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
 8007290:	2302      	movs	r3, #2
 8007292:	623b      	str	r3, [r7, #32]
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	fa93 f3a3 	rbit	r3, r3
 800729a:	61fb      	str	r3, [r7, #28]
  return result;
 800729c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800729e:	fab3 f383 	clz	r3, r3
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	f043 0302 	orr.w	r3, r3, #2
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d108      	bne.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80072b2:	4b01      	ldr	r3, [pc, #4]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	e00d      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80072b8:	40021000 	.word	0x40021000
 80072bc:	40007000 	.word	0x40007000
 80072c0:	10908100 	.word	0x10908100
 80072c4:	2302      	movs	r3, #2
 80072c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	fa93 f3a3 	rbit	r3, r3
 80072ce:	617b      	str	r3, [r7, #20]
 80072d0:	4ba0      	ldr	r3, [pc, #640]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	2202      	movs	r2, #2
 80072d6:	613a      	str	r2, [r7, #16]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	fa92 f2a2 	rbit	r2, r2
 80072de:	60fa      	str	r2, [r7, #12]
  return result;
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	fab2 f282 	clz	r2, r2
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	f002 021f 	and.w	r2, r2, #31
 80072f2:	2101      	movs	r1, #1
 80072f4:	fa01 f202 	lsl.w	r2, r1, r2
 80072f8:	4013      	ands	r3, r2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0b7      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80072fe:	4b95      	ldr	r3, [pc, #596]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	4992      	ldr	r1, [pc, #584]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800730c:	4313      	orrs	r3, r2
 800730e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007310:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007314:	2b01      	cmp	r3, #1
 8007316:	d105      	bne.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007318:	4b8e      	ldr	r3, [pc, #568]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	4a8d      	ldr	r2, [pc, #564]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800731e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007322:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d008      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007330:	4b88      	ldr	r3, [pc, #544]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007334:	f023 0203 	bic.w	r2, r3, #3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	4985      	ldr	r1, [pc, #532]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800733e:	4313      	orrs	r3, r2
 8007340:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d008      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800734e:	4b81      	ldr	r3, [pc, #516]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	497e      	ldr	r1, [pc, #504]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800735c:	4313      	orrs	r3, r2
 800735e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	d008      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800736c:	4b79      	ldr	r3, [pc, #484]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800736e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007370:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	4976      	ldr	r1, [pc, #472]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800737a:	4313      	orrs	r3, r2
 800737c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b00      	cmp	r3, #0
 8007388:	d008      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800738a:	4b72      	ldr	r3, [pc, #456]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800738c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738e:	f023 0210 	bic.w	r2, r3, #16
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	496f      	ldr	r1, [pc, #444]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007398:	4313      	orrs	r3, r2
 800739a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d008      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80073a8:	4b6a      	ldr	r3, [pc, #424]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b4:	4967      	ldr	r1, [pc, #412]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d008      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073c6:	4b63      	ldr	r3, [pc, #396]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80073c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ca:	f023 0220 	bic.w	r2, r3, #32
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	4960      	ldr	r1, [pc, #384]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d008      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073e4:	4b5b      	ldr	r3, [pc, #364]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80073e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	4958      	ldr	r1, [pc, #352]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0308 	and.w	r3, r3, #8
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d008      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007402:	4b54      	ldr	r3, [pc, #336]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	4951      	ldr	r1, [pc, #324]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007410:	4313      	orrs	r3, r2
 8007412:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0310 	and.w	r3, r3, #16
 800741c:	2b00      	cmp	r3, #0
 800741e:	d008      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007420:	4b4c      	ldr	r3, [pc, #304]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	4949      	ldr	r1, [pc, #292]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800742e:	4313      	orrs	r3, r2
 8007430:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800743a:	2b00      	cmp	r3, #0
 800743c:	d008      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800743e:	4b45      	ldr	r3, [pc, #276]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	4942      	ldr	r1, [pc, #264]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800744c:	4313      	orrs	r3, r2
 800744e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007458:	2b00      	cmp	r3, #0
 800745a:	d008      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800745c:	4b3d      	ldr	r3, [pc, #244]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007468:	493a      	ldr	r1, [pc, #232]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800746a:	4313      	orrs	r3, r2
 800746c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007476:	2b00      	cmp	r3, #0
 8007478:	d008      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800747a:	4b36      	ldr	r3, [pc, #216]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800747c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007486:	4933      	ldr	r1, [pc, #204]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007488:	4313      	orrs	r3, r2
 800748a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d008      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007498:	4b2e      	ldr	r3, [pc, #184]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a4:	492b      	ldr	r1, [pc, #172]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d008      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80074b6:	4b27      	ldr	r3, [pc, #156]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	4924      	ldr	r1, [pc, #144]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d008      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80074d4:	4b1f      	ldr	r3, [pc, #124]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80074d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	491c      	ldr	r1, [pc, #112]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d008      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80074f2:	4b18      	ldr	r3, [pc, #96]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80074f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fe:	4915      	ldr	r1, [pc, #84]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007500:	4313      	orrs	r3, r2
 8007502:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d008      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007510:	4b10      	ldr	r3, [pc, #64]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007514:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751c:	490d      	ldr	r1, [pc, #52]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800751e:	4313      	orrs	r3, r2
 8007520:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d008      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800752e:	4b09      	ldr	r3, [pc, #36]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753a:	4906      	ldr	r1, [pc, #24]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800753c:	4313      	orrs	r3, r2
 800753e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00c      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800754c:	4b01      	ldr	r3, [pc, #4]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	e002      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8007552:	bf00      	nop
 8007554:	40021000 	.word	0x40021000
 8007558:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007560:	490b      	ldr	r1, [pc, #44]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007562:	4313      	orrs	r3, r2
 8007564:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d008      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8007572:	4b07      	ldr	r3, [pc, #28]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757e:	4904      	ldr	r1, [pc, #16]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007580:	4313      	orrs	r3, r2
 8007582:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3748      	adds	r7, #72	; 0x48
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	40021000 	.word	0x40021000

08007594 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e084      	b.n	80076b0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d106      	bne.n	80075c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7fb f9f9 	bl	80029b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2202      	movs	r2, #2
 80075ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075dc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075e6:	d902      	bls.n	80075ee <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e002      	b.n	80075f4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80075fc:	d007      	beq.n	800760e <HAL_SPI_Init+0x7a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007606:	d002      	beq.n	800760e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10b      	bne.n	800762e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800761e:	d903      	bls.n	8007628 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	631a      	str	r2, [r3, #48]	; 0x30
 8007626:	e002      	b.n	800762e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	431a      	orrs	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	ea42 0103 	orr.w	r1, r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	f003 0204 	and.w	r2, r3, #4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	ea42 0103 	orr.w	r1, r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	430a      	orrs	r2, r1
 800768e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	69da      	ldr	r2, [r3, #28]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800769e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	4613      	mov	r3, r2
 80076c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_SPI_Transmit+0x22>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e150      	b.n	800797c <HAL_SPI_Transmit+0x2c4>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076e2:	f7fb fe59 	bl	8003398 <HAL_GetTick>
 80076e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80076e8:	88fb      	ldrh	r3, [r7, #6]
 80076ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d002      	beq.n	80076fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80076f8:	2302      	movs	r3, #2
 80076fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076fc:	e135      	b.n	800796a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <HAL_SPI_Transmit+0x52>
 8007704:	88fb      	ldrh	r3, [r7, #6]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d102      	bne.n	8007710 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800770e:	e12c      	b.n	800796a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2203      	movs	r2, #3
 8007714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	88fa      	ldrh	r2, [r7, #6]
 8007728:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	88fa      	ldrh	r2, [r7, #6]
 800772e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800775a:	d107      	bne.n	800776c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800776a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007776:	2b40      	cmp	r3, #64	; 0x40
 8007778:	d007      	beq.n	800778a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007788:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007792:	d94b      	bls.n	800782c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <HAL_SPI_Transmit+0xea>
 800779c:	8afb      	ldrh	r3, [r7, #22]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d13e      	bne.n	8007820 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	881a      	ldrh	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b2:	1c9a      	adds	r2, r3, #2
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80077c6:	e02b      	b.n	8007820 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d112      	bne.n	80077fc <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	881a      	ldrh	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	1c9a      	adds	r2, r3, #2
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077fa:	e011      	b.n	8007820 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077fc:	f7fb fdcc 	bl	8003398 <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	429a      	cmp	r2, r3
 800780a:	d803      	bhi.n	8007814 <HAL_SPI_Transmit+0x15c>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d102      	bne.n	800781a <HAL_SPI_Transmit+0x162>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d102      	bne.n	8007820 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800781e:	e0a4      	b.n	800796a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1ce      	bne.n	80077c8 <HAL_SPI_Transmit+0x110>
 800782a:	e07c      	b.n	8007926 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <HAL_SPI_Transmit+0x182>
 8007834:	8afb      	ldrh	r3, [r7, #22]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d170      	bne.n	800791c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b01      	cmp	r3, #1
 8007842:	d912      	bls.n	800786a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007848:	881a      	ldrh	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	1c9a      	adds	r2, r3, #2
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800785e:	b29b      	uxth	r3, r3
 8007860:	3b02      	subs	r3, #2
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007868:	e058      	b.n	800791c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	330c      	adds	r3, #12
 8007874:	7812      	ldrb	r2, [r2, #0]
 8007876:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007886:	b29b      	uxth	r3, r3
 8007888:	3b01      	subs	r3, #1
 800788a:	b29a      	uxth	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007890:	e044      	b.n	800791c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b02      	cmp	r3, #2
 800789e:	d12b      	bne.n	80078f8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d912      	bls.n	80078d0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	881a      	ldrh	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	1c9a      	adds	r2, r3, #2
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b02      	subs	r3, #2
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078ce:	e025      	b.n	800791c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	330c      	adds	r3, #12
 80078da:	7812      	ldrb	r2, [r2, #0]
 80078dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078f6:	e011      	b.n	800791c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078f8:	f7fb fd4e 	bl	8003398 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d803      	bhi.n	8007910 <HAL_SPI_Transmit+0x258>
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790e:	d102      	bne.n	8007916 <HAL_SPI_Transmit+0x25e>
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d102      	bne.n	800791c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	77fb      	strb	r3, [r7, #31]
          goto error;
 800791a:	e026      	b.n	800796a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1b5      	bne.n	8007892 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fb14 	bl	8007f58 <SPI_EndRxTxTransaction>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2220      	movs	r2, #32
 800793a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007944:	2300      	movs	r3, #0
 8007946:	613b      	str	r3, [r7, #16]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	613b      	str	r3, [r7, #16]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	613b      	str	r3, [r7, #16]
 8007958:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	77fb      	strb	r3, [r7, #31]
 8007966:	e000      	b.n	800796a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8007968:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800797a:	7ffb      	ldrb	r3, [r7, #31]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3720      	adds	r7, #32
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08a      	sub	sp, #40	; 0x28
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007992:	2301      	movs	r3, #1
 8007994:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d101      	bne.n	80079aa <HAL_SPI_TransmitReceive+0x26>
 80079a6:	2302      	movs	r3, #2
 80079a8:	e1fb      	b.n	8007da2 <HAL_SPI_TransmitReceive+0x41e>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079b2:	f7fb fcf1 	bl	8003398 <HAL_GetTick>
 80079b6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079be:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80079c6:	887b      	ldrh	r3, [r7, #2]
 80079c8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80079ca:	887b      	ldrh	r3, [r7, #2]
 80079cc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079ce:	7efb      	ldrb	r3, [r7, #27]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d00e      	beq.n	80079f2 <HAL_SPI_TransmitReceive+0x6e>
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079da:	d106      	bne.n	80079ea <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d102      	bne.n	80079ea <HAL_SPI_TransmitReceive+0x66>
 80079e4:	7efb      	ldrb	r3, [r7, #27]
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d003      	beq.n	80079f2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80079ea:	2302      	movs	r3, #2
 80079ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80079f0:	e1cd      	b.n	8007d8e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d005      	beq.n	8007a04 <HAL_SPI_TransmitReceive+0x80>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <HAL_SPI_TransmitReceive+0x80>
 80079fe:	887b      	ldrh	r3, [r7, #2]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d103      	bne.n	8007a0c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007a0a:	e1c0      	b.n	8007d8e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b04      	cmp	r3, #4
 8007a16:	d003      	beq.n	8007a20 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2205      	movs	r2, #5
 8007a1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	887a      	ldrh	r2, [r7, #2]
 8007a30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	887a      	ldrh	r2, [r7, #2]
 8007a38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	887a      	ldrh	r2, [r7, #2]
 8007a46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	887a      	ldrh	r2, [r7, #2]
 8007a4c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a62:	d802      	bhi.n	8007a6a <HAL_SPI_TransmitReceive+0xe6>
 8007a64:	8a3b      	ldrh	r3, [r7, #16]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d908      	bls.n	8007a7c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a78:	605a      	str	r2, [r3, #4]
 8007a7a:	e007      	b.n	8007a8c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a8a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a96:	2b40      	cmp	r3, #64	; 0x40
 8007a98:	d007      	beq.n	8007aaa <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ab2:	d97c      	bls.n	8007bae <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_SPI_TransmitReceive+0x13e>
 8007abc:	8a7b      	ldrh	r3, [r7, #18]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d169      	bne.n	8007b96 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	881a      	ldrh	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	1c9a      	adds	r2, r3, #2
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ae6:	e056      	b.n	8007b96 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d11b      	bne.n	8007b2e <HAL_SPI_TransmitReceive+0x1aa>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d016      	beq.n	8007b2e <HAL_SPI_TransmitReceive+0x1aa>
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d113      	bne.n	8007b2e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	881a      	ldrh	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b16:	1c9a      	adds	r2, r3, #2
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d11c      	bne.n	8007b76 <HAL_SPI_TransmitReceive+0x1f2>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d016      	beq.n	8007b76 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	b292      	uxth	r2, r2
 8007b54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	1c9a      	adds	r2, r3, #2
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b72:	2301      	movs	r3, #1
 8007b74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b76:	f7fb fc0f 	bl	8003398 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d807      	bhi.n	8007b96 <HAL_SPI_TransmitReceive+0x212>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8c:	d003      	beq.n	8007b96 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007b94:	e0fb      	b.n	8007d8e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1a3      	bne.n	8007ae8 <HAL_SPI_TransmitReceive+0x164>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d19d      	bne.n	8007ae8 <HAL_SPI_TransmitReceive+0x164>
 8007bac:	e0df      	b.n	8007d6e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_SPI_TransmitReceive+0x23a>
 8007bb6:	8a7b      	ldrh	r3, [r7, #18]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	f040 80cb 	bne.w	8007d54 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d912      	bls.n	8007bee <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bcc:	881a      	ldrh	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd8:	1c9a      	adds	r2, r3, #2
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	3b02      	subs	r3, #2
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bec:	e0b2      	b.n	8007d54 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	330c      	adds	r3, #12
 8007bf8:	7812      	ldrb	r2, [r2, #0]
 8007bfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c14:	e09e      	b.n	8007d54 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d134      	bne.n	8007c8e <HAL_SPI_TransmitReceive+0x30a>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d02f      	beq.n	8007c8e <HAL_SPI_TransmitReceive+0x30a>
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d12c      	bne.n	8007c8e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d912      	bls.n	8007c64 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	881a      	ldrh	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	1c9a      	adds	r2, r3, #2
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	3b02      	subs	r3, #2
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c62:	e012      	b.n	8007c8a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	7812      	ldrb	r2, [r2, #0]
 8007c70:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d148      	bne.n	8007d2e <HAL_SPI_TransmitReceive+0x3aa>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d042      	beq.n	8007d2e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d923      	bls.n	8007cfc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	b292      	uxth	r2, r2
 8007cc0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc6:	1c9a      	adds	r2, r3, #2
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	3b02      	subs	r3, #2
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d81f      	bhi.n	8007d2a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007cf8:	605a      	str	r2, [r3, #4]
 8007cfa:	e016      	b.n	8007d2a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f103 020c 	add.w	r2, r3, #12
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	7812      	ldrb	r2, [r2, #0]
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	3b01      	subs	r3, #1
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d2e:	f7fb fb33 	bl	8003398 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d803      	bhi.n	8007d46 <HAL_SPI_TransmitReceive+0x3c2>
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d44:	d102      	bne.n	8007d4c <HAL_SPI_TransmitReceive+0x3c8>
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d103      	bne.n	8007d54 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007d52:	e01c      	b.n	8007d8e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f47f af5b 	bne.w	8007c16 <HAL_SPI_TransmitReceive+0x292>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f47f af54 	bne.w	8007c16 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d6e:	69fa      	ldr	r2, [r7, #28]
 8007d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f8f0 	bl	8007f58 <SPI_EndRxTxTransaction>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d006      	beq.n	8007d8c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2220      	movs	r2, #32
 8007d88:	661a      	str	r2, [r3, #96]	; 0x60
 8007d8a:	e000      	b.n	8007d8e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007d8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3728      	adds	r7, #40	; 0x28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	60f8      	str	r0, [r7, #12]
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	603b      	str	r3, [r7, #0]
 8007db6:	4613      	mov	r3, r2
 8007db8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dba:	e04c      	b.n	8007e56 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc2:	d048      	beq.n	8007e56 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007dc4:	f7fb fae8 	bl	8003398 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d902      	bls.n	8007dda <SPI_WaitFlagStateUntilTimeout+0x30>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d13d      	bne.n	8007e56 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007de8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007df2:	d111      	bne.n	8007e18 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dfc:	d004      	beq.n	8007e08 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e06:	d107      	bne.n	8007e18 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e20:	d10f      	bne.n	8007e42 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e00f      	b.n	8007e76 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	bf0c      	ite	eq
 8007e66:	2301      	moveq	r3, #1
 8007e68:	2300      	movne	r3, #0
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d1a3      	bne.n	8007dbc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
 8007e8a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007e8c:	e057      	b.n	8007f3e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007e94:	d106      	bne.n	8007ea4 <SPI_WaitFifoStateUntilTimeout+0x26>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d103      	bne.n	8007ea4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	330c      	adds	r3, #12
 8007ea2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eaa:	d048      	beq.n	8007f3e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007eac:	f7fb fa74 	bl	8003398 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d902      	bls.n	8007ec2 <SPI_WaitFifoStateUntilTimeout+0x44>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d13d      	bne.n	8007f3e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ed0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eda:	d111      	bne.n	8007f00 <SPI_WaitFifoStateUntilTimeout+0x82>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ee4:	d004      	beq.n	8007ef0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eee:	d107      	bne.n	8007f00 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007efe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f08:	d10f      	bne.n	8007f2a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e008      	b.n	8007f50 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	4013      	ands	r3, r2
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d19f      	bne.n	8007e8e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f7ff ff84 	bl	8007e7e <SPI_WaitFifoStateUntilTimeout>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d007      	beq.n	8007f8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f80:	f043 0220 	orr.w	r2, r3, #32
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e027      	b.n	8007fdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2200      	movs	r2, #0
 8007f94:	2180      	movs	r1, #128	; 0x80
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f7ff ff07 	bl	8007daa <SPI_WaitFlagStateUntilTimeout>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d007      	beq.n	8007fb2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fa6:	f043 0220 	orr.w	r2, r3, #32
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e014      	b.n	8007fdc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7ff ff5d 	bl	8007e7e <SPI_WaitFifoStateUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d007      	beq.n	8007fda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fce:	f043 0220 	orr.w	r2, r3, #32
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e000      	b.n	8007fdc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e01d      	b.n	8008032 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d106      	bne.n	8008010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7fa ffec 	bl	8002fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3304      	adds	r3, #4
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f000 fc9a 	bl	800895c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0201 	orr.w	r2, r2, #1
 8008052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	4b0c      	ldr	r3, [pc, #48]	; (800808c <HAL_TIM_Base_Start_IT+0x50>)
 800805c:	4013      	ands	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b06      	cmp	r3, #6
 8008064:	d00b      	beq.n	800807e <HAL_TIM_Base_Start_IT+0x42>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800806c:	d007      	beq.n	800807e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 0201 	orr.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	00010007 	.word	0x00010007

08008090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e01d      	b.n	80080de <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d106      	bne.n	80080bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f815 	bl	80080e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3304      	adds	r3, #4
 80080cc:	4619      	mov	r1, r3
 80080ce:	4610      	mov	r0, r2
 80080d0:	f000 fc44 	bl	800895c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
	...

080080fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2201      	movs	r2, #1
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	4618      	mov	r0, r3
 8008110:	f001 f8ea 	bl	80092e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a21      	ldr	r2, [pc, #132]	; (80081a0 <HAL_TIM_PWM_Start+0xa4>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d018      	beq.n	8008150 <HAL_TIM_PWM_Start+0x54>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a20      	ldr	r2, [pc, #128]	; (80081a4 <HAL_TIM_PWM_Start+0xa8>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d013      	beq.n	8008150 <HAL_TIM_PWM_Start+0x54>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a1e      	ldr	r2, [pc, #120]	; (80081a8 <HAL_TIM_PWM_Start+0xac>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00e      	beq.n	8008150 <HAL_TIM_PWM_Start+0x54>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a1d      	ldr	r2, [pc, #116]	; (80081ac <HAL_TIM_PWM_Start+0xb0>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d009      	beq.n	8008150 <HAL_TIM_PWM_Start+0x54>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a1b      	ldr	r2, [pc, #108]	; (80081b0 <HAL_TIM_PWM_Start+0xb4>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d004      	beq.n	8008150 <HAL_TIM_PWM_Start+0x54>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a1a      	ldr	r2, [pc, #104]	; (80081b4 <HAL_TIM_PWM_Start+0xb8>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d101      	bne.n	8008154 <HAL_TIM_PWM_Start+0x58>
 8008150:	2301      	movs	r3, #1
 8008152:	e000      	b.n	8008156 <HAL_TIM_PWM_Start+0x5a>
 8008154:	2300      	movs	r3, #0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d007      	beq.n	800816a <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008168:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689a      	ldr	r2, [r3, #8]
 8008170:	4b11      	ldr	r3, [pc, #68]	; (80081b8 <HAL_TIM_PWM_Start+0xbc>)
 8008172:	4013      	ands	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b06      	cmp	r3, #6
 800817a:	d00b      	beq.n	8008194 <HAL_TIM_PWM_Start+0x98>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008182:	d007      	beq.n	8008194 <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f042 0201 	orr.w	r2, r2, #1
 8008192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	40012c00 	.word	0x40012c00
 80081a4:	40013400 	.word	0x40013400
 80081a8:	40014000 	.word	0x40014000
 80081ac:	40014400 	.word	0x40014400
 80081b0:	40014800 	.word	0x40014800
 80081b4:	40015000 	.word	0x40015000
 80081b8:	00010007 	.word	0x00010007

080081bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2200      	movs	r2, #0
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f001 f88a 	bl	80092e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a2c      	ldr	r2, [pc, #176]	; (800828c <HAL_TIM_PWM_Stop+0xd0>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d018      	beq.n	8008210 <HAL_TIM_PWM_Stop+0x54>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a2b      	ldr	r2, [pc, #172]	; (8008290 <HAL_TIM_PWM_Stop+0xd4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d013      	beq.n	8008210 <HAL_TIM_PWM_Stop+0x54>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a29      	ldr	r2, [pc, #164]	; (8008294 <HAL_TIM_PWM_Stop+0xd8>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d00e      	beq.n	8008210 <HAL_TIM_PWM_Stop+0x54>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a28      	ldr	r2, [pc, #160]	; (8008298 <HAL_TIM_PWM_Stop+0xdc>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d009      	beq.n	8008210 <HAL_TIM_PWM_Stop+0x54>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a26      	ldr	r2, [pc, #152]	; (800829c <HAL_TIM_PWM_Stop+0xe0>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d004      	beq.n	8008210 <HAL_TIM_PWM_Stop+0x54>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a25      	ldr	r2, [pc, #148]	; (80082a0 <HAL_TIM_PWM_Stop+0xe4>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d101      	bne.n	8008214 <HAL_TIM_PWM_Stop+0x58>
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <HAL_TIM_PWM_Stop+0x5a>
 8008214:	2300      	movs	r3, #0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d017      	beq.n	800824a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6a1a      	ldr	r2, [r3, #32]
 8008220:	f241 1311 	movw	r3, #4369	; 0x1111
 8008224:	4013      	ands	r3, r2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10f      	bne.n	800824a <HAL_TIM_PWM_Stop+0x8e>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6a1a      	ldr	r2, [r3, #32]
 8008230:	f240 4344 	movw	r3, #1092	; 0x444
 8008234:	4013      	ands	r3, r2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d107      	bne.n	800824a <HAL_TIM_PWM_Stop+0x8e>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008248:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6a1a      	ldr	r2, [r3, #32]
 8008250:	f241 1311 	movw	r3, #4369	; 0x1111
 8008254:	4013      	ands	r3, r2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10f      	bne.n	800827a <HAL_TIM_PWM_Stop+0xbe>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6a1a      	ldr	r2, [r3, #32]
 8008260:	f240 4344 	movw	r3, #1092	; 0x444
 8008264:	4013      	ands	r3, r2
 8008266:	2b00      	cmp	r3, #0
 8008268:	d107      	bne.n	800827a <HAL_TIM_PWM_Stop+0xbe>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0201 	bic.w	r2, r2, #1
 8008278:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	40012c00 	.word	0x40012c00
 8008290:	40013400 	.word	0x40013400
 8008294:	40014000 	.word	0x40014000
 8008298:	40014400 	.word	0x40014400
 800829c:	40014800 	.word	0x40014800
 80082a0:	40015000 	.word	0x40015000

080082a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d122      	bne.n	8008300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d11b      	bne.n	8008300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f06f 0202 	mvn.w	r2, #2
 80082d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fb19 	bl	800891e <HAL_TIM_IC_CaptureCallback>
 80082ec:	e005      	b.n	80082fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fb0b 	bl	800890a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fb1c 	bl	8008932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f003 0304 	and.w	r3, r3, #4
 800830a:	2b04      	cmp	r3, #4
 800830c:	d122      	bne.n	8008354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b04      	cmp	r3, #4
 800831a:	d11b      	bne.n	8008354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f06f 0204 	mvn.w	r2, #4
 8008324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2202      	movs	r2, #2
 800832a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 faef 	bl	800891e <HAL_TIM_IC_CaptureCallback>
 8008340:	e005      	b.n	800834e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fae1 	bl	800890a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 faf2 	bl	8008932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	2b08      	cmp	r3, #8
 8008360:	d122      	bne.n	80083a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b08      	cmp	r3, #8
 800836e:	d11b      	bne.n	80083a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0208 	mvn.w	r2, #8
 8008378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2204      	movs	r2, #4
 800837e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	f003 0303 	and.w	r3, r3, #3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fac5 	bl	800891e <HAL_TIM_IC_CaptureCallback>
 8008394:	e005      	b.n	80083a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fab7 	bl	800890a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fac8 	bl	8008932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f003 0310 	and.w	r3, r3, #16
 80083b2:	2b10      	cmp	r3, #16
 80083b4:	d122      	bne.n	80083fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b10      	cmp	r3, #16
 80083c2:	d11b      	bne.n	80083fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f06f 0210 	mvn.w	r2, #16
 80083cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2208      	movs	r2, #8
 80083d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa9b 	bl	800891e <HAL_TIM_IC_CaptureCallback>
 80083e8:	e005      	b.n	80083f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fa8d 	bl	800890a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fa9e 	bl	8008932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b01      	cmp	r3, #1
 8008408:	d10e      	bne.n	8008428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	2b01      	cmp	r3, #1
 8008416:	d107      	bne.n	8008428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f06f 0201 	mvn.w	r2, #1
 8008420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7fa f968 	bl	80026f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008432:	2b80      	cmp	r3, #128	; 0x80
 8008434:	d10e      	bne.n	8008454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008440:	2b80      	cmp	r3, #128	; 0x80
 8008442:	d107      	bne.n	8008454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800844c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 f88c 	bl	800956c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008462:	d10e      	bne.n	8008482 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846e:	2b80      	cmp	r3, #128	; 0x80
 8008470:	d107      	bne.n	8008482 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800847a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f001 f87f 	bl	8009580 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848c:	2b40      	cmp	r3, #64	; 0x40
 800848e:	d10e      	bne.n	80084ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849a:	2b40      	cmp	r3, #64	; 0x40
 800849c:	d107      	bne.n	80084ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fa4c 	bl	8008946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f003 0320 	and.w	r3, r3, #32
 80084b8:	2b20      	cmp	r3, #32
 80084ba:	d10e      	bne.n	80084da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f003 0320 	and.w	r3, r3, #32
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	d107      	bne.n	80084da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f06f 0220 	mvn.w	r2, #32
 80084d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 f83f 	bl	8009558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084da:	bf00      	nop
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80084fa:	2302      	movs	r3, #2
 80084fc:	e105      	b.n	800870a <HAL_TIM_PWM_ConfigChannel+0x226>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2202      	movs	r2, #2
 800850a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b14      	cmp	r3, #20
 8008512:	f200 80f0 	bhi.w	80086f6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8008516:	a201      	add	r2, pc, #4	; (adr r2, 800851c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	08008571 	.word	0x08008571
 8008520:	080086f7 	.word	0x080086f7
 8008524:	080086f7 	.word	0x080086f7
 8008528:	080086f7 	.word	0x080086f7
 800852c:	080085b1 	.word	0x080085b1
 8008530:	080086f7 	.word	0x080086f7
 8008534:	080086f7 	.word	0x080086f7
 8008538:	080086f7 	.word	0x080086f7
 800853c:	080085f3 	.word	0x080085f3
 8008540:	080086f7 	.word	0x080086f7
 8008544:	080086f7 	.word	0x080086f7
 8008548:	080086f7 	.word	0x080086f7
 800854c:	08008633 	.word	0x08008633
 8008550:	080086f7 	.word	0x080086f7
 8008554:	080086f7 	.word	0x080086f7
 8008558:	080086f7 	.word	0x080086f7
 800855c:	08008675 	.word	0x08008675
 8008560:	080086f7 	.word	0x080086f7
 8008564:	080086f7 	.word	0x080086f7
 8008568:	080086f7 	.word	0x080086f7
 800856c:	080086b5 	.word	0x080086b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68b9      	ldr	r1, [r7, #8]
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fa8e 	bl	8008a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699a      	ldr	r2, [r3, #24]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 0208 	orr.w	r2, r2, #8
 800858a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699a      	ldr	r2, [r3, #24]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0204 	bic.w	r2, r2, #4
 800859a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6999      	ldr	r1, [r3, #24]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	691a      	ldr	r2, [r3, #16]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	619a      	str	r2, [r3, #24]
      break;
 80085ae:	e0a3      	b.n	80086f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 fb08 	bl	8008bcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699a      	ldr	r2, [r3, #24]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699a      	ldr	r2, [r3, #24]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6999      	ldr	r1, [r3, #24]
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	021a      	lsls	r2, r3, #8
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	619a      	str	r2, [r3, #24]
      break;
 80085f0:	e082      	b.n	80086f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fb7b 	bl	8008cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69da      	ldr	r2, [r3, #28]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f042 0208 	orr.w	r2, r2, #8
 800860c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69da      	ldr	r2, [r3, #28]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 0204 	bic.w	r2, r2, #4
 800861c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	69d9      	ldr	r1, [r3, #28]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	691a      	ldr	r2, [r3, #16]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	61da      	str	r2, [r3, #28]
      break;
 8008630:	e062      	b.n	80086f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fbed 	bl	8008e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	69da      	ldr	r2, [r3, #28]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800864c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69da      	ldr	r2, [r3, #28]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800865c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69d9      	ldr	r1, [r3, #28]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	021a      	lsls	r2, r3, #8
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	61da      	str	r2, [r3, #28]
      break;
 8008672:	e041      	b.n	80086f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	4618      	mov	r0, r3
 800867c:	f000 fc3c 	bl	8008ef8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0208 	orr.w	r2, r2, #8
 800868e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0204 	bic.w	r2, r2, #4
 800869e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	691a      	ldr	r2, [r3, #16]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	430a      	orrs	r2, r1
 80086b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80086b2:	e021      	b.n	80086f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 fc86 	bl	8008fcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	021a      	lsls	r2, r3, #8
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80086f4:	e000      	b.n	80086f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80086f6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop

08008714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <HAL_TIM_ConfigClockSource+0x18>
 8008728:	2302      	movs	r3, #2
 800872a:	e0a8      	b.n	800887e <HAL_TIM_ConfigClockSource+0x16a>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2202      	movs	r2, #2
 8008738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800874a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800874e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008756:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b40      	cmp	r3, #64	; 0x40
 8008766:	d067      	beq.n	8008838 <HAL_TIM_ConfigClockSource+0x124>
 8008768:	2b40      	cmp	r3, #64	; 0x40
 800876a:	d80b      	bhi.n	8008784 <HAL_TIM_ConfigClockSource+0x70>
 800876c:	2b10      	cmp	r3, #16
 800876e:	d073      	beq.n	8008858 <HAL_TIM_ConfigClockSource+0x144>
 8008770:	2b10      	cmp	r3, #16
 8008772:	d802      	bhi.n	800877a <HAL_TIM_ConfigClockSource+0x66>
 8008774:	2b00      	cmp	r3, #0
 8008776:	d06f      	beq.n	8008858 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008778:	e078      	b.n	800886c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800877a:	2b20      	cmp	r3, #32
 800877c:	d06c      	beq.n	8008858 <HAL_TIM_ConfigClockSource+0x144>
 800877e:	2b30      	cmp	r3, #48	; 0x30
 8008780:	d06a      	beq.n	8008858 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8008782:	e073      	b.n	800886c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008784:	2b70      	cmp	r3, #112	; 0x70
 8008786:	d00d      	beq.n	80087a4 <HAL_TIM_ConfigClockSource+0x90>
 8008788:	2b70      	cmp	r3, #112	; 0x70
 800878a:	d804      	bhi.n	8008796 <HAL_TIM_ConfigClockSource+0x82>
 800878c:	2b50      	cmp	r3, #80	; 0x50
 800878e:	d033      	beq.n	80087f8 <HAL_TIM_ConfigClockSource+0xe4>
 8008790:	2b60      	cmp	r3, #96	; 0x60
 8008792:	d041      	beq.n	8008818 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8008794:	e06a      	b.n	800886c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800879a:	d066      	beq.n	800886a <HAL_TIM_ConfigClockSource+0x156>
 800879c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087a0:	d017      	beq.n	80087d2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80087a2:	e063      	b.n	800886c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6818      	ldr	r0, [r3, #0]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	6899      	ldr	r1, [r3, #8]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f000 fd78 	bl	80092a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80087c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	609a      	str	r2, [r3, #8]
      break;
 80087d0:	e04c      	b.n	800886c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	6899      	ldr	r1, [r3, #8]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f000 fd61 	bl	80092a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087f4:	609a      	str	r2, [r3, #8]
      break;
 80087f6:	e039      	b.n	800886c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6818      	ldr	r0, [r3, #0]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	6859      	ldr	r1, [r3, #4]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	461a      	mov	r2, r3
 8008806:	f000 fcd5 	bl	80091b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2150      	movs	r1, #80	; 0x50
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fd2e 	bl	8009272 <TIM_ITRx_SetConfig>
      break;
 8008816:	e029      	b.n	800886c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6818      	ldr	r0, [r3, #0]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	6859      	ldr	r1, [r3, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	461a      	mov	r2, r3
 8008826:	f000 fcf4 	bl	8009212 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2160      	movs	r1, #96	; 0x60
 8008830:	4618      	mov	r0, r3
 8008832:	f000 fd1e 	bl	8009272 <TIM_ITRx_SetConfig>
      break;
 8008836:	e019      	b.n	800886c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	6859      	ldr	r1, [r3, #4]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	461a      	mov	r2, r3
 8008846:	f000 fcb5 	bl	80091b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2140      	movs	r1, #64	; 0x40
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fd0e 	bl	8009272 <TIM_ITRx_SetConfig>
      break;
 8008856:	e009      	b.n	800886c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4619      	mov	r1, r3
 8008862:	4610      	mov	r0, r2
 8008864:	f000 fd05 	bl	8009272 <TIM_ITRx_SetConfig>
      break;
 8008868:	e000      	b.n	800886c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800886a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b082      	sub	sp, #8
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <HAL_TIM_SlaveConfigSynchro+0x18>
 800889a:	2302      	movs	r3, #2
 800889c:	e031      	b.n	8008902 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2202      	movs	r2, #2
 80088aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fbf7 	bl	80090a4 <TIM_SlaveTimer_SetConfig>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d009      	beq.n	80088d0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e018      	b.n	8008902 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088de:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68da      	ldr	r2, [r3, #12]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80088ee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008912:	bf00      	nop
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800891e:	b480      	push	{r7}
 8008920:	b083      	sub	sp, #12
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008932:	b480      	push	{r7}
 8008934:	b083      	sub	sp, #12
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800893a:	bf00      	nop
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800894e:	bf00      	nop
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
	...

0800895c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a42      	ldr	r2, [pc, #264]	; (8008a78 <TIM_Base_SetConfig+0x11c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d013      	beq.n	800899c <TIM_Base_SetConfig+0x40>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800897a:	d00f      	beq.n	800899c <TIM_Base_SetConfig+0x40>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a3f      	ldr	r2, [pc, #252]	; (8008a7c <TIM_Base_SetConfig+0x120>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00b      	beq.n	800899c <TIM_Base_SetConfig+0x40>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a3e      	ldr	r2, [pc, #248]	; (8008a80 <TIM_Base_SetConfig+0x124>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d007      	beq.n	800899c <TIM_Base_SetConfig+0x40>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a3d      	ldr	r2, [pc, #244]	; (8008a84 <TIM_Base_SetConfig+0x128>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d003      	beq.n	800899c <TIM_Base_SetConfig+0x40>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a3c      	ldr	r2, [pc, #240]	; (8008a88 <TIM_Base_SetConfig+0x12c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d108      	bne.n	80089ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a31      	ldr	r2, [pc, #196]	; (8008a78 <TIM_Base_SetConfig+0x11c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d01f      	beq.n	80089f6 <TIM_Base_SetConfig+0x9a>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089bc:	d01b      	beq.n	80089f6 <TIM_Base_SetConfig+0x9a>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a2e      	ldr	r2, [pc, #184]	; (8008a7c <TIM_Base_SetConfig+0x120>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d017      	beq.n	80089f6 <TIM_Base_SetConfig+0x9a>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a2d      	ldr	r2, [pc, #180]	; (8008a80 <TIM_Base_SetConfig+0x124>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d013      	beq.n	80089f6 <TIM_Base_SetConfig+0x9a>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a2c      	ldr	r2, [pc, #176]	; (8008a84 <TIM_Base_SetConfig+0x128>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d00f      	beq.n	80089f6 <TIM_Base_SetConfig+0x9a>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a2c      	ldr	r2, [pc, #176]	; (8008a8c <TIM_Base_SetConfig+0x130>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d00b      	beq.n	80089f6 <TIM_Base_SetConfig+0x9a>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a2b      	ldr	r2, [pc, #172]	; (8008a90 <TIM_Base_SetConfig+0x134>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d007      	beq.n	80089f6 <TIM_Base_SetConfig+0x9a>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a2a      	ldr	r2, [pc, #168]	; (8008a94 <TIM_Base_SetConfig+0x138>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d003      	beq.n	80089f6 <TIM_Base_SetConfig+0x9a>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a25      	ldr	r2, [pc, #148]	; (8008a88 <TIM_Base_SetConfig+0x12c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d108      	bne.n	8008a08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	689a      	ldr	r2, [r3, #8]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a12      	ldr	r2, [pc, #72]	; (8008a78 <TIM_Base_SetConfig+0x11c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d013      	beq.n	8008a5c <TIM_Base_SetConfig+0x100>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a13      	ldr	r2, [pc, #76]	; (8008a84 <TIM_Base_SetConfig+0x128>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d00f      	beq.n	8008a5c <TIM_Base_SetConfig+0x100>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a13      	ldr	r2, [pc, #76]	; (8008a8c <TIM_Base_SetConfig+0x130>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d00b      	beq.n	8008a5c <TIM_Base_SetConfig+0x100>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a12      	ldr	r2, [pc, #72]	; (8008a90 <TIM_Base_SetConfig+0x134>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d007      	beq.n	8008a5c <TIM_Base_SetConfig+0x100>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a11      	ldr	r2, [pc, #68]	; (8008a94 <TIM_Base_SetConfig+0x138>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d003      	beq.n	8008a5c <TIM_Base_SetConfig+0x100>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a0c      	ldr	r2, [pc, #48]	; (8008a88 <TIM_Base_SetConfig+0x12c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d103      	bne.n	8008a64 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	691a      	ldr	r2, [r3, #16]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	615a      	str	r2, [r3, #20]
}
 8008a6a:	bf00      	nop
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	40012c00 	.word	0x40012c00
 8008a7c:	40000400 	.word	0x40000400
 8008a80:	40000800 	.word	0x40000800
 8008a84:	40013400 	.word	0x40013400
 8008a88:	40015000 	.word	0x40015000
 8008a8c:	40014000 	.word	0x40014000
 8008a90:	40014400 	.word	0x40014400
 8008a94:	40014800 	.word	0x40014800

08008a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	f023 0201 	bic.w	r2, r3, #1
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f023 0303 	bic.w	r3, r3, #3
 8008ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f023 0302 	bic.w	r3, r3, #2
 8008ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a30      	ldr	r2, [pc, #192]	; (8008bb4 <TIM_OC1_SetConfig+0x11c>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d013      	beq.n	8008b20 <TIM_OC1_SetConfig+0x88>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a2f      	ldr	r2, [pc, #188]	; (8008bb8 <TIM_OC1_SetConfig+0x120>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d00f      	beq.n	8008b20 <TIM_OC1_SetConfig+0x88>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a2e      	ldr	r2, [pc, #184]	; (8008bbc <TIM_OC1_SetConfig+0x124>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00b      	beq.n	8008b20 <TIM_OC1_SetConfig+0x88>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a2d      	ldr	r2, [pc, #180]	; (8008bc0 <TIM_OC1_SetConfig+0x128>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d007      	beq.n	8008b20 <TIM_OC1_SetConfig+0x88>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a2c      	ldr	r2, [pc, #176]	; (8008bc4 <TIM_OC1_SetConfig+0x12c>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d003      	beq.n	8008b20 <TIM_OC1_SetConfig+0x88>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a2b      	ldr	r2, [pc, #172]	; (8008bc8 <TIM_OC1_SetConfig+0x130>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d10c      	bne.n	8008b3a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f023 0308 	bic.w	r3, r3, #8
 8008b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f023 0304 	bic.w	r3, r3, #4
 8008b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <TIM_OC1_SetConfig+0x11c>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d013      	beq.n	8008b6a <TIM_OC1_SetConfig+0xd2>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a1c      	ldr	r2, [pc, #112]	; (8008bb8 <TIM_OC1_SetConfig+0x120>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d00f      	beq.n	8008b6a <TIM_OC1_SetConfig+0xd2>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a1b      	ldr	r2, [pc, #108]	; (8008bbc <TIM_OC1_SetConfig+0x124>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d00b      	beq.n	8008b6a <TIM_OC1_SetConfig+0xd2>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a1a      	ldr	r2, [pc, #104]	; (8008bc0 <TIM_OC1_SetConfig+0x128>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d007      	beq.n	8008b6a <TIM_OC1_SetConfig+0xd2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a19      	ldr	r2, [pc, #100]	; (8008bc4 <TIM_OC1_SetConfig+0x12c>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d003      	beq.n	8008b6a <TIM_OC1_SetConfig+0xd2>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a18      	ldr	r2, [pc, #96]	; (8008bc8 <TIM_OC1_SetConfig+0x130>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d111      	bne.n	8008b8e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	621a      	str	r2, [r3, #32]
}
 8008ba8:	bf00      	nop
 8008baa:	371c      	adds	r7, #28
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	40012c00 	.word	0x40012c00
 8008bb8:	40013400 	.word	0x40013400
 8008bbc:	40014000 	.word	0x40014000
 8008bc0:	40014400 	.word	0x40014400
 8008bc4:	40014800 	.word	0x40014800
 8008bc8:	40015000 	.word	0x40015000

08008bcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	f023 0210 	bic.w	r2, r3, #16
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	021b      	lsls	r3, r3, #8
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f023 0320 	bic.w	r3, r3, #32
 8008c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	011b      	lsls	r3, r3, #4
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a2c      	ldr	r2, [pc, #176]	; (8008cdc <TIM_OC2_SetConfig+0x110>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d007      	beq.n	8008c40 <TIM_OC2_SetConfig+0x74>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a2b      	ldr	r2, [pc, #172]	; (8008ce0 <TIM_OC2_SetConfig+0x114>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d003      	beq.n	8008c40 <TIM_OC2_SetConfig+0x74>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a2a      	ldr	r2, [pc, #168]	; (8008ce4 <TIM_OC2_SetConfig+0x118>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d10d      	bne.n	8008c5c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	011b      	lsls	r3, r3, #4
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a1f      	ldr	r2, [pc, #124]	; (8008cdc <TIM_OC2_SetConfig+0x110>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d013      	beq.n	8008c8c <TIM_OC2_SetConfig+0xc0>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a1e      	ldr	r2, [pc, #120]	; (8008ce0 <TIM_OC2_SetConfig+0x114>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00f      	beq.n	8008c8c <TIM_OC2_SetConfig+0xc0>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a1e      	ldr	r2, [pc, #120]	; (8008ce8 <TIM_OC2_SetConfig+0x11c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d00b      	beq.n	8008c8c <TIM_OC2_SetConfig+0xc0>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a1d      	ldr	r2, [pc, #116]	; (8008cec <TIM_OC2_SetConfig+0x120>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d007      	beq.n	8008c8c <TIM_OC2_SetConfig+0xc0>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a1c      	ldr	r2, [pc, #112]	; (8008cf0 <TIM_OC2_SetConfig+0x124>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d003      	beq.n	8008c8c <TIM_OC2_SetConfig+0xc0>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a17      	ldr	r2, [pc, #92]	; (8008ce4 <TIM_OC2_SetConfig+0x118>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d113      	bne.n	8008cb4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c92:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c9a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	695b      	ldr	r3, [r3, #20]
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	621a      	str	r2, [r3, #32]
}
 8008cce:	bf00      	nop
 8008cd0:	371c      	adds	r7, #28
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	40012c00 	.word	0x40012c00
 8008ce0:	40013400 	.word	0x40013400
 8008ce4:	40015000 	.word	0x40015000
 8008ce8:	40014000 	.word	0x40014000
 8008cec:	40014400 	.word	0x40014400
 8008cf0:	40014800 	.word	0x40014800

08008cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f023 0303 	bic.w	r3, r3, #3
 8008d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	021b      	lsls	r3, r3, #8
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a2b      	ldr	r2, [pc, #172]	; (8008e00 <TIM_OC3_SetConfig+0x10c>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d007      	beq.n	8008d66 <TIM_OC3_SetConfig+0x72>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a2a      	ldr	r2, [pc, #168]	; (8008e04 <TIM_OC3_SetConfig+0x110>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d003      	beq.n	8008d66 <TIM_OC3_SetConfig+0x72>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a29      	ldr	r2, [pc, #164]	; (8008e08 <TIM_OC3_SetConfig+0x114>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d10d      	bne.n	8008d82 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	021b      	lsls	r3, r3, #8
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d80:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a1e      	ldr	r2, [pc, #120]	; (8008e00 <TIM_OC3_SetConfig+0x10c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d013      	beq.n	8008db2 <TIM_OC3_SetConfig+0xbe>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a1d      	ldr	r2, [pc, #116]	; (8008e04 <TIM_OC3_SetConfig+0x110>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d00f      	beq.n	8008db2 <TIM_OC3_SetConfig+0xbe>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a1d      	ldr	r2, [pc, #116]	; (8008e0c <TIM_OC3_SetConfig+0x118>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d00b      	beq.n	8008db2 <TIM_OC3_SetConfig+0xbe>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a1c      	ldr	r2, [pc, #112]	; (8008e10 <TIM_OC3_SetConfig+0x11c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d007      	beq.n	8008db2 <TIM_OC3_SetConfig+0xbe>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a1b      	ldr	r2, [pc, #108]	; (8008e14 <TIM_OC3_SetConfig+0x120>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d003      	beq.n	8008db2 <TIM_OC3_SetConfig+0xbe>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a16      	ldr	r2, [pc, #88]	; (8008e08 <TIM_OC3_SetConfig+0x114>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d113      	bne.n	8008dda <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	011b      	lsls	r3, r3, #4
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	011b      	lsls	r3, r3, #4
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	621a      	str	r2, [r3, #32]
}
 8008df4:	bf00      	nop
 8008df6:	371c      	adds	r7, #28
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	40012c00 	.word	0x40012c00
 8008e04:	40013400 	.word	0x40013400
 8008e08:	40015000 	.word	0x40015000
 8008e0c:	40014000 	.word	0x40014000
 8008e10:	40014400 	.word	0x40014400
 8008e14:	40014800 	.word	0x40014800

08008e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	021b      	lsls	r3, r3, #8
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	031b      	lsls	r3, r3, #12
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a1a      	ldr	r2, [pc, #104]	; (8008ee0 <TIM_OC4_SetConfig+0xc8>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d013      	beq.n	8008ea4 <TIM_OC4_SetConfig+0x8c>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a19      	ldr	r2, [pc, #100]	; (8008ee4 <TIM_OC4_SetConfig+0xcc>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d00f      	beq.n	8008ea4 <TIM_OC4_SetConfig+0x8c>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a18      	ldr	r2, [pc, #96]	; (8008ee8 <TIM_OC4_SetConfig+0xd0>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d00b      	beq.n	8008ea4 <TIM_OC4_SetConfig+0x8c>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a17      	ldr	r2, [pc, #92]	; (8008eec <TIM_OC4_SetConfig+0xd4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d007      	beq.n	8008ea4 <TIM_OC4_SetConfig+0x8c>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a16      	ldr	r2, [pc, #88]	; (8008ef0 <TIM_OC4_SetConfig+0xd8>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d003      	beq.n	8008ea4 <TIM_OC4_SetConfig+0x8c>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a15      	ldr	r2, [pc, #84]	; (8008ef4 <TIM_OC4_SetConfig+0xdc>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d109      	bne.n	8008eb8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	019b      	lsls	r3, r3, #6
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	621a      	str	r2, [r3, #32]
}
 8008ed2:	bf00      	nop
 8008ed4:	371c      	adds	r7, #28
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	40012c00 	.word	0x40012c00
 8008ee4:	40013400 	.word	0x40013400
 8008ee8:	40014000 	.word	0x40014000
 8008eec:	40014400 	.word	0x40014400
 8008ef0:	40014800 	.word	0x40014800
 8008ef4:	40015000 	.word	0x40015000

08008ef8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b087      	sub	sp, #28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008f3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	041b      	lsls	r3, r3, #16
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a19      	ldr	r2, [pc, #100]	; (8008fb4 <TIM_OC5_SetConfig+0xbc>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d013      	beq.n	8008f7a <TIM_OC5_SetConfig+0x82>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a18      	ldr	r2, [pc, #96]	; (8008fb8 <TIM_OC5_SetConfig+0xc0>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d00f      	beq.n	8008f7a <TIM_OC5_SetConfig+0x82>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a17      	ldr	r2, [pc, #92]	; (8008fbc <TIM_OC5_SetConfig+0xc4>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00b      	beq.n	8008f7a <TIM_OC5_SetConfig+0x82>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a16      	ldr	r2, [pc, #88]	; (8008fc0 <TIM_OC5_SetConfig+0xc8>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d007      	beq.n	8008f7a <TIM_OC5_SetConfig+0x82>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a15      	ldr	r2, [pc, #84]	; (8008fc4 <TIM_OC5_SetConfig+0xcc>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d003      	beq.n	8008f7a <TIM_OC5_SetConfig+0x82>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a14      	ldr	r2, [pc, #80]	; (8008fc8 <TIM_OC5_SetConfig+0xd0>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d109      	bne.n	8008f8e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	021b      	lsls	r3, r3, #8
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	621a      	str	r2, [r3, #32]
}
 8008fa8:	bf00      	nop
 8008faa:	371c      	adds	r7, #28
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	40012c00 	.word	0x40012c00
 8008fb8:	40013400 	.word	0x40013400
 8008fbc:	40014000 	.word	0x40014000
 8008fc0:	40014400 	.word	0x40014400
 8008fc4:	40014800 	.word	0x40014800
 8008fc8:	40015000 	.word	0x40015000

08008fcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	021b      	lsls	r3, r3, #8
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	4313      	orrs	r3, r2
 800900a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	051b      	lsls	r3, r3, #20
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	4313      	orrs	r3, r2
 800901e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a1a      	ldr	r2, [pc, #104]	; (800908c <TIM_OC6_SetConfig+0xc0>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d013      	beq.n	8009050 <TIM_OC6_SetConfig+0x84>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a19      	ldr	r2, [pc, #100]	; (8009090 <TIM_OC6_SetConfig+0xc4>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d00f      	beq.n	8009050 <TIM_OC6_SetConfig+0x84>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a18      	ldr	r2, [pc, #96]	; (8009094 <TIM_OC6_SetConfig+0xc8>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d00b      	beq.n	8009050 <TIM_OC6_SetConfig+0x84>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a17      	ldr	r2, [pc, #92]	; (8009098 <TIM_OC6_SetConfig+0xcc>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d007      	beq.n	8009050 <TIM_OC6_SetConfig+0x84>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a16      	ldr	r2, [pc, #88]	; (800909c <TIM_OC6_SetConfig+0xd0>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d003      	beq.n	8009050 <TIM_OC6_SetConfig+0x84>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a15      	ldr	r2, [pc, #84]	; (80090a0 <TIM_OC6_SetConfig+0xd4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d109      	bne.n	8009064 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009056:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	695b      	ldr	r3, [r3, #20]
 800905c:	029b      	lsls	r3, r3, #10
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	4313      	orrs	r3, r2
 8009062:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	621a      	str	r2, [r3, #32]
}
 800907e:	bf00      	nop
 8009080:	371c      	adds	r7, #28
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	40012c00 	.word	0x40012c00
 8009090:	40013400 	.word	0x40013400
 8009094:	40014000 	.word	0x40014000
 8009098:	40014400 	.word	0x40014400
 800909c:	40014800 	.word	0x40014800
 80090a0:	40015000 	.word	0x40015000

080090a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090bc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090ce:	f023 0307 	bic.w	r3, r3, #7
 80090d2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	4313      	orrs	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2b30      	cmp	r3, #48	; 0x30
 80090ec:	d05c      	beq.n	80091a8 <TIM_SlaveTimer_SetConfig+0x104>
 80090ee:	2b30      	cmp	r3, #48	; 0x30
 80090f0:	d806      	bhi.n	8009100 <TIM_SlaveTimer_SetConfig+0x5c>
 80090f2:	2b10      	cmp	r3, #16
 80090f4:	d058      	beq.n	80091a8 <TIM_SlaveTimer_SetConfig+0x104>
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	d056      	beq.n	80091a8 <TIM_SlaveTimer_SetConfig+0x104>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d054      	beq.n	80091a8 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80090fe:	e054      	b.n	80091aa <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8009100:	2b50      	cmp	r3, #80	; 0x50
 8009102:	d03d      	beq.n	8009180 <TIM_SlaveTimer_SetConfig+0xdc>
 8009104:	2b50      	cmp	r3, #80	; 0x50
 8009106:	d802      	bhi.n	800910e <TIM_SlaveTimer_SetConfig+0x6a>
 8009108:	2b40      	cmp	r3, #64	; 0x40
 800910a:	d010      	beq.n	800912e <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 800910c:	e04d      	b.n	80091aa <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800910e:	2b60      	cmp	r3, #96	; 0x60
 8009110:	d040      	beq.n	8009194 <TIM_SlaveTimer_SetConfig+0xf0>
 8009112:	2b70      	cmp	r3, #112	; 0x70
 8009114:	d000      	beq.n	8009118 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8009116:	e048      	b.n	80091aa <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6818      	ldr	r0, [r3, #0]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	68d9      	ldr	r1, [r3, #12]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	f000 f8be 	bl	80092a8 <TIM_ETR_SetConfig>
      break;
 800912c:	e03d      	b.n	80091aa <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b05      	cmp	r3, #5
 8009134:	d101      	bne.n	800913a <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e038      	b.n	80091ac <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6a1a      	ldr	r2, [r3, #32]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f022 0201 	bic.w	r2, r2, #1
 8009150:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009160:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	011b      	lsls	r3, r3, #4
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	621a      	str	r2, [r3, #32]
      break;
 800917e:	e014      	b.n	80091aa <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6818      	ldr	r0, [r3, #0]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	6899      	ldr	r1, [r3, #8]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	461a      	mov	r2, r3
 800918e:	f000 f811 	bl	80091b4 <TIM_TI1_ConfigInputStage>
      break;
 8009192:	e00a      	b.n	80091aa <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	6899      	ldr	r1, [r3, #8]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	461a      	mov	r2, r3
 80091a2:	f000 f836 	bl	8009212 <TIM_TI2_ConfigInputStage>
      break;
 80091a6:	e000      	b.n	80091aa <TIM_SlaveTimer_SetConfig+0x106>
      break;
 80091a8:	bf00      	nop
  }
  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6a1b      	ldr	r3, [r3, #32]
 80091c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	f023 0201 	bic.w	r2, r3, #1
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	011b      	lsls	r3, r3, #4
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f023 030a 	bic.w	r3, r3, #10
 80091f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	621a      	str	r2, [r3, #32]
}
 8009206:	bf00      	nop
 8009208:	371c      	adds	r7, #28
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009212:	b480      	push	{r7}
 8009214:	b087      	sub	sp, #28
 8009216:	af00      	add	r7, sp, #0
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	f023 0210 	bic.w	r2, r3, #16
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800923c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	031b      	lsls	r3, r3, #12
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4313      	orrs	r3, r2
 8009246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800924e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	011b      	lsls	r3, r3, #4
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	4313      	orrs	r3, r2
 8009258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	621a      	str	r2, [r3, #32]
}
 8009266:	bf00      	nop
 8009268:	371c      	adds	r7, #28
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009272:	b480      	push	{r7}
 8009274:	b085      	sub	sp, #20
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4313      	orrs	r3, r2
 8009290:	f043 0307 	orr.w	r3, r3, #7
 8009294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	609a      	str	r2, [r3, #8]
}
 800929c:	bf00      	nop
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	021a      	lsls	r2, r3, #8
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	431a      	orrs	r2, r3
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	609a      	str	r2, [r3, #8]
}
 80092dc:	bf00      	nop
 80092de:	371c      	adds	r7, #28
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f003 031f 	and.w	r3, r3, #31
 80092fa:	2201      	movs	r2, #1
 80092fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009300:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a1a      	ldr	r2, [r3, #32]
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	43db      	mvns	r3, r3
 800930a:	401a      	ands	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6a1a      	ldr	r2, [r3, #32]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	f003 031f 	and.w	r3, r3, #31
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	fa01 f303 	lsl.w	r3, r1, r3
 8009320:	431a      	orrs	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	621a      	str	r2, [r3, #32]
}
 8009326:	bf00      	nop
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
	...

08009334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009344:	2b01      	cmp	r3, #1
 8009346:	d101      	bne.n	800934c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009348:	2302      	movs	r3, #2
 800934a:	e06d      	b.n	8009428 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2202      	movs	r2, #2
 8009358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a30      	ldr	r2, [pc, #192]	; (8009434 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d009      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a2f      	ldr	r2, [pc, #188]	; (8009438 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d004      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a2d      	ldr	r2, [pc, #180]	; (800943c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d108      	bne.n	800939c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009390:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	4313      	orrs	r3, r2
 800939a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a1e      	ldr	r2, [pc, #120]	; (8009434 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d01d      	beq.n	80093fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c8:	d018      	beq.n	80093fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a1c      	ldr	r2, [pc, #112]	; (8009440 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d013      	beq.n	80093fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a1a      	ldr	r2, [pc, #104]	; (8009444 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d00e      	beq.n	80093fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a15      	ldr	r2, [pc, #84]	; (8009438 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d009      	beq.n	80093fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a16      	ldr	r2, [pc, #88]	; (8009448 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d004      	beq.n	80093fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a11      	ldr	r2, [pc, #68]	; (800943c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d10c      	bne.n	8009416 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009402:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	4313      	orrs	r3, r2
 800940c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3714      	adds	r7, #20
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	40012c00 	.word	0x40012c00
 8009438:	40013400 	.word	0x40013400
 800943c:	40015000 	.word	0x40015000
 8009440:	40000400 	.word	0x40000400
 8009444:	40000800 	.word	0x40000800
 8009448:	40014000 	.word	0x40014000

0800944c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009460:	2b01      	cmp	r3, #1
 8009462:	d101      	bne.n	8009468 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009464:	2302      	movs	r3, #2
 8009466:	e06a      	b.n	800953e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	4313      	orrs	r3, r2
 800948a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	4313      	orrs	r3, r2
 8009498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ce:	4313      	orrs	r3, r2
 80094d0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	041b      	lsls	r3, r3, #16
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a19      	ldr	r2, [pc, #100]	; (800954c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d009      	beq.n	8009500 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a17      	ldr	r2, [pc, #92]	; (8009550 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d004      	beq.n	8009500 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a16      	ldr	r2, [pc, #88]	; (8009554 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d115      	bne.n	800952c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950a:	051b      	lsls	r3, r3, #20
 800950c:	4313      	orrs	r3, r2
 800950e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	4313      	orrs	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	6a1b      	ldr	r3, [r3, #32]
 8009528:	4313      	orrs	r3, r2
 800952a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	40012c00 	.word	0x40012c00
 8009550:	40013400 	.word	0x40013400
 8009554:	40015000 	.word	0x40015000

08009558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e040      	b.n	8009628 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d106      	bne.n	80095bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7f9 fe28 	bl	800320c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2224      	movs	r2, #36	; 0x24
 80095c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f022 0201 	bic.w	r2, r2, #1
 80095d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f8c0 	bl	8009758 <UART_SetConfig>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d101      	bne.n	80095e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e022      	b.n	8009628 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 face 	bl	8009b8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689a      	ldr	r2, [r3, #8]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800960e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f042 0201 	orr.w	r2, r2, #1
 800961e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fb55 	bl	8009cd0 <UART_CheckIdleState>
 8009626:	4603      	mov	r3, r0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b08a      	sub	sp, #40	; 0x28
 8009634:	af02      	add	r7, sp, #8
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	603b      	str	r3, [r7, #0]
 800963c:	4613      	mov	r3, r2
 800963e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009644:	2b20      	cmp	r3, #32
 8009646:	f040 8081 	bne.w	800974c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <HAL_UART_Transmit+0x26>
 8009650:	88fb      	ldrh	r3, [r7, #6]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e079      	b.n	800974e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009660:	2b01      	cmp	r3, #1
 8009662:	d101      	bne.n	8009668 <HAL_UART_Transmit+0x38>
 8009664:	2302      	movs	r3, #2
 8009666:	e072      	b.n	800974e <HAL_UART_Transmit+0x11e>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2221      	movs	r2, #33	; 0x21
 800967a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800967c:	f7f9 fe8c 	bl	8003398 <HAL_GetTick>
 8009680:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	88fa      	ldrh	r2, [r7, #6]
 8009686:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	88fa      	ldrh	r2, [r7, #6]
 800968e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969a:	d108      	bne.n	80096ae <HAL_UART_Transmit+0x7e>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d104      	bne.n	80096ae <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80096a4:	2300      	movs	r3, #0
 80096a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	61bb      	str	r3, [r7, #24]
 80096ac:	e003      	b.n	80096b6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80096b6:	e02d      	b.n	8009714 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	2200      	movs	r2, #0
 80096c0:	2180      	movs	r1, #128	; 0x80
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 fb49 	bl	8009d5a <UART_WaitOnFlagUntilTimeout>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e03d      	b.n	800974e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10b      	bne.n	80096f0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	881a      	ldrh	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096e4:	b292      	uxth	r2, r2
 80096e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	3302      	adds	r3, #2
 80096ec:	61bb      	str	r3, [r7, #24]
 80096ee:	e008      	b.n	8009702 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	781a      	ldrb	r2, [r3, #0]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	b292      	uxth	r2, r2
 80096fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	3301      	adds	r3, #1
 8009700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009708:	b29b      	uxth	r3, r3
 800970a:	3b01      	subs	r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800971a:	b29b      	uxth	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1cb      	bne.n	80096b8 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2200      	movs	r2, #0
 8009728:	2140      	movs	r1, #64	; 0x40
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f000 fb15 	bl	8009d5a <UART_WaitOnFlagUntilTimeout>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e009      	b.n	800974e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2220      	movs	r2, #32
 800973e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	e000      	b.n	800974e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800974c:	2302      	movs	r3, #2
  }
}
 800974e:	4618      	mov	r0, r3
 8009750:	3720      	adds	r7, #32
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b088      	sub	sp, #32
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009760:	2300      	movs	r3, #0
 8009762:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	431a      	orrs	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	431a      	orrs	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	69db      	ldr	r3, [r3, #28]
 800977c:	4313      	orrs	r3, r2
 800977e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	4bac      	ldr	r3, [pc, #688]	; (8009a38 <UART_SetConfig+0x2e0>)
 8009788:	4013      	ands	r3, r2
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	6812      	ldr	r2, [r2, #0]
 800978e:	6939      	ldr	r1, [r7, #16]
 8009790:	430b      	orrs	r3, r1
 8009792:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	430a      	orrs	r2, r1
 80097a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a9a      	ldr	r2, [pc, #616]	; (8009a3c <UART_SetConfig+0x2e4>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d121      	bne.n	800981c <UART_SetConfig+0xc4>
 80097d8:	4b99      	ldr	r3, [pc, #612]	; (8009a40 <UART_SetConfig+0x2e8>)
 80097da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097dc:	f003 0303 	and.w	r3, r3, #3
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	d817      	bhi.n	8009814 <UART_SetConfig+0xbc>
 80097e4:	a201      	add	r2, pc, #4	; (adr r2, 80097ec <UART_SetConfig+0x94>)
 80097e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ea:	bf00      	nop
 80097ec:	080097fd 	.word	0x080097fd
 80097f0:	08009809 	.word	0x08009809
 80097f4:	0800980f 	.word	0x0800980f
 80097f8:	08009803 	.word	0x08009803
 80097fc:	2301      	movs	r3, #1
 80097fe:	77fb      	strb	r3, [r7, #31]
 8009800:	e0b2      	b.n	8009968 <UART_SetConfig+0x210>
 8009802:	2302      	movs	r3, #2
 8009804:	77fb      	strb	r3, [r7, #31]
 8009806:	e0af      	b.n	8009968 <UART_SetConfig+0x210>
 8009808:	2304      	movs	r3, #4
 800980a:	77fb      	strb	r3, [r7, #31]
 800980c:	e0ac      	b.n	8009968 <UART_SetConfig+0x210>
 800980e:	2308      	movs	r3, #8
 8009810:	77fb      	strb	r3, [r7, #31]
 8009812:	e0a9      	b.n	8009968 <UART_SetConfig+0x210>
 8009814:	2310      	movs	r3, #16
 8009816:	77fb      	strb	r3, [r7, #31]
 8009818:	bf00      	nop
 800981a:	e0a5      	b.n	8009968 <UART_SetConfig+0x210>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a88      	ldr	r2, [pc, #544]	; (8009a44 <UART_SetConfig+0x2ec>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d123      	bne.n	800986e <UART_SetConfig+0x116>
 8009826:	4b86      	ldr	r3, [pc, #536]	; (8009a40 <UART_SetConfig+0x2e8>)
 8009828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800982e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009832:	d012      	beq.n	800985a <UART_SetConfig+0x102>
 8009834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009838:	d802      	bhi.n	8009840 <UART_SetConfig+0xe8>
 800983a:	2b00      	cmp	r3, #0
 800983c:	d007      	beq.n	800984e <UART_SetConfig+0xf6>
 800983e:	e012      	b.n	8009866 <UART_SetConfig+0x10e>
 8009840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009844:	d00c      	beq.n	8009860 <UART_SetConfig+0x108>
 8009846:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800984a:	d003      	beq.n	8009854 <UART_SetConfig+0xfc>
 800984c:	e00b      	b.n	8009866 <UART_SetConfig+0x10e>
 800984e:	2300      	movs	r3, #0
 8009850:	77fb      	strb	r3, [r7, #31]
 8009852:	e089      	b.n	8009968 <UART_SetConfig+0x210>
 8009854:	2302      	movs	r3, #2
 8009856:	77fb      	strb	r3, [r7, #31]
 8009858:	e086      	b.n	8009968 <UART_SetConfig+0x210>
 800985a:	2304      	movs	r3, #4
 800985c:	77fb      	strb	r3, [r7, #31]
 800985e:	e083      	b.n	8009968 <UART_SetConfig+0x210>
 8009860:	2308      	movs	r3, #8
 8009862:	77fb      	strb	r3, [r7, #31]
 8009864:	e080      	b.n	8009968 <UART_SetConfig+0x210>
 8009866:	2310      	movs	r3, #16
 8009868:	77fb      	strb	r3, [r7, #31]
 800986a:	bf00      	nop
 800986c:	e07c      	b.n	8009968 <UART_SetConfig+0x210>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a75      	ldr	r2, [pc, #468]	; (8009a48 <UART_SetConfig+0x2f0>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d123      	bne.n	80098c0 <UART_SetConfig+0x168>
 8009878:	4b71      	ldr	r3, [pc, #452]	; (8009a40 <UART_SetConfig+0x2e8>)
 800987a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009880:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009884:	d012      	beq.n	80098ac <UART_SetConfig+0x154>
 8009886:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800988a:	d802      	bhi.n	8009892 <UART_SetConfig+0x13a>
 800988c:	2b00      	cmp	r3, #0
 800988e:	d007      	beq.n	80098a0 <UART_SetConfig+0x148>
 8009890:	e012      	b.n	80098b8 <UART_SetConfig+0x160>
 8009892:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009896:	d00c      	beq.n	80098b2 <UART_SetConfig+0x15a>
 8009898:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800989c:	d003      	beq.n	80098a6 <UART_SetConfig+0x14e>
 800989e:	e00b      	b.n	80098b8 <UART_SetConfig+0x160>
 80098a0:	2300      	movs	r3, #0
 80098a2:	77fb      	strb	r3, [r7, #31]
 80098a4:	e060      	b.n	8009968 <UART_SetConfig+0x210>
 80098a6:	2302      	movs	r3, #2
 80098a8:	77fb      	strb	r3, [r7, #31]
 80098aa:	e05d      	b.n	8009968 <UART_SetConfig+0x210>
 80098ac:	2304      	movs	r3, #4
 80098ae:	77fb      	strb	r3, [r7, #31]
 80098b0:	e05a      	b.n	8009968 <UART_SetConfig+0x210>
 80098b2:	2308      	movs	r3, #8
 80098b4:	77fb      	strb	r3, [r7, #31]
 80098b6:	e057      	b.n	8009968 <UART_SetConfig+0x210>
 80098b8:	2310      	movs	r3, #16
 80098ba:	77fb      	strb	r3, [r7, #31]
 80098bc:	bf00      	nop
 80098be:	e053      	b.n	8009968 <UART_SetConfig+0x210>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a61      	ldr	r2, [pc, #388]	; (8009a4c <UART_SetConfig+0x2f4>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d123      	bne.n	8009912 <UART_SetConfig+0x1ba>
 80098ca:	4b5d      	ldr	r3, [pc, #372]	; (8009a40 <UART_SetConfig+0x2e8>)
 80098cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80098d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098d6:	d012      	beq.n	80098fe <UART_SetConfig+0x1a6>
 80098d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098dc:	d802      	bhi.n	80098e4 <UART_SetConfig+0x18c>
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d007      	beq.n	80098f2 <UART_SetConfig+0x19a>
 80098e2:	e012      	b.n	800990a <UART_SetConfig+0x1b2>
 80098e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098e8:	d00c      	beq.n	8009904 <UART_SetConfig+0x1ac>
 80098ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098ee:	d003      	beq.n	80098f8 <UART_SetConfig+0x1a0>
 80098f0:	e00b      	b.n	800990a <UART_SetConfig+0x1b2>
 80098f2:	2300      	movs	r3, #0
 80098f4:	77fb      	strb	r3, [r7, #31]
 80098f6:	e037      	b.n	8009968 <UART_SetConfig+0x210>
 80098f8:	2302      	movs	r3, #2
 80098fa:	77fb      	strb	r3, [r7, #31]
 80098fc:	e034      	b.n	8009968 <UART_SetConfig+0x210>
 80098fe:	2304      	movs	r3, #4
 8009900:	77fb      	strb	r3, [r7, #31]
 8009902:	e031      	b.n	8009968 <UART_SetConfig+0x210>
 8009904:	2308      	movs	r3, #8
 8009906:	77fb      	strb	r3, [r7, #31]
 8009908:	e02e      	b.n	8009968 <UART_SetConfig+0x210>
 800990a:	2310      	movs	r3, #16
 800990c:	77fb      	strb	r3, [r7, #31]
 800990e:	bf00      	nop
 8009910:	e02a      	b.n	8009968 <UART_SetConfig+0x210>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a4e      	ldr	r2, [pc, #312]	; (8009a50 <UART_SetConfig+0x2f8>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d123      	bne.n	8009964 <UART_SetConfig+0x20c>
 800991c:	4b48      	ldr	r3, [pc, #288]	; (8009a40 <UART_SetConfig+0x2e8>)
 800991e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009920:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009928:	d012      	beq.n	8009950 <UART_SetConfig+0x1f8>
 800992a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800992e:	d802      	bhi.n	8009936 <UART_SetConfig+0x1de>
 8009930:	2b00      	cmp	r3, #0
 8009932:	d007      	beq.n	8009944 <UART_SetConfig+0x1ec>
 8009934:	e012      	b.n	800995c <UART_SetConfig+0x204>
 8009936:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800993a:	d00c      	beq.n	8009956 <UART_SetConfig+0x1fe>
 800993c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009940:	d003      	beq.n	800994a <UART_SetConfig+0x1f2>
 8009942:	e00b      	b.n	800995c <UART_SetConfig+0x204>
 8009944:	2300      	movs	r3, #0
 8009946:	77fb      	strb	r3, [r7, #31]
 8009948:	e00e      	b.n	8009968 <UART_SetConfig+0x210>
 800994a:	2302      	movs	r3, #2
 800994c:	77fb      	strb	r3, [r7, #31]
 800994e:	e00b      	b.n	8009968 <UART_SetConfig+0x210>
 8009950:	2304      	movs	r3, #4
 8009952:	77fb      	strb	r3, [r7, #31]
 8009954:	e008      	b.n	8009968 <UART_SetConfig+0x210>
 8009956:	2308      	movs	r3, #8
 8009958:	77fb      	strb	r3, [r7, #31]
 800995a:	e005      	b.n	8009968 <UART_SetConfig+0x210>
 800995c:	2310      	movs	r3, #16
 800995e:	77fb      	strb	r3, [r7, #31]
 8009960:	bf00      	nop
 8009962:	e001      	b.n	8009968 <UART_SetConfig+0x210>
 8009964:	2310      	movs	r3, #16
 8009966:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009970:	f040 8090 	bne.w	8009a94 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8009974:	7ffb      	ldrb	r3, [r7, #31]
 8009976:	2b08      	cmp	r3, #8
 8009978:	d86c      	bhi.n	8009a54 <UART_SetConfig+0x2fc>
 800997a:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <UART_SetConfig+0x228>)
 800997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009980:	080099a5 	.word	0x080099a5
 8009984:	080099c5 	.word	0x080099c5
 8009988:	080099e5 	.word	0x080099e5
 800998c:	08009a55 	.word	0x08009a55
 8009990:	08009a01 	.word	0x08009a01
 8009994:	08009a55 	.word	0x08009a55
 8009998:	08009a55 	.word	0x08009a55
 800999c:	08009a55 	.word	0x08009a55
 80099a0:	08009a21 	.word	0x08009a21
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099a4:	f7fd fb94 	bl	80070d0 <HAL_RCC_GetPCLK1Freq>
 80099a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	005a      	lsls	r2, r3, #1
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	085b      	lsrs	r3, r3, #1
 80099b4:	441a      	add	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80099be:	b29b      	uxth	r3, r3
 80099c0:	61bb      	str	r3, [r7, #24]
        break;
 80099c2:	e04a      	b.n	8009a5a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099c4:	f7fd fba6 	bl	8007114 <HAL_RCC_GetPCLK2Freq>
 80099c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	005a      	lsls	r2, r3, #1
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	085b      	lsrs	r3, r3, #1
 80099d4:	441a      	add	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	fbb2 f3f3 	udiv	r3, r2, r3
 80099de:	b29b      	uxth	r3, r3
 80099e0:	61bb      	str	r3, [r7, #24]
        break;
 80099e2:	e03a      	b.n	8009a5a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	085b      	lsrs	r3, r3, #1
 80099ea:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80099ee:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	6852      	ldr	r2, [r2, #4]
 80099f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	61bb      	str	r3, [r7, #24]
        break;
 80099fe:	e02c      	b.n	8009a5a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a00:	f7fd faf0 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8009a04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	005a      	lsls	r2, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	085b      	lsrs	r3, r3, #1
 8009a10:	441a      	add	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	61bb      	str	r3, [r7, #24]
        break;
 8009a1e:	e01c      	b.n	8009a5a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	085b      	lsrs	r3, r3, #1
 8009a26:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	61bb      	str	r3, [r7, #24]
        break;
 8009a36:	e010      	b.n	8009a5a <UART_SetConfig+0x302>
 8009a38:	efff69f3 	.word	0xefff69f3
 8009a3c:	40013800 	.word	0x40013800
 8009a40:	40021000 	.word	0x40021000
 8009a44:	40004400 	.word	0x40004400
 8009a48:	40004800 	.word	0x40004800
 8009a4c:	40004c00 	.word	0x40004c00
 8009a50:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	75fb      	strb	r3, [r7, #23]
        break;
 8009a58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	2b0f      	cmp	r3, #15
 8009a5e:	d916      	bls.n	8009a8e <UART_SetConfig+0x336>
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a66:	d212      	bcs.n	8009a8e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	f023 030f 	bic.w	r3, r3, #15
 8009a70:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	085b      	lsrs	r3, r3, #1
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	897b      	ldrh	r3, [r7, #10]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	897a      	ldrh	r2, [r7, #10]
 8009a8a:	60da      	str	r2, [r3, #12]
 8009a8c:	e072      	b.n	8009b74 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	75fb      	strb	r3, [r7, #23]
 8009a92:	e06f      	b.n	8009b74 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8009a94:	7ffb      	ldrb	r3, [r7, #31]
 8009a96:	2b08      	cmp	r3, #8
 8009a98:	d85b      	bhi.n	8009b52 <UART_SetConfig+0x3fa>
 8009a9a:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <UART_SetConfig+0x348>)
 8009a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa0:	08009ac5 	.word	0x08009ac5
 8009aa4:	08009ae3 	.word	0x08009ae3
 8009aa8:	08009b01 	.word	0x08009b01
 8009aac:	08009b53 	.word	0x08009b53
 8009ab0:	08009b1d 	.word	0x08009b1d
 8009ab4:	08009b53 	.word	0x08009b53
 8009ab8:	08009b53 	.word	0x08009b53
 8009abc:	08009b53 	.word	0x08009b53
 8009ac0:	08009b3b 	.word	0x08009b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ac4:	f7fd fb04 	bl	80070d0 <HAL_RCC_GetPCLK1Freq>
 8009ac8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	085a      	lsrs	r2, r3, #1
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	441a      	add	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	61bb      	str	r3, [r7, #24]
        break;
 8009ae0:	e03a      	b.n	8009b58 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ae2:	f7fd fb17 	bl	8007114 <HAL_RCC_GetPCLK2Freq>
 8009ae6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	085a      	lsrs	r2, r3, #1
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	441a      	add	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	61bb      	str	r3, [r7, #24]
        break;
 8009afe:	e02b      	b.n	8009b58 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	085b      	lsrs	r3, r3, #1
 8009b06:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8009b0a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	6852      	ldr	r2, [r2, #4]
 8009b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	61bb      	str	r3, [r7, #24]
        break;
 8009b1a:	e01d      	b.n	8009b58 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b1c:	f7fd fa62 	bl	8006fe4 <HAL_RCC_GetSysClockFreq>
 8009b20:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	085a      	lsrs	r2, r3, #1
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	441a      	add	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	61bb      	str	r3, [r7, #24]
        break;
 8009b38:	e00e      	b.n	8009b58 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	085b      	lsrs	r3, r3, #1
 8009b40:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	61bb      	str	r3, [r7, #24]
        break;
 8009b50:	e002      	b.n	8009b58 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	75fb      	strb	r3, [r7, #23]
        break;
 8009b56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	2b0f      	cmp	r3, #15
 8009b5c:	d908      	bls.n	8009b70 <UART_SetConfig+0x418>
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b64:	d204      	bcs.n	8009b70 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	69ba      	ldr	r2, [r7, #24]
 8009b6c:	60da      	str	r2, [r3, #12]
 8009b6e:	e001      	b.n	8009b74 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3720      	adds	r7, #32
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop

08009b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00a      	beq.n	8009bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	f003 0302 	and.w	r3, r3, #2
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00a      	beq.n	8009bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bdc:	f003 0304 	and.w	r3, r3, #4
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00a      	beq.n	8009bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	f003 0308 	and.w	r3, r3, #8
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00a      	beq.n	8009c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	430a      	orrs	r2, r1
 8009c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	f003 0310 	and.w	r3, r3, #16
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00a      	beq.n	8009c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	f003 0320 	and.w	r3, r3, #32
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00a      	beq.n	8009c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d01a      	beq.n	8009ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c8a:	d10a      	bne.n	8009ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00a      	beq.n	8009cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	605a      	str	r2, [r3, #4]
  }
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af02      	add	r7, sp, #8
 8009cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009cde:	f7f9 fb5b 	bl	8003398 <HAL_GetTick>
 8009ce2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 0308 	and.w	r3, r3, #8
 8009cee:	2b08      	cmp	r3, #8
 8009cf0:	d10e      	bne.n	8009d10 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cf2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f82a 	bl	8009d5a <UART_WaitOnFlagUntilTimeout>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e020      	b.n	8009d52 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0304 	and.w	r3, r3, #4
 8009d1a:	2b04      	cmp	r3, #4
 8009d1c:	d10e      	bne.n	8009d3c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d22:	9300      	str	r3, [sp, #0]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f814 	bl	8009d5a <UART_WaitOnFlagUntilTimeout>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e00a      	b.n	8009d52 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2220      	movs	r2, #32
 8009d40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2220      	movs	r2, #32
 8009d46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	603b      	str	r3, [r7, #0]
 8009d66:	4613      	mov	r3, r2
 8009d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d6a:	e05d      	b.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d72:	d059      	beq.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d74:	f7f9 fb10 	bl	8003398 <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	69ba      	ldr	r2, [r7, #24]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d302      	bcc.n	8009d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d11b      	bne.n	8009dc2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009d98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 0201 	bic.w	r2, r2, #1
 8009da8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2220      	movs	r2, #32
 8009dae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2220      	movs	r2, #32
 8009db4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e042      	b.n	8009e48 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0304 	and.w	r3, r3, #4
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d02b      	beq.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dde:	d123      	bne.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009de8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009df8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689a      	ldr	r2, [r3, #8]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f022 0201 	bic.w	r2, r2, #1
 8009e08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2220      	movs	r2, #32
 8009e14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e00f      	b.n	8009e48 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	69da      	ldr	r2, [r3, #28]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	4013      	ands	r3, r2
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	bf0c      	ite	eq
 8009e38:	2301      	moveq	r3, #1
 8009e3a:	2300      	movne	r3, #0
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	461a      	mov	r2, r3
 8009e40:	79fb      	ldrb	r3, [r7, #7]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d092      	beq.n	8009d6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009e54:	4904      	ldr	r1, [pc, #16]	; (8009e68 <MX_FATFS_Init+0x18>)
 8009e56:	4805      	ldr	r0, [pc, #20]	; (8009e6c <MX_FATFS_Init+0x1c>)
 8009e58:	f004 f88c 	bl	800df74 <FATFS_LinkDriver>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	461a      	mov	r2, r3
 8009e60:	4b03      	ldr	r3, [pc, #12]	; (8009e70 <MX_FATFS_Init+0x20>)
 8009e62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009e64:	bf00      	nop
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	200017dc 	.word	0x200017dc
 8009e6c:	20000010 	.word	0x20000010
 8009e70:	200017e0 	.word	0x200017e0

08009e74 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009e74:	b480      	push	{r7}
 8009e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009e78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8009e8e:	79fb      	ldrb	r3, [r7, #7]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7f7 fe07 	bl	8001aa4 <SD_disk_initialize>
 8009e96:	4603      	mov	r3, r0
 8009e98:	b2db      	uxtb	r3, r3
	//disk_initialize(pdrv);
  /* USER CODE END INIT */
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b082      	sub	sp, #8
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8009eac:	79fb      	ldrb	r3, [r7, #7]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7f7 fee4 	bl	8001c7c <SD_disk_status>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	b2db      	uxtb	r3, r3
	//return disk_status(pdrv);
  /* USER CODE END STATUS */
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	607a      	str	r2, [r7, #4]
 8009eca:	603b      	str	r3, [r7, #0]
 8009ecc:	4603      	mov	r3, r0
 8009ece:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8009ed0:	7bf8      	ldrb	r0, [r7, #15]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	68b9      	ldr	r1, [r7, #8]
 8009ed8:	f7f7 fee6 	bl	8001ca8 <SD_disk_read>
 8009edc:	4603      	mov	r3, r0
 8009ede:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60b9      	str	r1, [r7, #8]
 8009ef0:	607a      	str	r2, [r7, #4]
 8009ef2:	603b      	str	r3, [r7, #0]
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8009ef8:	7bf8      	ldrb	r0, [r7, #15]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	68b9      	ldr	r1, [r7, #8]
 8009f00:	f7f7 ff3c 	bl	8001d7c <SD_disk_write>
 8009f04:	4603      	mov	r3, r0
 8009f06:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	603a      	str	r2, [r7, #0]
 8009f1a:	71fb      	strb	r3, [r7, #7]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 8009f20:	79fb      	ldrb	r3, [r7, #7]
 8009f22:	79b9      	ldrb	r1, [r7, #6]
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7f7 ffac 	bl	8001e84 <SD_disk_ioctl>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009f42:	79fb      	ldrb	r3, [r7, #7]
 8009f44:	4a08      	ldr	r2, [pc, #32]	; (8009f68 <disk_status+0x30>)
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	79fa      	ldrb	r2, [r7, #7]
 8009f50:	4905      	ldr	r1, [pc, #20]	; (8009f68 <disk_status+0x30>)
 8009f52:	440a      	add	r2, r1
 8009f54:	7a12      	ldrb	r2, [r2, #8]
 8009f56:	4610      	mov	r0, r2
 8009f58:	4798      	blx	r3
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	2000045c 	.word	0x2000045c

08009f6c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	4603      	mov	r3, r0
 8009f74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8009f7a:	79fb      	ldrb	r3, [r7, #7]
 8009f7c:	4a0d      	ldr	r2, [pc, #52]	; (8009fb4 <disk_initialize+0x48>)
 8009f7e:	5cd3      	ldrb	r3, [r2, r3]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d111      	bne.n	8009fa8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8009f84:	79fb      	ldrb	r3, [r7, #7]
 8009f86:	4a0b      	ldr	r2, [pc, #44]	; (8009fb4 <disk_initialize+0x48>)
 8009f88:	2101      	movs	r1, #1
 8009f8a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009f8c:	79fb      	ldrb	r3, [r7, #7]
 8009f8e:	4a09      	ldr	r2, [pc, #36]	; (8009fb4 <disk_initialize+0x48>)
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	79fa      	ldrb	r2, [r7, #7]
 8009f9a:	4906      	ldr	r1, [pc, #24]	; (8009fb4 <disk_initialize+0x48>)
 8009f9c:	440a      	add	r2, r1
 8009f9e:	7a12      	ldrb	r2, [r2, #8]
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	4798      	blx	r3
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	2000045c 	.word	0x2000045c

08009fb8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009fb8:	b590      	push	{r4, r7, lr}
 8009fba:	b087      	sub	sp, #28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60b9      	str	r1, [r7, #8]
 8009fc0:	607a      	str	r2, [r7, #4]
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	4a0a      	ldr	r2, [pc, #40]	; (8009ff4 <disk_read+0x3c>)
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	689c      	ldr	r4, [r3, #8]
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
 8009fd6:	4a07      	ldr	r2, [pc, #28]	; (8009ff4 <disk_read+0x3c>)
 8009fd8:	4413      	add	r3, r2
 8009fda:	7a18      	ldrb	r0, [r3, #8]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	68b9      	ldr	r1, [r7, #8]
 8009fe2:	47a0      	blx	r4
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd90      	pop	{r4, r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	2000045c 	.word	0x2000045c

08009ff8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009ff8:	b590      	push	{r4, r7, lr}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60b9      	str	r1, [r7, #8]
 800a000:	607a      	str	r2, [r7, #4]
 800a002:	603b      	str	r3, [r7, #0]
 800a004:	4603      	mov	r3, r0
 800a006:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	4a0a      	ldr	r2, [pc, #40]	; (800a034 <disk_write+0x3c>)
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	68dc      	ldr	r4, [r3, #12]
 800a014:	7bfb      	ldrb	r3, [r7, #15]
 800a016:	4a07      	ldr	r2, [pc, #28]	; (800a034 <disk_write+0x3c>)
 800a018:	4413      	add	r3, r2
 800a01a:	7a18      	ldrb	r0, [r3, #8]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	68b9      	ldr	r1, [r7, #8]
 800a022:	47a0      	blx	r4
 800a024:	4603      	mov	r3, r0
 800a026:	75fb      	strb	r3, [r7, #23]
  return res;
 800a028:	7dfb      	ldrb	r3, [r7, #23]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	371c      	adds	r7, #28
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd90      	pop	{r4, r7, pc}
 800a032:	bf00      	nop
 800a034:	2000045c 	.word	0x2000045c

0800a038 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	4603      	mov	r3, r0
 800a040:	603a      	str	r2, [r7, #0]
 800a042:	71fb      	strb	r3, [r7, #7]
 800a044:	460b      	mov	r3, r1
 800a046:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a048:	79fb      	ldrb	r3, [r7, #7]
 800a04a:	4a09      	ldr	r2, [pc, #36]	; (800a070 <disk_ioctl+0x38>)
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4413      	add	r3, r2
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	79fa      	ldrb	r2, [r7, #7]
 800a056:	4906      	ldr	r1, [pc, #24]	; (800a070 <disk_ioctl+0x38>)
 800a058:	440a      	add	r2, r1
 800a05a:	7a10      	ldrb	r0, [r2, #8]
 800a05c:	79b9      	ldrb	r1, [r7, #6]
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	4798      	blx	r3
 800a062:	4603      	mov	r3, r0
 800a064:	73fb      	strb	r3, [r7, #15]
  return res;
 800a066:	7bfb      	ldrb	r3, [r7, #15]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	2000045c 	.word	0x2000045c

0800a074 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800a088:	e007      	b.n	800a09a <mem_cpy+0x26>
		*d++ = *s++;
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	1c53      	adds	r3, r2, #1
 800a08e:	613b      	str	r3, [r7, #16]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	1c59      	adds	r1, r3, #1
 800a094:	6179      	str	r1, [r7, #20]
 800a096:	7812      	ldrb	r2, [r2, #0]
 800a098:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	1e5a      	subs	r2, r3, #1
 800a09e:	607a      	str	r2, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1f2      	bne.n	800a08a <mem_cpy+0x16>
}
 800a0a4:	bf00      	nop
 800a0a6:	371c      	adds	r7, #28
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a0b0:	b480      	push	{r7}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800a0c0:	e005      	b.n	800a0ce <mem_set+0x1e>
		*d++ = (BYTE)val;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	1c5a      	adds	r2, r3, #1
 800a0c6:	617a      	str	r2, [r7, #20]
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	b2d2      	uxtb	r2, r2
 800a0cc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	1e5a      	subs	r2, r3, #1
 800a0d2:	607a      	str	r2, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1f4      	bne.n	800a0c2 <mem_set+0x12>
}
 800a0d8:	bf00      	nop
 800a0da:	371c      	adds	r7, #28
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800a0e4:	b480      	push	{r7}
 800a0e6:	b089      	sub	sp, #36	; 0x24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	61fb      	str	r3, [r7, #28]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800a0fc:	bf00      	nop
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	1e5a      	subs	r2, r3, #1
 800a102:	607a      	str	r2, [r7, #4]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00d      	beq.n	800a124 <mem_cmp+0x40>
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	1c5a      	adds	r2, r3, #1
 800a10c:	61fa      	str	r2, [r7, #28]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	4619      	mov	r1, r3
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	61ba      	str	r2, [r7, #24]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	1acb      	subs	r3, r1, r3
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d0ec      	beq.n	800a0fe <mem_cmp+0x1a>
	return r;
 800a124:	697b      	ldr	r3, [r7, #20]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3724      	adds	r7, #36	; 0x24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a13c:	e002      	b.n	800a144 <chk_chr+0x12>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	3301      	adds	r3, #1
 800a142:	607b      	str	r3, [r7, #4]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d005      	beq.n	800a158 <chk_chr+0x26>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	4293      	cmp	r3, r2
 800a156:	d1f2      	bne.n	800a13e <chk_chr+0xc>
	return *str;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	781b      	ldrb	r3, [r3, #0]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a172:	2300      	movs	r3, #0
 800a174:	60bb      	str	r3, [r7, #8]
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	60fb      	str	r3, [r7, #12]
 800a17a:	e03d      	b.n	800a1f8 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 800a17c:	4932      	ldr	r1, [pc, #200]	; (800a248 <chk_lock+0xe0>)
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	4613      	mov	r3, r2
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	4413      	add	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	440b      	add	r3, r1
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d02e      	beq.n	800a1ee <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800a190:	492d      	ldr	r1, [pc, #180]	; (800a248 <chk_lock+0xe0>)
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	4613      	mov	r3, r2
 800a196:	005b      	lsls	r3, r3, #1
 800a198:	4413      	add	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	440b      	add	r3, r1
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d122      	bne.n	800a1f2 <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 800a1ac:	4926      	ldr	r1, [pc, #152]	; (800a248 <chk_lock+0xe0>)
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	4413      	add	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	440b      	add	r3, r1
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d112      	bne.n	800a1f2 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800a1cc:	491e      	ldr	r1, [pc, #120]	; (800a248 <chk_lock+0xe0>)
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	4413      	add	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	440b      	add	r3, r1
 800a1da:	3308      	adds	r3, #8
 800a1dc:	881a      	ldrh	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e4:	3306      	adds	r3, #6
 800a1e6:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d102      	bne.n	800a1f2 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 800a1ec:	e007      	b.n	800a1fe <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	60fb      	str	r3, [r7, #12]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d9be      	bls.n	800a17c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2b02      	cmp	r3, #2
 800a202:	d109      	bne.n	800a218 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d102      	bne.n	800a210 <chk_lock+0xa8>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d101      	bne.n	800a214 <chk_lock+0xac>
 800a210:	2300      	movs	r3, #0
 800a212:	e013      	b.n	800a23c <chk_lock+0xd4>
 800a214:	2312      	movs	r3, #18
 800a216:	e011      	b.n	800a23c <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10b      	bne.n	800a236 <chk_lock+0xce>
 800a21e:	490a      	ldr	r1, [pc, #40]	; (800a248 <chk_lock+0xe0>)
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	4613      	mov	r3, r2
 800a224:	005b      	lsls	r3, r3, #1
 800a226:	4413      	add	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	440b      	add	r3, r1
 800a22c:	330a      	adds	r3, #10
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a234:	d101      	bne.n	800a23a <chk_lock+0xd2>
 800a236:	2310      	movs	r3, #16
 800a238:	e000      	b.n	800a23c <chk_lock+0xd4>
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	20000244 	.word	0x20000244

0800a24c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a252:	2300      	movs	r3, #0
 800a254:	607b      	str	r3, [r7, #4]
 800a256:	e002      	b.n	800a25e <enq_lock+0x12>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	3301      	adds	r3, #1
 800a25c:	607b      	str	r3, [r7, #4]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d809      	bhi.n	800a278 <enq_lock+0x2c>
 800a264:	490a      	ldr	r1, [pc, #40]	; (800a290 <enq_lock+0x44>)
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	4613      	mov	r3, r2
 800a26a:	005b      	lsls	r3, r3, #1
 800a26c:	4413      	add	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	440b      	add	r3, r1
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1ef      	bne.n	800a258 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	bf14      	ite	ne
 800a27e:	2301      	movne	r3, #1
 800a280:	2300      	moveq	r3, #0
 800a282:	b2db      	uxtb	r3, r3
}
 800a284:	4618      	mov	r0, r3
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	20000244 	.word	0x20000244

0800a294 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60fb      	str	r3, [r7, #12]
 800a2a2:	e030      	b.n	800a306 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 800a2a4:	495b      	ldr	r1, [pc, #364]	; (800a414 <inc_lock+0x180>)
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	4413      	add	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	440b      	add	r3, r1
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d11f      	bne.n	800a300 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 800a2c0:	4954      	ldr	r1, [pc, #336]	; (800a414 <inc_lock+0x180>)
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	440b      	add	r3, r1
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2d8:	3308      	adds	r3, #8
 800a2da:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d10f      	bne.n	800a300 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800a2e0:	494c      	ldr	r1, [pc, #304]	; (800a414 <inc_lock+0x180>)
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	005b      	lsls	r3, r3, #1
 800a2e8:	4413      	add	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	440b      	add	r3, r1
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	881a      	ldrh	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2f8:	3306      	adds	r3, #6
 800a2fa:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d006      	beq.n	800a30e <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3301      	adds	r3, #1
 800a304:	60fb      	str	r3, [r7, #12]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d9cb      	bls.n	800a2a4 <inc_lock+0x10>
 800a30c:	e000      	b.n	800a310 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 800a30e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2b02      	cmp	r3, #2
 800a314:	d14a      	bne.n	800a3ac <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a316:	2300      	movs	r3, #0
 800a318:	60fb      	str	r3, [r7, #12]
 800a31a:	e002      	b.n	800a322 <inc_lock+0x8e>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	3301      	adds	r3, #1
 800a320:	60fb      	str	r3, [r7, #12]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d809      	bhi.n	800a33c <inc_lock+0xa8>
 800a328:	493a      	ldr	r1, [pc, #232]	; (800a414 <inc_lock+0x180>)
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	4613      	mov	r3, r2
 800a32e:	005b      	lsls	r3, r3, #1
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	440b      	add	r3, r1
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1ef      	bne.n	800a31c <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d101      	bne.n	800a346 <inc_lock+0xb2>
 800a342:	2300      	movs	r3, #0
 800a344:	e05f      	b.n	800a406 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a34c:	6819      	ldr	r1, [r3, #0]
 800a34e:	4831      	ldr	r0, [pc, #196]	; (800a414 <inc_lock+0x180>)
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	4613      	mov	r3, r2
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	4413      	add	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4403      	add	r3, r0
 800a35c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a364:	3308      	adds	r3, #8
 800a366:	6819      	ldr	r1, [r3, #0]
 800a368:	482a      	ldr	r0, [pc, #168]	; (800a414 <inc_lock+0x180>)
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	4613      	mov	r3, r2
 800a36e:	005b      	lsls	r3, r3, #1
 800a370:	4413      	add	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4403      	add	r3, r0
 800a376:	3304      	adds	r3, #4
 800a378:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a380:	3306      	adds	r3, #6
 800a382:	8818      	ldrh	r0, [r3, #0]
 800a384:	4923      	ldr	r1, [pc, #140]	; (800a414 <inc_lock+0x180>)
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	4613      	mov	r3, r2
 800a38a:	005b      	lsls	r3, r3, #1
 800a38c:	4413      	add	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	440b      	add	r3, r1
 800a392:	3308      	adds	r3, #8
 800a394:	4602      	mov	r2, r0
 800a396:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800a398:	491e      	ldr	r1, [pc, #120]	; (800a414 <inc_lock+0x180>)
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	4613      	mov	r3, r2
 800a39e:	005b      	lsls	r3, r3, #1
 800a3a0:	4413      	add	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	440b      	add	r3, r1
 800a3a6:	330a      	adds	r3, #10
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00c      	beq.n	800a3cc <inc_lock+0x138>
 800a3b2:	4918      	ldr	r1, [pc, #96]	; (800a414 <inc_lock+0x180>)
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	005b      	lsls	r3, r3, #1
 800a3ba:	4413      	add	r3, r2
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	440b      	add	r3, r1
 800a3c0:	330a      	adds	r3, #10
 800a3c2:	881b      	ldrh	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <inc_lock+0x138>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	e01c      	b.n	800a406 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10b      	bne.n	800a3ea <inc_lock+0x156>
 800a3d2:	4910      	ldr	r1, [pc, #64]	; (800a414 <inc_lock+0x180>)
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	4413      	add	r3, r2
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	440b      	add	r3, r1
 800a3e0:	330a      	adds	r3, #10
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	b299      	uxth	r1, r3
 800a3e8:	e001      	b.n	800a3ee <inc_lock+0x15a>
 800a3ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a3ee:	4809      	ldr	r0, [pc, #36]	; (800a414 <inc_lock+0x180>)
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	005b      	lsls	r3, r3, #1
 800a3f6:	4413      	add	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4403      	add	r3, r0
 800a3fc:	330a      	adds	r3, #10
 800a3fe:	460a      	mov	r2, r1
 800a400:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3301      	adds	r3, #1
}
 800a406:	4618      	mov	r0, r3
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	20000244 	.word	0x20000244

0800a418 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	3b01      	subs	r3, #1
 800a424:	607b      	str	r3, [r7, #4]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d82e      	bhi.n	800a48a <dec_lock+0x72>
		n = Files[i].ctr;
 800a42c:	491b      	ldr	r1, [pc, #108]	; (800a49c <dec_lock+0x84>)
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	4613      	mov	r3, r2
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	4413      	add	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	440b      	add	r3, r1
 800a43a:	330a      	adds	r3, #10
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a440:	89fb      	ldrh	r3, [r7, #14]
 800a442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a446:	d101      	bne.n	800a44c <dec_lock+0x34>
 800a448:	2300      	movs	r3, #0
 800a44a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800a44c:	89fb      	ldrh	r3, [r7, #14]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d002      	beq.n	800a458 <dec_lock+0x40>
 800a452:	89fb      	ldrh	r3, [r7, #14]
 800a454:	3b01      	subs	r3, #1
 800a456:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a458:	4910      	ldr	r1, [pc, #64]	; (800a49c <dec_lock+0x84>)
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	4613      	mov	r3, r2
 800a45e:	005b      	lsls	r3, r3, #1
 800a460:	4413      	add	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	440b      	add	r3, r1
 800a466:	330a      	adds	r3, #10
 800a468:	89fa      	ldrh	r2, [r7, #14]
 800a46a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a46c:	89fb      	ldrh	r3, [r7, #14]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d108      	bne.n	800a484 <dec_lock+0x6c>
 800a472:	490a      	ldr	r1, [pc, #40]	; (800a49c <dec_lock+0x84>)
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	4613      	mov	r3, r2
 800a478:	005b      	lsls	r3, r3, #1
 800a47a:	4413      	add	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	440b      	add	r3, r1
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	737b      	strb	r3, [r7, #13]
 800a488:	e001      	b.n	800a48e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a48a:	2302      	movs	r3, #2
 800a48c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a48e:	7b7b      	ldrb	r3, [r7, #13]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3714      	adds	r7, #20
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	20000244 	.word	0x20000244

0800a4a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	e016      	b.n	800a4dc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a4ae:	4910      	ldr	r1, [pc, #64]	; (800a4f0 <clear_lock+0x50>)
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	005b      	lsls	r3, r3, #1
 800a4b6:	4413      	add	r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	440b      	add	r3, r1
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d108      	bne.n	800a4d6 <clear_lock+0x36>
 800a4c4:	490a      	ldr	r1, [pc, #40]	; (800a4f0 <clear_lock+0x50>)
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	4413      	add	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	440b      	add	r3, r1
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d9e5      	bls.n	800a4ae <clear_lock+0xe>
	}
}
 800a4e2:	bf00      	nop
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	20000244 	.word	0x20000244

0800a4f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a506:	3304      	adds	r3, #4
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d047      	beq.n	800a59e <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a514:	330c      	adds	r3, #12
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a520:	3301      	adds	r3, #1
 800a522:	7818      	ldrb	r0, [r3, #0]
 800a524:	6879      	ldr	r1, [r7, #4]
 800a526:	2301      	movs	r3, #1
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	f7ff fd65 	bl	8009ff8 <disk_write>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <sync_window+0x46>
			res = FR_DISK_ERR;
 800a534:	2301      	movs	r3, #1
 800a536:	73fb      	strb	r3, [r7, #15]
 800a538:	e031      	b.n	800a59e <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a540:	3304      	adds	r3, #4
 800a542:	2200      	movs	r2, #0
 800a544:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	1ad2      	subs	r2, r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a558:	3318      	adds	r3, #24
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d21e      	bcs.n	800a59e <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a566:	3303      	adds	r3, #3
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	613b      	str	r3, [r7, #16]
 800a56c:	e014      	b.n	800a598 <sync_window+0xa4>
					wsect += fs->fsize;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a574:	3318      	adds	r3, #24
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	4413      	add	r3, r2
 800a57c:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a584:	3301      	adds	r3, #1
 800a586:	7818      	ldrb	r0, [r3, #0]
 800a588:	6879      	ldr	r1, [r7, #4]
 800a58a:	2301      	movs	r3, #1
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	f7ff fd33 	bl	8009ff8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	3b01      	subs	r3, #1
 800a596:	613b      	str	r3, [r7, #16]
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d8e7      	bhi.n	800a56e <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 800a59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a5bc:	330c      	adds	r3, #12
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d01f      	beq.n	800a606 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7ff ff94 	bl	800a4f4 <sync_window>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d117      	bne.n	800a606 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5dc:	3301      	adds	r3, #1
 800a5de:	7818      	ldrb	r0, [r3, #0]
 800a5e0:	6879      	ldr	r1, [r7, #4]
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	f7ff fce7 	bl	8009fb8 <disk_read>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d004      	beq.n	800a5fa <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a600:	330c      	adds	r3, #12
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f7ff ff6b 	bl	800a4f4 <sync_window>
 800a61e:	4603      	mov	r3, r0
 800a620:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a622:	7bfb      	ldrb	r3, [r7, #15]
 800a624:	2b00      	cmp	r3, #0
 800a626:	f040 80bd 	bne.w	800a7a4 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	2b03      	cmp	r3, #3
 800a634:	f040 80a7 	bne.w	800a786 <sync_fs+0x176>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a63e:	3305      	adds	r3, #5
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	2b01      	cmp	r3, #1
 800a644:	f040 809f 	bne.w	800a786 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a650:	330a      	adds	r3, #10
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	461a      	mov	r2, r3
 800a656:	2100      	movs	r1, #0
 800a658:	f7ff fd2a 	bl	800a0b0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2255      	movs	r2, #85	; 0x55
 800a660:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	22aa      	movs	r2, #170	; 0xaa
 800a668:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2252      	movs	r2, #82	; 0x52
 800a670:	701a      	strb	r2, [r3, #0]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2252      	movs	r2, #82	; 0x52
 800a676:	705a      	strb	r2, [r3, #1]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2261      	movs	r2, #97	; 0x61
 800a67c:	709a      	strb	r2, [r3, #2]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2241      	movs	r2, #65	; 0x41
 800a682:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2272      	movs	r2, #114	; 0x72
 800a688:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2272      	movs	r2, #114	; 0x72
 800a690:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2241      	movs	r2, #65	; 0x41
 800a698:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2261      	movs	r2, #97	; 0x61
 800a6a0:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6aa:	3310      	adds	r3, #16
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6bc:	3310      	adds	r3, #16
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	0a1b      	lsrs	r3, r3, #8
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	b2da      	uxtb	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d4:	3310      	adds	r3, #16
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	0c1b      	lsrs	r3, r3, #16
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6e8:	3310      	adds	r3, #16
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	0e1b      	lsrs	r3, r3, #24
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6fc:	330c      	adds	r3, #12
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	b2da      	uxtb	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a70e:	330c      	adds	r3, #12
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	b29b      	uxth	r3, r3
 800a714:	0a1b      	lsrs	r3, r3, #8
 800a716:	b29b      	uxth	r3, r3
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a726:	330c      	adds	r3, #12
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	0c1b      	lsrs	r3, r3, #16
 800a72c:	b2da      	uxtb	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a73a:	330c      	adds	r3, #12
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	0e1b      	lsrs	r3, r3, #24
 800a740:	b2da      	uxtb	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a74e:	331c      	adds	r3, #28
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	1c5a      	adds	r2, r3, #1
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a75a:	330c      	adds	r3, #12
 800a75c:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a764:	3301      	adds	r3, #1
 800a766:	7818      	ldrb	r0, [r3, #0]
 800a768:	6879      	ldr	r1, [r7, #4]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a770:	330c      	adds	r3, #12
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	2301      	movs	r3, #1
 800a776:	f7ff fc3f 	bl	8009ff8 <disk_write>
			fs->fsi_flag = 0;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a780:	3305      	adds	r3, #5
 800a782:	2200      	movs	r2, #0
 800a784:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a78c:	3301      	adds	r3, #1
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	2200      	movs	r2, #0
 800a792:	2100      	movs	r1, #0
 800a794:	4618      	mov	r0, r3
 800a796:	f7ff fc4f 	bl	800a038 <disk_ioctl>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <sync_fs+0x194>
			res = FR_DISK_ERR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b083      	sub	sp, #12
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	3b02      	subs	r3, #2
 800a7bc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7c4:	3314      	adds	r3, #20
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	3b02      	subs	r3, #2
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d301      	bcc.n	800a7d4 <clust2sect+0x26>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	e00e      	b.n	800a7f2 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7da:	3302      	adds	r3, #2
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	fb03 f202 	mul.w	r2, r3, r2
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4413      	add	r3, r2
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b086      	sub	sp, #24
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d907      	bls.n	800a81e <get_fat+0x20>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a814:	3314      	adds	r3, #20
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d302      	bcc.n	800a824 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a81e:	2301      	movs	r3, #1
 800a820:	617b      	str	r3, [r7, #20]
 800a822:	e0e9      	b.n	800a9f8 <get_fat+0x1fa>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a824:	f04f 33ff 	mov.w	r3, #4294967295
 800a828:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	2b02      	cmp	r3, #2
 800a834:	d068      	beq.n	800a908 <get_fat+0x10a>
 800a836:	2b03      	cmp	r3, #3
 800a838:	f000 8099 	beq.w	800a96e <get_fat+0x170>
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	f040 80d1 	bne.w	800a9e4 <get_fat+0x1e6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	60fb      	str	r3, [r7, #12]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	085b      	lsrs	r3, r3, #1
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	4413      	add	r3, r2
 800a84e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a85e:	330a      	adds	r3, #10
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	4619      	mov	r1, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	fbb3 f3f1 	udiv	r3, r3, r1
 800a86a:	4413      	add	r3, r2
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7ff fe9a 	bl	800a5a8 <move_window>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	f040 80b7 	bne.w	800a9ea <get_fat+0x1ec>
			wc = fs->win.d8[bc++ % SS(fs)];
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	1c5a      	adds	r2, r3, #1
 800a880:	60fa      	str	r2, [r7, #12]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a888:	320a      	adds	r2, #10
 800a88a:	8812      	ldrh	r2, [r2, #0]
 800a88c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a890:	fb02 f201 	mul.w	r2, r2, r1
 800a894:	1a9b      	subs	r3, r3, r2
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	5cd3      	ldrb	r3, [r2, r3]
 800a89a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8aa:	330a      	adds	r3, #10
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8b6:	4413      	add	r3, r2
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7ff fe74 	bl	800a5a8 <move_window>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f040 8093 	bne.w	800a9ee <get_fat+0x1f0>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ce:	330a      	adds	r3, #10
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8da:	fb02 f201 	mul.w	r2, r2, r1
 800a8de:	1a9b      	subs	r3, r3, r2
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	5cd3      	ldrb	r3, [r2, r3]
 800a8e4:	021b      	lsls	r3, r3, #8
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	f003 0301 	and.w	r3, r3, #1
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <get_fat+0x100>
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	091b      	lsrs	r3, r3, #4
 800a8fc:	e002      	b.n	800a904 <get_fat+0x106>
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a904:	617b      	str	r3, [r7, #20]
			break;
 800a906:	e077      	b.n	800a9f8 <get_fat+0x1fa>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a916:	330a      	adds	r3, #10
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	085b      	lsrs	r3, r3, #1
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	4619      	mov	r1, r3
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	fbb3 f3f1 	udiv	r3, r3, r1
 800a926:	4413      	add	r3, r2
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7ff fe3c 	bl	800a5a8 <move_window>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d15d      	bne.n	800a9f2 <get_fat+0x1f4>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	005a      	lsls	r2, r3, #1
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a940:	330a      	adds	r3, #10
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	fbb2 f1f3 	udiv	r1, r2, r3
 800a948:	fb03 f301 	mul.w	r3, r3, r1
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	4413      	add	r3, r2
 800a952:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	3301      	adds	r3, #1
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	021b      	lsls	r3, r3, #8
 800a95c:	b21a      	sxth	r2, r3
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	b21b      	sxth	r3, r3
 800a964:	4313      	orrs	r3, r2
 800a966:	b21b      	sxth	r3, r3
 800a968:	b29b      	uxth	r3, r3
 800a96a:	617b      	str	r3, [r7, #20]
			break;
 800a96c:	e044      	b.n	800a9f8 <get_fat+0x1fa>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a97c:	330a      	adds	r3, #10
 800a97e:	881b      	ldrh	r3, [r3, #0]
 800a980:	089b      	lsrs	r3, r3, #2
 800a982:	b29b      	uxth	r3, r3
 800a984:	4619      	mov	r1, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	fbb3 f3f1 	udiv	r3, r3, r1
 800a98c:	4413      	add	r3, r2
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff fe09 	bl	800a5a8 <move_window>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d12c      	bne.n	800a9f6 <get_fat+0x1f8>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	009a      	lsls	r2, r3, #2
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a6:	330a      	adds	r3, #10
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	fbb2 f1f3 	udiv	r1, r2, r3
 800a9ae:	fb03 f301 	mul.w	r3, r3, r1
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	3303      	adds	r3, #3
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	061a      	lsls	r2, r3, #24
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	3302      	adds	r3, #2
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	041b      	lsls	r3, r3, #16
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	3201      	adds	r2, #1
 800a9d0:	7812      	ldrb	r2, [r2, #0]
 800a9d2:	0212      	lsls	r2, r2, #8
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	7812      	ldrb	r2, [r2, #0]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a9e0:	617b      	str	r3, [r7, #20]
			break;
 800a9e2:	e009      	b.n	800a9f8 <get_fat+0x1fa>

		default:
			val = 1;	/* Internal error */
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	617b      	str	r3, [r7, #20]
 800a9e8:	e006      	b.n	800a9f8 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a9ea:	bf00      	nop
 800a9ec:	e004      	b.n	800a9f8 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a9ee:	bf00      	nop
 800a9f0:	e002      	b.n	800a9f8 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a9f2:	bf00      	nop
 800a9f4:	e000      	b.n	800a9f8 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a9f6:	bf00      	nop
		}
	}

	return val;
 800a9f8:	697b      	ldr	r3, [r7, #20]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b088      	sub	sp, #32
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	60f8      	str	r0, [r7, #12]
 800aa0a:	60b9      	str	r1, [r7, #8]
 800aa0c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d907      	bls.n	800aa24 <put_fat+0x22>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa1a:	3314      	adds	r3, #20
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d302      	bcc.n	800aa2a <put_fat+0x28>
		res = FR_INT_ERR;
 800aa24:	2302      	movs	r3, #2
 800aa26:	77fb      	strb	r3, [r7, #31]
 800aa28:	e143      	b.n	800acb2 <put_fat+0x2b0>

	} else {
		switch (fs->fs_type) {
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	f000 809a 	beq.w	800ab6c <put_fat+0x16a>
 800aa38:	2b03      	cmp	r3, #3
 800aa3a:	f000 80d3 	beq.w	800abe4 <put_fat+0x1e2>
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	f040 812d 	bne.w	800ac9e <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	617b      	str	r3, [r7, #20]
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	085b      	lsrs	r3, r3, #1
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	4413      	add	r3, r2
 800aa50:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa60:	330a      	adds	r3, #10
 800aa62:	881b      	ldrh	r3, [r3, #0]
 800aa64:	4619      	mov	r1, r3
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa6c:	4413      	add	r3, r2
 800aa6e:	4619      	mov	r1, r3
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f7ff fd99 	bl	800a5a8 <move_window>
 800aa76:	4603      	mov	r3, r0
 800aa78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa7a:	7ffb      	ldrb	r3, [r7, #31]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f040 8111 	bne.w	800aca4 <put_fat+0x2a2>
			p = &fs->win.d8[bc++ % SS(fs)];
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	1c5a      	adds	r2, r3, #1
 800aa86:	617a      	str	r2, [r7, #20]
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa8e:	320a      	adds	r2, #10
 800aa90:	8812      	ldrh	r2, [r2, #0]
 800aa92:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa96:	fb02 f201 	mul.w	r2, r2, r1
 800aa9a:	1a9b      	subs	r3, r3, r2
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	f003 0301 	and.w	r3, r3, #1
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00d      	beq.n	800aac8 <put_fat+0xc6>
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	b25b      	sxtb	r3, r3
 800aab2:	f003 030f 	and.w	r3, r3, #15
 800aab6:	b25a      	sxtb	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	011b      	lsls	r3, r3, #4
 800aabe:	b25b      	sxtb	r3, r3
 800aac0:	4313      	orrs	r3, r2
 800aac2:	b25b      	sxtb	r3, r3
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	e001      	b.n	800aacc <put_fat+0xca>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	69ba      	ldr	r2, [r7, #24]
 800aace:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aad6:	3304      	adds	r3, #4
 800aad8:	2201      	movs	r2, #1
 800aada:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaea:	330a      	adds	r3, #10
 800aaec:	881b      	ldrh	r3, [r3, #0]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	fbb3 f3f1 	udiv	r3, r3, r1
 800aaf6:	4413      	add	r3, r2
 800aaf8:	4619      	mov	r1, r3
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f7ff fd54 	bl	800a5a8 <move_window>
 800ab00:	4603      	mov	r3, r0
 800ab02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab04:	7ffb      	ldrb	r3, [r7, #31]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f040 80ce 	bne.w	800aca8 <put_fat+0x2a6>
			p = &fs->win.d8[bc % SS(fs)];
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab12:	330a      	adds	r3, #10
 800ab14:	881b      	ldrh	r3, [r3, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab1e:	fb02 f201 	mul.w	r2, r2, r1
 800ab22:	1a9b      	subs	r3, r3, r2
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	4413      	add	r3, r2
 800ab28:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	f003 0301 	and.w	r3, r3, #1
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d003      	beq.n	800ab3c <put_fat+0x13a>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	091b      	lsrs	r3, r3, #4
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	e00e      	b.n	800ab5a <put_fat+0x158>
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	b25b      	sxtb	r3, r3
 800ab42:	f023 030f 	bic.w	r3, r3, #15
 800ab46:	b25a      	sxtb	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	0a1b      	lsrs	r3, r3, #8
 800ab4c:	b25b      	sxtb	r3, r3
 800ab4e:	f003 030f 	and.w	r3, r3, #15
 800ab52:	b25b      	sxtb	r3, r3
 800ab54:	4313      	orrs	r3, r2
 800ab56:	b25b      	sxtb	r3, r3
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	69ba      	ldr	r2, [r7, #24]
 800ab5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab64:	3304      	adds	r3, #4
 800ab66:	2201      	movs	r2, #1
 800ab68:	701a      	strb	r2, [r3, #0]
			break;
 800ab6a:	e0a2      	b.n	800acb2 <put_fat+0x2b0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab7a:	330a      	adds	r3, #10
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	085b      	lsrs	r3, r3, #1
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	4619      	mov	r1, r3
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab8a:	4413      	add	r3, r2
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f7ff fd0a 	bl	800a5a8 <move_window>
 800ab94:	4603      	mov	r3, r0
 800ab96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab98:	7ffb      	ldrb	r3, [r7, #31]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f040 8086 	bne.w	800acac <put_fat+0x2aa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	005a      	lsls	r2, r3, #1
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abaa:	330a      	adds	r3, #10
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	fbb2 f1f3 	udiv	r1, r2, r3
 800abb2:	fb03 f301 	mul.w	r3, r3, r1
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	4413      	add	r3, r2
 800abbc:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	b2da      	uxtb	r2, r3
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	701a      	strb	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	0a1b      	lsrs	r3, r3, #8
 800abcc:	b29a      	uxth	r2, r3
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	3301      	adds	r3, #1
 800abd2:	b2d2      	uxtb	r2, r2
 800abd4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abdc:	3304      	adds	r3, #4
 800abde:	2201      	movs	r2, #1
 800abe0:	701a      	strb	r2, [r3, #0]
			break;
 800abe2:	e066      	b.n	800acb2 <put_fat+0x2b0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf2:	330a      	adds	r3, #10
 800abf4:	881b      	ldrh	r3, [r3, #0]
 800abf6:	089b      	lsrs	r3, r3, #2
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	4619      	mov	r1, r3
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac02:	4413      	add	r3, r2
 800ac04:	4619      	mov	r1, r3
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f7ff fcce 	bl	800a5a8 <move_window>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac10:	7ffb      	ldrb	r3, [r7, #31]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d14c      	bne.n	800acb0 <put_fat+0x2ae>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	009a      	lsls	r2, r3, #2
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac20:	330a      	adds	r3, #10
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac28:	fb03 f301 	mul.w	r3, r3, r1
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	4413      	add	r3, r2
 800ac32:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	3303      	adds	r3, #3
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	061a      	lsls	r2, r3, #24
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	3302      	adds	r3, #2
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	041b      	lsls	r3, r3, #16
 800ac44:	4313      	orrs	r3, r2
 800ac46:	69ba      	ldr	r2, [r7, #24]
 800ac48:	3201      	adds	r2, #1
 800ac4a:	7812      	ldrb	r2, [r2, #0]
 800ac4c:	0212      	lsls	r2, r2, #8
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	69ba      	ldr	r2, [r7, #24]
 800ac52:	7812      	ldrb	r2, [r2, #0]
 800ac54:	4313      	orrs	r3, r2
 800ac56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	701a      	strb	r2, [r3, #0]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	0a1b      	lsrs	r3, r3, #8
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	3301      	adds	r3, #1
 800ac74:	b2d2      	uxtb	r2, r2
 800ac76:	701a      	strb	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	0c1a      	lsrs	r2, r3, #16
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	3302      	adds	r3, #2
 800ac80:	b2d2      	uxtb	r2, r2
 800ac82:	701a      	strb	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	0e1a      	lsrs	r2, r3, #24
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	3303      	adds	r3, #3
 800ac8c:	b2d2      	uxtb	r2, r2
 800ac8e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac96:	3304      	adds	r3, #4
 800ac98:	2201      	movs	r2, #1
 800ac9a:	701a      	strb	r2, [r3, #0]
			break;
 800ac9c:	e009      	b.n	800acb2 <put_fat+0x2b0>

		default :
			res = FR_INT_ERR;
 800ac9e:	2302      	movs	r3, #2
 800aca0:	77fb      	strb	r3, [r7, #31]
 800aca2:	e006      	b.n	800acb2 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800aca4:	bf00      	nop
 800aca6:	e004      	b.n	800acb2 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800aca8:	bf00      	nop
 800acaa:	e002      	b.n	800acb2 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800acac:	bf00      	nop
 800acae:	e000      	b.n	800acb2 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800acb0:	bf00      	nop
		}
	}

	return res;
 800acb2:	7ffb      	ldrb	r3, [r7, #31]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3720      	adds	r7, #32
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d907      	bls.n	800acdc <remove_chain+0x20>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acd2:	3314      	adds	r3, #20
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d302      	bcc.n	800ace2 <remove_chain+0x26>
		res = FR_INT_ERR;
 800acdc:	2302      	movs	r3, #2
 800acde:	73fb      	strb	r3, [r7, #15]
 800ace0:	e04f      	b.n	800ad82 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 800ace2:	2300      	movs	r3, #0
 800ace4:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800ace6:	e040      	b.n	800ad6a <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7ff fd87 	bl	800a7fe <get_fat>
 800acf0:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d041      	beq.n	800ad7c <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d102      	bne.n	800ad04 <remove_chain+0x48>
 800acfe:	2302      	movs	r3, #2
 800ad00:	73fb      	strb	r3, [r7, #15]
 800ad02:	e03e      	b.n	800ad82 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0a:	d102      	bne.n	800ad12 <remove_chain+0x56>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	73fb      	strb	r3, [r7, #15]
 800ad10:	e037      	b.n	800ad82 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800ad12:	2200      	movs	r2, #0
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7ff fe73 	bl	800aa02 <put_fat>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d12c      	bne.n	800ad80 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad2c:	3310      	adds	r3, #16
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad34:	d017      	beq.n	800ad66 <remove_chain+0xaa>
				fs->free_clust++;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad3c:	3310      	adds	r3, #16
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	1c5a      	adds	r2, r3, #1
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad48:	3310      	adds	r3, #16
 800ad4a:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad52:	3305      	adds	r3, #5
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	f043 0301 	orr.w	r3, r3, #1
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad62:	3305      	adds	r3, #5
 800ad64:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad70:	3314      	adds	r3, #20
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	683a      	ldr	r2, [r7, #0]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d3b6      	bcc.n	800ace8 <remove_chain+0x2c>
 800ad7a:	e002      	b.n	800ad82 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 800ad7c:	bf00      	nop
 800ad7e:	e000      	b.n	800ad82 <remove_chain+0xc6>
			if (res != FR_OK) break;
 800ad80:	bf00      	nop
		}
	}

	return res;
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d113      	bne.n	800adc4 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada2:	330c      	adds	r3, #12
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d007      	beq.n	800adbe <create_chain+0x32>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adb4:	3314      	adds	r3, #20
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d31e      	bcc.n	800adfc <create_chain+0x70>
 800adbe:	2301      	movs	r3, #1
 800adc0:	613b      	str	r3, [r7, #16]
 800adc2:	e01b      	b.n	800adfc <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7ff fd19 	bl	800a7fe <get_fat>
 800adcc:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d801      	bhi.n	800add8 <create_chain+0x4c>
 800add4:	2301      	movs	r3, #1
 800add6:	e086      	b.n	800aee6 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adde:	d101      	bne.n	800ade4 <create_chain+0x58>
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	e080      	b.n	800aee6 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adea:	3314      	adds	r3, #20
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d201      	bcs.n	800adf8 <create_chain+0x6c>
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	e076      	b.n	800aee6 <create_chain+0x15a>
		scl = clst;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	3301      	adds	r3, #1
 800ae04:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae0c:	3314      	adds	r3, #20
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	697a      	ldr	r2, [r7, #20]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d307      	bcc.n	800ae26 <create_chain+0x9a>
			ncl = 2;
 800ae16:	2302      	movs	r3, #2
 800ae18:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d901      	bls.n	800ae26 <create_chain+0x9a>
 800ae22:	2300      	movs	r3, #0
 800ae24:	e05f      	b.n	800aee6 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800ae26:	6979      	ldr	r1, [r7, #20]
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff fce8 	bl	800a7fe <get_fat>
 800ae2e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00e      	beq.n	800ae54 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae3c:	d002      	beq.n	800ae44 <create_chain+0xb8>
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d101      	bne.n	800ae48 <create_chain+0xbc>
			return cs;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	e04e      	b.n	800aee6 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d1d7      	bne.n	800ae00 <create_chain+0x74>
 800ae50:	2300      	movs	r3, #0
 800ae52:	e048      	b.n	800aee6 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800ae54:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800ae56:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800ae5a:	6979      	ldr	r1, [r7, #20]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f7ff fdd0 	bl	800aa02 <put_fat>
 800ae62:	4603      	mov	r3, r0
 800ae64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800ae66:	7bfb      	ldrb	r3, [r7, #15]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d109      	bne.n	800ae80 <create_chain+0xf4>
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d006      	beq.n	800ae80 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff fdc3 	bl	800aa02 <put_fat>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d126      	bne.n	800aed4 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae8c:	330c      	adds	r3, #12
 800ae8e:	697a      	ldr	r2, [r7, #20]
 800ae90:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae98:	3310      	adds	r3, #16
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea0:	d020      	beq.n	800aee4 <create_chain+0x158>
			fs->free_clust--;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aea8:	3310      	adds	r3, #16
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	1e5a      	subs	r2, r3, #1
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aeb4:	3310      	adds	r3, #16
 800aeb6:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aebe:	3305      	adds	r3, #5
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	f043 0301 	orr.w	r3, r3, #1
 800aec6:	b2da      	uxtb	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aece:	3305      	adds	r3, #5
 800aed0:	701a      	strb	r2, [r3, #0]
 800aed2:	e007      	b.n	800aee4 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d102      	bne.n	800aee0 <create_chain+0x154>
 800aeda:	f04f 33ff 	mov.w	r3, #4294967295
 800aede:	e000      	b.n	800aee2 <create_chain+0x156>
 800aee0:	2301      	movs	r3, #1
 800aee2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800aee4:	697b      	ldr	r3, [r7, #20]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3718      	adds	r7, #24
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800aeee:	b480      	push	{r7}
 800aef0:	b087      	sub	sp, #28
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800aefe:	3304      	adds	r3, #4
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3304      	adds	r3, #4
 800af04:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af12:	330a      	adds	r3, #10
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	461a      	mov	r2, r3
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	fbb3 f2f2 	udiv	r2, r3, r2
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af2a:	3302      	adds	r3, #2
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af32:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	1d1a      	adds	r2, r3, #4
 800af38:	613a      	str	r2, [r7, #16]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d101      	bne.n	800af48 <clmt_clust+0x5a>
 800af44:	2300      	movs	r3, #0
 800af46:	e010      	b.n	800af6a <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d307      	bcc.n	800af60 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 800af50:	697a      	ldr	r2, [r7, #20]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	617b      	str	r3, [r7, #20]
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	3304      	adds	r3, #4
 800af5c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800af5e:	e7e9      	b.n	800af34 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 800af60:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	4413      	add	r3, r2
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b086      	sub	sp, #24
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	b29a      	uxth	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af8a:	3306      	adds	r3, #6
 800af8c:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af94:	3308      	adds	r3, #8
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d00a      	beq.n	800afb6 <dir_sdi+0x40>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afac:	3314      	adds	r3, #20
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d301      	bcc.n	800afba <dir_sdi+0x44>
		return FR_INT_ERR;
 800afb6:	2302      	movs	r3, #2
 800afb8:	e0b4      	b.n	800b124 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d111      	bne.n	800afe4 <dir_sdi+0x6e>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	2b03      	cmp	r3, #3
 800afd0:	d108      	bne.n	800afe4 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800afde:	3304      	adds	r3, #4
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d117      	bne.n	800b01a <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aff6:	3308      	adds	r3, #8
 800aff8:	881b      	ldrh	r3, [r3, #0]
 800affa:	461a      	mov	r2, r3
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	4293      	cmp	r3, r2
 800b000:	d301      	bcc.n	800b006 <dir_sdi+0x90>
			return FR_INT_ERR;
 800b002:	2302      	movs	r3, #2
 800b004:	e08e      	b.n	800b124 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b012:	3304      	adds	r3, #4
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	613b      	str	r3, [r7, #16]
 800b018:	e046      	b.n	800b0a8 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b026:	330a      	adds	r3, #10
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	095b      	lsrs	r3, r3, #5
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	461a      	mov	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b03c:	3302      	adds	r3, #2
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	fb03 f302 	mul.w	r3, r3, r2
 800b044:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800b046:	e022      	b.n	800b08e <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6979      	ldr	r1, [r7, #20]
 800b052:	4618      	mov	r0, r3
 800b054:	f7ff fbd3 	bl	800a7fe <get_fat>
 800b058:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b060:	d101      	bne.n	800b066 <dir_sdi+0xf0>
 800b062:	2301      	movs	r3, #1
 800b064:	e05e      	b.n	800b124 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d90a      	bls.n	800b082 <dir_sdi+0x10c>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b078:	3314      	adds	r3, #20
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	697a      	ldr	r2, [r7, #20]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d301      	bcc.n	800b086 <dir_sdi+0x110>
				return FR_INT_ERR;
 800b082:	2302      	movs	r3, #2
 800b084:	e04e      	b.n	800b124 <dir_sdi+0x1ae>
			idx -= ic;
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	429a      	cmp	r2, r3
 800b094:	d2d8      	bcs.n	800b048 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	6979      	ldr	r1, [r7, #20]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7ff fb84 	bl	800a7ae <clust2sect>
 800b0a6:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ae:	330c      	adds	r3, #12
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <dir_sdi+0x148>
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	e032      	b.n	800b124 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ca:	330a      	adds	r3, #10
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	095b      	lsrs	r3, r3, #5
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	441a      	add	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0e4:	3310      	adds	r3, #16
 800b0e6:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0fe:	330a      	adds	r3, #10
 800b100:	881b      	ldrh	r3, [r3, #0]
 800b102:	095b      	lsrs	r3, r3, #5
 800b104:	b29b      	uxth	r3, r3
 800b106:	461a      	mov	r2, r3
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b10e:	fb02 f201 	mul.w	r2, r2, r1
 800b112:	1a9b      	subs	r3, r3, r2
 800b114:	015b      	lsls	r3, r3, #5
 800b116:	18c2      	adds	r2, r0, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b11e:	3314      	adds	r3, #20
 800b120:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3718      	adds	r7, #24
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b12c:	b590      	push	{r4, r7, lr}
 800b12e:	b087      	sub	sp, #28
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b13c:	3306      	adds	r3, #6
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	3301      	adds	r3, #1
 800b142:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	b29b      	uxth	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d006      	beq.n	800b15a <dir_next+0x2e>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b152:	3310      	adds	r3, #16
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d101      	bne.n	800b15e <dir_next+0x32>
		return FR_NO_FILE;
 800b15a:	2304      	movs	r3, #4
 800b15c:	e144      	b.n	800b3e8 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b16a:	330a      	adds	r3, #10
 800b16c:	881b      	ldrh	r3, [r3, #0]
 800b16e:	095b      	lsrs	r3, r3, #5
 800b170:	b29b      	uxth	r3, r3
 800b172:	461a      	mov	r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	fbb3 f1f2 	udiv	r1, r3, r2
 800b17a:	fb02 f201 	mul.w	r2, r2, r1
 800b17e:	1a9b      	subs	r3, r3, r2
 800b180:	2b00      	cmp	r3, #0
 800b182:	f040 810c 	bne.w	800b39e <dir_next+0x272>
		dp->sect++;					/* Next sector */
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b18c:	3310      	adds	r3, #16
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	1c5a      	adds	r2, r3, #1
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b198:	3310      	adds	r3, #16
 800b19a:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1a2:	330c      	adds	r3, #12
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10e      	bne.n	800b1c8 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1b6:	3308      	adds	r3, #8
 800b1b8:	881b      	ldrh	r3, [r3, #0]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	f0c0 80ed 	bcc.w	800b39e <dir_next+0x272>
				return FR_NO_FILE;
 800b1c4:	2304      	movs	r3, #4
 800b1c6:	e10f      	b.n	800b3e8 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1d4:	330a      	adds	r3, #10
 800b1d6:	881b      	ldrh	r3, [r3, #0]
 800b1d8:	095b      	lsrs	r3, r3, #5
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	461a      	mov	r2, r3
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	fbb3 f2f2 	udiv	r2, r3, r2
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1f0:	3302      	adds	r3, #2
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f040 80d0 	bne.w	800b39e <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b20c:	330c      	adds	r3, #12
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4619      	mov	r1, r3
 800b212:	4610      	mov	r0, r2
 800b214:	f7ff faf3 	bl	800a7fe <get_fat>
 800b218:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d801      	bhi.n	800b224 <dir_next+0xf8>
 800b220:	2302      	movs	r3, #2
 800b222:	e0e1      	b.n	800b3e8 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22a:	d101      	bne.n	800b230 <dir_next+0x104>
 800b22c:	2301      	movs	r3, #1
 800b22e:	e0db      	b.n	800b3e8 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b23c:	3314      	adds	r3, #20
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	697a      	ldr	r2, [r7, #20]
 800b242:	429a      	cmp	r2, r3
 800b244:	f0c0 8097 	bcc.w	800b376 <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d101      	bne.n	800b252 <dir_next+0x126>
 800b24e:	2304      	movs	r3, #4
 800b250:	e0ca      	b.n	800b3e8 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b260:	330c      	adds	r3, #12
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4619      	mov	r1, r3
 800b266:	4610      	mov	r0, r2
 800b268:	f7ff fd90 	bl	800ad8c <create_chain>
 800b26c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <dir_next+0x14c>
 800b274:	2307      	movs	r3, #7
 800b276:	e0b7      	b.n	800b3e8 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d101      	bne.n	800b282 <dir_next+0x156>
 800b27e:	2302      	movs	r3, #2
 800b280:	e0b2      	b.n	800b3e8 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b288:	d101      	bne.n	800b28e <dir_next+0x162>
 800b28a:	2301      	movs	r3, #1
 800b28c:	e0ac      	b.n	800b3e8 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4618      	mov	r0, r3
 800b298:	f7ff f92c 	bl	800a4f4 <sync_window>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <dir_next+0x17a>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e0a0      	b.n	800b3e8 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2bc:	330a      	adds	r3, #10
 800b2be:	881b      	ldrh	r3, [r3, #0]
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	f7fe fef4 	bl	800a0b0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2d6:	681c      	ldr	r4, [r3, #0]
 800b2d8:	6979      	ldr	r1, [r7, #20]
 800b2da:	4610      	mov	r0, r2
 800b2dc:	f7ff fa67 	bl	800a7ae <clust2sect>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 800b2e6:	330c      	adds	r3, #12
 800b2e8:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	613b      	str	r3, [r7, #16]
 800b2ee:	e024      	b.n	800b33a <dir_next+0x20e>
						dp->fs->wflag = 1;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	2201      	movs	r2, #1
 800b300:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7ff f8f2 	bl	800a4f4 <sync_window>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <dir_next+0x1ee>
 800b316:	2301      	movs	r3, #1
 800b318:	e066      	b.n	800b3e8 <dir_next+0x2bc>
						dp->fs->winsect++;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800b326:	330c      	adds	r3, #12
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	1c59      	adds	r1, r3, #1
 800b32c:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 800b330:	330c      	adds	r3, #12
 800b332:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	3301      	adds	r3, #1
 800b338:	613b      	str	r3, [r7, #16]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b346:	3302      	adds	r3, #2
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	461a      	mov	r2, r3
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	4293      	cmp	r3, r2
 800b350:	d3ce      	bcc.n	800b2f0 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b35e:	330c      	adds	r3, #12
 800b360:	6819      	ldr	r1, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	693a      	ldr	r2, [r7, #16]
 800b36c:	1a8a      	subs	r2, r1, r2
 800b36e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b372:	330c      	adds	r3, #12
 800b374:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b37c:	330c      	adds	r3, #12
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	6979      	ldr	r1, [r7, #20]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7ff fa0e 	bl	800a7ae <clust2sect>
 800b392:	4602      	mov	r2, r0
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b39a:	3310      	adds	r3, #16
 800b39c:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3a8:	3306      	adds	r3, #6
 800b3aa:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3c2:	330a      	adds	r3, #10
 800b3c4:	881b      	ldrh	r3, [r3, #0]
 800b3c6:	095b      	lsrs	r3, r3, #5
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3d2:	fb02 f201 	mul.w	r2, r2, r1
 800b3d6:	1a9b      	subs	r3, r3, r2
 800b3d8:	015b      	lsls	r3, r3, #5
 800b3da:	18c2      	adds	r2, r0, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3e2:	3314      	adds	r3, #20
 800b3e4:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	371c      	adds	r7, #28
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd90      	pop	{r4, r7, pc}

0800b3f0 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7ff fdba 	bl	800af76 <dir_sdi>
 800b402:	4603      	mov	r3, r0
 800b404:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b406:	7bfb      	ldrb	r3, [r7, #15]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d138      	bne.n	800b47e <dir_alloc+0x8e>
		n = 0;
 800b40c:	2300      	movs	r3, #0
 800b40e:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b41e:	3310      	adds	r3, #16
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4619      	mov	r1, r3
 800b424:	4610      	mov	r0, r2
 800b426:	f7ff f8bf 	bl	800a5a8 <move_window>
 800b42a:	4603      	mov	r3, r0
 800b42c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d123      	bne.n	800b47c <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b43a:	3314      	adds	r3, #20
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	2be5      	cmp	r3, #229	; 0xe5
 800b442:	d007      	beq.n	800b454 <dir_alloc+0x64>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b44a:	3314      	adds	r3, #20
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d107      	bne.n	800b464 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	3301      	adds	r3, #1
 800b458:	60bb      	str	r3, [r7, #8]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d102      	bne.n	800b468 <dir_alloc+0x78>
 800b462:	e00c      	b.n	800b47e <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b464:	2300      	movs	r3, #0
 800b466:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800b468:	2101      	movs	r1, #1
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f7ff fe5e 	bl	800b12c <dir_next>
 800b470:	4603      	mov	r3, r0
 800b472:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800b474:	7bfb      	ldrb	r3, [r7, #15]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d0ca      	beq.n	800b410 <dir_alloc+0x20>
 800b47a:	e000      	b.n	800b47e <dir_alloc+0x8e>
			if (res != FR_OK) break;
 800b47c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
 800b480:	2b04      	cmp	r3, #4
 800b482:	d101      	bne.n	800b488 <dir_alloc+0x98>
 800b484:	2307      	movs	r3, #7
 800b486:	73fb      	strb	r3, [r7, #15]
	return res;
 800b488:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800b492:	b480      	push	{r7}
 800b494:	b085      	sub	sp, #20
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
 800b49a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	331b      	adds	r3, #27
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	021b      	lsls	r3, r3, #8
 800b4a4:	b21a      	sxth	r2, r3
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	331a      	adds	r3, #26
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	b21b      	sxth	r3, r3
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	b21b      	sxth	r3, r3
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	d10f      	bne.n	800b4e2 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	3315      	adds	r3, #21
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	021b      	lsls	r3, r3, #8
 800b4ca:	b21a      	sxth	r2, r3
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	3314      	adds	r3, #20
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	b21b      	sxth	r3, r3
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	b21b      	sxth	r3, r3
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	041b      	lsls	r3, r3, #16
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	60fb      	str	r3, [r7, #12]

	return cl;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	331a      	adds	r3, #26
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	b2d2      	uxtb	r2, r2
 800b502:	701a      	strb	r2, [r3, #0]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	b29b      	uxth	r3, r3
 800b508:	0a1b      	lsrs	r3, r3, #8
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	331b      	adds	r3, #27
 800b510:	b2d2      	uxtb	r2, r2
 800b512:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	0c1a      	lsrs	r2, r3, #16
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	3314      	adds	r3, #20
 800b51c:	b2d2      	uxtb	r2, r2
 800b51e:	701a      	strb	r2, [r3, #0]
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	0c1b      	lsrs	r3, r3, #16
 800b524:	b29b      	uxth	r3, r3
 800b526:	0a1b      	lsrs	r3, r3, #8
 800b528:	b29a      	uxth	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	3315      	adds	r3, #21
 800b52e:	b2d2      	uxtb	r2, r2
 800b530:	701a      	strb	r2, [r3, #0]
}
 800b532:	bf00      	nop
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
	...

0800b540 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b552:	1e5a      	subs	r2, r3, #1
 800b554:	4613      	mov	r3, r2
 800b556:	005b      	lsls	r3, r3, #1
 800b558:	4413      	add	r3, r2
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4413      	add	r3, r2
 800b55e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800b560:	2300      	movs	r3, #0
 800b562:	613b      	str	r3, [r7, #16]
 800b564:	2301      	movs	r3, #1
 800b566:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800b568:	4a2b      	ldr	r2, [pc, #172]	; (800b618 <cmp_lfn+0xd8>)
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	4413      	add	r3, r2
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	3301      	adds	r3, #1
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	4413      	add	r3, r2
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	021b      	lsls	r3, r3, #8
 800b57a:	b21a      	sxth	r2, r3
 800b57c:	4926      	ldr	r1, [pc, #152]	; (800b618 <cmp_lfn+0xd8>)
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	440b      	add	r3, r1
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	4619      	mov	r1, r3
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	440b      	add	r3, r1
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	b21b      	sxth	r3, r3
 800b58e:	4313      	orrs	r3, r2
 800b590:	b21b      	sxth	r3, r3
 800b592:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800b594:	89fb      	ldrh	r3, [r7, #14]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d019      	beq.n	800b5ce <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800b59a:	89bb      	ldrh	r3, [r7, #12]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f002 fd35 	bl	800e00c <ff_wtoupper>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2bfe      	cmp	r3, #254	; 0xfe
 800b5aa:	d80e      	bhi.n	800b5ca <cmp_lfn+0x8a>
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	1c5a      	adds	r2, r3, #1
 800b5b0:	617a      	str	r2, [r7, #20]
 800b5b2:	005b      	lsls	r3, r3, #1
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	881b      	ldrh	r3, [r3, #0]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f002 fd26 	bl	800e00c <ff_wtoupper>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	89fb      	ldrh	r3, [r7, #14]
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d008      	beq.n	800b5dc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e01f      	b.n	800b60e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800b5ce:	89bb      	ldrh	r3, [r7, #12]
 800b5d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d001      	beq.n	800b5dc <cmp_lfn+0x9c>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	e018      	b.n	800b60e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	613b      	str	r3, [r7, #16]
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	2b0c      	cmp	r3, #12
 800b5e6:	d9bf      	bls.n	800b568 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00b      	beq.n	800b60c <cmp_lfn+0xcc>
 800b5f4:	89fb      	ldrh	r3, [r7, #14]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d008      	beq.n	800b60c <cmp_lfn+0xcc>
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	005b      	lsls	r3, r3, #1
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	4413      	add	r3, r2
 800b602:	881b      	ldrh	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d001      	beq.n	800b60c <cmp_lfn+0xcc>
		return 0;
 800b608:	2300      	movs	r3, #0
 800b60a:	e000      	b.n	800b60e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800b60c:	2301      	movs	r3, #1
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3718      	adds	r7, #24
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	0801031c 	.word	0x0801031c

0800b61c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b089      	sub	sp, #36	; 0x24
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	4611      	mov	r1, r2
 800b628:	461a      	mov	r2, r3
 800b62a:	460b      	mov	r3, r1
 800b62c:	71fb      	strb	r3, [r7, #7]
 800b62e:	4613      	mov	r3, r2
 800b630:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	330d      	adds	r3, #13
 800b636:	79ba      	ldrb	r2, [r7, #6]
 800b638:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	330b      	adds	r3, #11
 800b63e:	220f      	movs	r2, #15
 800b640:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	330c      	adds	r3, #12
 800b646:	2200      	movs	r2, #0
 800b648:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	331a      	adds	r3, #26
 800b64e:	2200      	movs	r2, #0
 800b650:	701a      	strb	r2, [r3, #0]
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	331b      	adds	r3, #27
 800b656:	2200      	movs	r2, #0
 800b658:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800b65a:	79fb      	ldrb	r3, [r7, #7]
 800b65c:	1e5a      	subs	r2, r3, #1
 800b65e:	4613      	mov	r3, r2
 800b660:	005b      	lsls	r3, r3, #1
 800b662:	4413      	add	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4413      	add	r3, r2
 800b668:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	82fb      	strh	r3, [r7, #22]
 800b66e:	2300      	movs	r3, #0
 800b670:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800b672:	8afb      	ldrh	r3, [r7, #22]
 800b674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b678:	4293      	cmp	r3, r2
 800b67a:	d007      	beq.n	800b68c <fit_lfn+0x70>
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	1c5a      	adds	r2, r3, #1
 800b680:	61fa      	str	r2, [r7, #28]
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	4413      	add	r3, r2
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800b68c:	4a1d      	ldr	r2, [pc, #116]	; (800b704 <fit_lfn+0xe8>)
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	4413      	add	r3, r2
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	461a      	mov	r2, r3
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	4413      	add	r3, r2
 800b69a:	8afa      	ldrh	r2, [r7, #22]
 800b69c:	b2d2      	uxtb	r2, r2
 800b69e:	701a      	strb	r2, [r3, #0]
 800b6a0:	8afb      	ldrh	r3, [r7, #22]
 800b6a2:	0a1b      	lsrs	r3, r3, #8
 800b6a4:	b299      	uxth	r1, r3
 800b6a6:	4a17      	ldr	r2, [pc, #92]	; (800b704 <fit_lfn+0xe8>)
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	b2ca      	uxtb	r2, r1
 800b6b6:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800b6b8:	8afb      	ldrh	r3, [r7, #22]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d102      	bne.n	800b6c4 <fit_lfn+0xa8>
 800b6be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6c2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	61bb      	str	r3, [r7, #24]
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	2b0c      	cmp	r3, #12
 800b6ce:	d9d0      	bls.n	800b672 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800b6d0:	8afb      	ldrh	r3, [r7, #22]
 800b6d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d006      	beq.n	800b6e8 <fit_lfn+0xcc>
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	005b      	lsls	r3, r3, #1
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	881b      	ldrh	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d103      	bne.n	800b6f0 <fit_lfn+0xd4>
 800b6e8:	79fb      	ldrb	r3, [r7, #7]
 800b6ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	79fa      	ldrb	r2, [r7, #7]
 800b6f4:	701a      	strb	r2, [r3, #0]
}
 800b6f6:	bf00      	nop
 800b6f8:	3724      	adds	r7, #36	; 0x24
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	0801031c 	.word	0x0801031c

0800b708 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b08c      	sub	sp, #48	; 0x30
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
 800b714:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b716:	220b      	movs	r2, #11
 800b718:	68b9      	ldr	r1, [r7, #8]
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f7fe fcaa 	bl	800a074 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2b05      	cmp	r3, #5
 800b724:	d92b      	bls.n	800b77e <gen_numname+0x76>
		sr = seq;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b72a:	e022      	b.n	800b772 <gen_numname+0x6a>
			wc = *lfn++;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	1c9a      	adds	r2, r3, #2
 800b730:	607a      	str	r2, [r7, #4]
 800b732:	881b      	ldrh	r3, [r3, #0]
 800b734:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b736:	2300      	movs	r3, #0
 800b738:	62bb      	str	r3, [r7, #40]	; 0x28
 800b73a:	e017      	b.n	800b76c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	005a      	lsls	r2, r3, #1
 800b740:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b742:	f003 0301 	and.w	r3, r3, #1
 800b746:	4413      	add	r3, r2
 800b748:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b74a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b74c:	085b      	lsrs	r3, r3, #1
 800b74e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b756:	2b00      	cmp	r3, #0
 800b758:	d005      	beq.n	800b766 <gen_numname+0x5e>
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b760:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b764:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b768:	3301      	adds	r3, #1
 800b76a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76e:	2b0f      	cmp	r3, #15
 800b770:	d9e4      	bls.n	800b73c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	881b      	ldrh	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1d8      	bne.n	800b72c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b77e:	2307      	movs	r3, #7
 800b780:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	b2db      	uxtb	r3, r3
 800b786:	f003 030f 	and.w	r3, r3, #15
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	3330      	adds	r3, #48	; 0x30
 800b78e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b796:	2b39      	cmp	r3, #57	; 0x39
 800b798:	d904      	bls.n	800b7a4 <gen_numname+0x9c>
 800b79a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b79e:	3307      	adds	r3, #7
 800b7a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a6:	1e5a      	subs	r2, r3, #1
 800b7a8:	62ba      	str	r2, [r7, #40]	; 0x28
 800b7aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b7ae:	4413      	add	r3, r2
 800b7b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b7b4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	091b      	lsrs	r3, r3, #4
 800b7bc:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1de      	bne.n	800b782 <gen_numname+0x7a>
	ns[i] = '~';
 800b7c4:	f107 0214 	add.w	r2, r7, #20
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	4413      	add	r3, r2
 800b7cc:	227e      	movs	r2, #126	; 0x7e
 800b7ce:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b7d4:	e002      	b.n	800b7dc <gen_numname+0xd4>
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d8:	3301      	adds	r3, #1
 800b7da:	627b      	str	r3, [r7, #36]	; 0x24
 800b7dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d205      	bcs.n	800b7f0 <gen_numname+0xe8>
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e8:	4413      	add	r3, r2
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b20      	cmp	r3, #32
 800b7ee:	d1f2      	bne.n	800b7d6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f2:	2b07      	cmp	r3, #7
 800b7f4:	d808      	bhi.n	800b808 <gen_numname+0x100>
 800b7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f8:	1c5a      	adds	r2, r3, #1
 800b7fa:	62ba      	str	r2, [r7, #40]	; 0x28
 800b7fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b800:	4413      	add	r3, r2
 800b802:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b806:	e000      	b.n	800b80a <gen_numname+0x102>
 800b808:	2120      	movs	r1, #32
 800b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80c:	1c5a      	adds	r2, r3, #1
 800b80e:	627a      	str	r2, [r7, #36]	; 0x24
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	4413      	add	r3, r2
 800b814:	460a      	mov	r2, r1
 800b816:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81a:	2b07      	cmp	r3, #7
 800b81c:	d9e8      	bls.n	800b7f0 <gen_numname+0xe8>
}
 800b81e:	bf00      	nop
 800b820:	3730      	adds	r7, #48	; 0x30
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b826:	b480      	push	{r7}
 800b828:	b085      	sub	sp, #20
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b832:	230b      	movs	r3, #11
 800b834:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800b836:	7bfb      	ldrb	r3, [r7, #15]
 800b838:	b2da      	uxtb	r2, r3
 800b83a:	0852      	lsrs	r2, r2, #1
 800b83c:	01db      	lsls	r3, r3, #7
 800b83e:	4313      	orrs	r3, r2
 800b840:	b2da      	uxtb	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	1c59      	adds	r1, r3, #1
 800b846:	6079      	str	r1, [r7, #4]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	4413      	add	r3, r2
 800b84c:	73fb      	strb	r3, [r7, #15]
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	3b01      	subs	r3, #1
 800b852:	60bb      	str	r3, [r7, #8]
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1ed      	bne.n	800b836 <sum_sfn+0x10>
	return sum;
 800b85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3714      	adds	r7, #20
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b870:	2100      	movs	r1, #0
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7ff fb7f 	bl	800af76 <dir_sdi>
 800b878:	4603      	mov	r3, r0
 800b87a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d001      	beq.n	800b886 <dir_find+0x1e>
 800b882:	7dfb      	ldrb	r3, [r7, #23]
 800b884:	e0c1      	b.n	800ba0a <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b886:	23ff      	movs	r3, #255	; 0xff
 800b888:	753b      	strb	r3, [r7, #20]
 800b88a:	7d3b      	ldrb	r3, [r7, #20]
 800b88c:	757b      	strb	r3, [r7, #21]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b894:	3304      	adds	r3, #4
 800b896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b89a:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8aa:	3310      	adds	r3, #16
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	f7fe fe79 	bl	800a5a8 <move_window>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f040 809e 	bne.w	800b9fe <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8c8:	3314      	adds	r3, #20
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b8d4:	7dbb      	ldrb	r3, [r7, #22]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d102      	bne.n	800b8e0 <dir_find+0x78>
 800b8da:	2304      	movs	r3, #4
 800b8dc:	75fb      	strb	r3, [r7, #23]
 800b8de:	e093      	b.n	800ba08 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	330b      	adds	r3, #11
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8ea:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b8ec:	7dbb      	ldrb	r3, [r7, #22]
 800b8ee:	2be5      	cmp	r3, #229	; 0xe5
 800b8f0:	d007      	beq.n	800b902 <dir_find+0x9a>
 800b8f2:	7bfb      	ldrb	r3, [r7, #15]
 800b8f4:	f003 0308 	and.w	r3, r3, #8
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00c      	beq.n	800b916 <dir_find+0xae>
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
 800b8fe:	2b0f      	cmp	r3, #15
 800b900:	d009      	beq.n	800b916 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b902:	23ff      	movs	r3, #255	; 0xff
 800b904:	757b      	strb	r3, [r7, #21]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b90c:	3304      	adds	r3, #4
 800b90e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b912:	801a      	strh	r2, [r3, #0]
 800b914:	e068      	b.n	800b9e8 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b916:	7bfb      	ldrb	r3, [r7, #15]
 800b918:	2b0f      	cmp	r3, #15
 800b91a:	d139      	bne.n	800b990 <dir_find+0x128>
				if (dp->lfn) {
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d05f      	beq.n	800b9e8 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b928:	7dbb      	ldrb	r3, [r7, #22]
 800b92a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d012      	beq.n	800b958 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	7b5b      	ldrb	r3, [r3, #13]
 800b936:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800b938:	7dbb      	ldrb	r3, [r7, #22]
 800b93a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b93e:	75bb      	strb	r3, [r7, #22]
 800b940:	7dbb      	ldrb	r3, [r7, #22]
 800b942:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b94a:	3306      	adds	r3, #6
 800b94c:	881a      	ldrh	r2, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b954:	3304      	adds	r3, #4
 800b956:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800b958:	7dba      	ldrb	r2, [r7, #22]
 800b95a:	7d7b      	ldrb	r3, [r7, #21]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d114      	bne.n	800b98a <dir_find+0x122>
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	330d      	adds	r3, #13
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	7d3a      	ldrb	r2, [r7, #20]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d10e      	bne.n	800b98a <dir_find+0x122>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6939      	ldr	r1, [r7, #16]
 800b976:	4618      	mov	r0, r3
 800b978:	f7ff fde2 	bl	800b540 <cmp_lfn>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d003      	beq.n	800b98a <dir_find+0x122>
 800b982:	7d7b      	ldrb	r3, [r7, #21]
 800b984:	3b01      	subs	r3, #1
 800b986:	b2db      	uxtb	r3, r3
 800b988:	e000      	b.n	800b98c <dir_find+0x124>
 800b98a:	23ff      	movs	r3, #255	; 0xff
 800b98c:	757b      	strb	r3, [r7, #21]
 800b98e:	e02b      	b.n	800b9e8 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800b990:	7d7b      	ldrb	r3, [r7, #21]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d107      	bne.n	800b9a6 <dir_find+0x13e>
 800b996:	6938      	ldr	r0, [r7, #16]
 800b998:	f7ff ff45 	bl	800b826 <sum_sfn>
 800b99c:	4603      	mov	r3, r0
 800b99e:	461a      	mov	r2, r3
 800b9a0:	7d3b      	ldrb	r3, [r7, #20]
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d02d      	beq.n	800ba02 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9ac:	3318      	adds	r3, #24
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	330b      	adds	r3, #11
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10c      	bne.n	800b9d6 <dir_find+0x16e>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c2:	3318      	adds	r3, #24
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	220b      	movs	r2, #11
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6938      	ldr	r0, [r7, #16]
 800b9cc:	f7fe fb8a 	bl	800a0e4 <mem_cmp>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d017      	beq.n	800ba06 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b9d6:	23ff      	movs	r3, #255	; 0xff
 800b9d8:	757b      	strb	r3, [r7, #21]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9e6:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7ff fb9e 	bl	800b12c <dir_next>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b9f4:	7dfb      	ldrb	r3, [r7, #23]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f43f af50 	beq.w	800b89c <dir_find+0x34>
 800b9fc:	e004      	b.n	800ba08 <dir_find+0x1a0>
		if (res != FR_OK) break;
 800b9fe:	bf00      	nop
 800ba00:	e002      	b.n	800ba08 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ba02:	bf00      	nop
 800ba04:	e000      	b.n	800ba08 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba06:	bf00      	nop

	return res;
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b08c      	sub	sp, #48	; 0x30
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba22:	3318      	adds	r3, #24
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	623b      	str	r3, [r7, #32]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800ba32:	f107 030c 	add.w	r3, r7, #12
 800ba36:	220c      	movs	r2, #12
 800ba38:	6a39      	ldr	r1, [r7, #32]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fe fb1a 	bl	800a074 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
 800ba42:	f003 0301 	and.w	r3, r3, #1
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d039      	beq.n	800babe <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	330b      	adds	r3, #11
 800ba4e:	2200      	movs	r2, #0
 800ba50:	701a      	strb	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800ba58:	2200      	movs	r2, #0
 800ba5a:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba60:	e013      	b.n	800ba8a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800ba62:	f107 010c 	add.w	r1, r7, #12
 800ba66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba68:	69fa      	ldr	r2, [r7, #28]
 800ba6a:	6a38      	ldr	r0, [r7, #32]
 800ba6c:	f7ff fe4c 	bl	800b708 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f7ff fef9 	bl	800b868 <dir_find>
 800ba76:	4603      	mov	r3, r0
 800ba78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ba7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d106      	bne.n	800ba92 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	3301      	adds	r3, #1
 800ba88:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8c:	2b63      	cmp	r3, #99	; 0x63
 800ba8e:	d9e8      	bls.n	800ba62 <dir_register+0x4e>
 800ba90:	e000      	b.n	800ba94 <dir_register+0x80>
			if (res != FR_OK) break;
 800ba92:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ba94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba96:	2b64      	cmp	r3, #100	; 0x64
 800ba98:	d101      	bne.n	800ba9e <dir_register+0x8a>
 800ba9a:	2307      	movs	r3, #7
 800ba9c:	e0e3      	b.n	800bc66 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ba9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800baa2:	2b04      	cmp	r3, #4
 800baa4:	d002      	beq.n	800baac <dir_register+0x98>
 800baa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800baaa:	e0dc      	b.n	800bc66 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800baac:	6a3b      	ldr	r3, [r7, #32]
 800baae:	330b      	adds	r3, #11
 800bab0:	7dfa      	ldrb	r2, [r7, #23]
 800bab2:	701a      	strb	r2, [r3, #0]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800baba:	69fa      	ldr	r2, [r7, #28]
 800babc:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800babe:	7dfb      	ldrb	r3, [r7, #23]
 800bac0:	f003 0302 	and.w	r3, r3, #2
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d014      	beq.n	800baf2 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 800bac8:	2300      	movs	r3, #0
 800baca:	62bb      	str	r3, [r7, #40]	; 0x28
 800bacc:	e002      	b.n	800bad4 <dir_register+0xc0>
 800bace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad0:	3301      	adds	r3, #1
 800bad2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad6:	005b      	lsls	r3, r3, #1
 800bad8:	69fa      	ldr	r2, [r7, #28]
 800bada:	4413      	add	r3, r2
 800badc:	881b      	ldrh	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1f5      	bne.n	800bace <dir_register+0xba>
		nent = (n + 25) / 13;
 800bae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae4:	3319      	adds	r3, #25
 800bae6:	4a62      	ldr	r2, [pc, #392]	; (800bc70 <dir_register+0x25c>)
 800bae8:	fba2 2303 	umull	r2, r3, r2, r3
 800baec:	089b      	lsrs	r3, r3, #2
 800baee:	627b      	str	r3, [r7, #36]	; 0x24
 800baf0:	e001      	b.n	800baf6 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800baf2:	2301      	movs	r3, #1
 800baf4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800baf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7ff fc79 	bl	800b3f0 <dir_alloc>
 800bafe:	4603      	mov	r3, r0
 800bb00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bb04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d160      	bne.n	800bbce <dir_register+0x1ba>
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	627b      	str	r3, [r7, #36]	; 0x24
 800bb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d05a      	beq.n	800bbce <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb1e:	3306      	adds	r3, #6
 800bb20:	881b      	ldrh	r3, [r3, #0]
 800bb22:	461a      	mov	r2, r3
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7ff fa23 	bl	800af76 <dir_sdi>
 800bb30:	4603      	mov	r3, r0
 800bb32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bb36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d147      	bne.n	800bbce <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb44:	3318      	adds	r3, #24
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7ff fe6c 	bl	800b826 <sum_sfn>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb60:	3310      	adds	r3, #16
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4619      	mov	r1, r3
 800bb66:	4610      	mov	r0, r2
 800bb68:	f7fe fd1e 	bl	800a5a8 <move_window>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800bb72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d128      	bne.n	800bbcc <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bb80:	6818      	ldr	r0, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb88:	3314      	adds	r3, #20
 800bb8a:	6819      	ldr	r1, [r3, #0]
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	7efb      	ldrb	r3, [r7, #27]
 800bb92:	f7ff fd43 	bl	800b61c <fit_lfn>
				dp->fs->wflag = 1;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bba2:	3304      	adds	r3, #4
 800bba4:	2201      	movs	r2, #1
 800bba6:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 800bba8:	2100      	movs	r1, #0
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f7ff fabe 	bl	800b12c <dir_next>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800bbb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d107      	bne.n	800bbce <dir_register+0x1ba>
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	627b      	str	r3, [r7, #36]	; 0x24
 800bbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1c3      	bne.n	800bb52 <dir_register+0x13e>
 800bbca:	e000      	b.n	800bbce <dir_register+0x1ba>
				if (res != FR_OK) break;
 800bbcc:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800bbce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d145      	bne.n	800bc62 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbe4:	3310      	adds	r3, #16
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4610      	mov	r0, r2
 800bbec:	f7fe fcdc 	bl	800a5a8 <move_window>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bbf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d131      	bne.n	800bc62 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc04:	3314      	adds	r3, #20
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2220      	movs	r2, #32
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fe fa4f 	bl	800a0b0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc18:	3314      	adds	r3, #20
 800bc1a:	6818      	ldr	r0, [r3, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc22:	3318      	adds	r3, #24
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	220b      	movs	r2, #11
 800bc28:	4619      	mov	r1, r3
 800bc2a:	f7fe fa23 	bl	800a074 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc34:	3318      	adds	r3, #24
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	330b      	adds	r3, #11
 800bc3a:	781a      	ldrb	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc42:	3314      	adds	r3, #20
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	330c      	adds	r3, #12
 800bc48:	f002 0218 	and.w	r2, r2, #24
 800bc4c:	b2d2      	uxtb	r2, r2
 800bc4e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc5c:	3304      	adds	r3, #4
 800bc5e:	2201      	movs	r2, #1
 800bc60:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800bc62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3730      	adds	r7, #48	; 0x30
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	4ec4ec4f 	.word	0x4ec4ec4f

0800bc74 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b08a      	sub	sp, #40	; 0x28
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	613b      	str	r3, [r7, #16]
 800bc84:	e002      	b.n	800bc8c <create_name+0x18>
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	3301      	adds	r3, #1
 800bc8a:	613b      	str	r3, [r7, #16]
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	2b2f      	cmp	r3, #47	; 0x2f
 800bc92:	d0f8      	beq.n	800bc86 <create_name+0x12>
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	2b5c      	cmp	r3, #92	; 0x5c
 800bc9a:	d0f4      	beq.n	800bc86 <create_name+0x12>
	lfn = dp->lfn;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	617b      	str	r3, [r7, #20]
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	1c5a      	adds	r2, r3, #1
 800bcb2:	61ba      	str	r2, [r7, #24]
 800bcb4:	693a      	ldr	r2, [r7, #16]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800bcbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcbe:	2b1f      	cmp	r3, #31
 800bcc0:	d92f      	bls.n	800bd22 <create_name+0xae>
 800bcc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcc4:	2b2f      	cmp	r3, #47	; 0x2f
 800bcc6:	d02c      	beq.n	800bd22 <create_name+0xae>
 800bcc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcca:	2b5c      	cmp	r3, #92	; 0x5c
 800bccc:	d029      	beq.n	800bd22 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	2bfe      	cmp	r3, #254	; 0xfe
 800bcd2:	d901      	bls.n	800bcd8 <create_name+0x64>
			return FR_INVALID_NAME;
 800bcd4:	2306      	movs	r3, #6
 800bcd6:	e18b      	b.n	800bff0 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bcd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bcde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bce0:	2101      	movs	r1, #1
 800bce2:	4618      	mov	r0, r3
 800bce4:	f002 f956 	bl	800df94 <ff_convert>
 800bce8:	4603      	mov	r3, r0
 800bcea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bcec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <create_name+0x82>
 800bcf2:	2306      	movs	r3, #6
 800bcf4:	e17c      	b.n	800bff0 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800bcf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcf8:	2b7f      	cmp	r3, #127	; 0x7f
 800bcfa:	d809      	bhi.n	800bd10 <create_name+0x9c>
 800bcfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcfe:	4619      	mov	r1, r3
 800bd00:	488f      	ldr	r0, [pc, #572]	; (800bf40 <create_name+0x2cc>)
 800bd02:	f7fe fa16 	bl	800a132 <chk_chr>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d001      	beq.n	800bd10 <create_name+0x9c>
			return FR_INVALID_NAME;
 800bd0c:	2306      	movs	r3, #6
 800bd0e:	e16f      	b.n	800bff0 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	1c5a      	adds	r2, r3, #1
 800bd14:	617a      	str	r2, [r7, #20]
 800bd16:	005b      	lsls	r3, r3, #1
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd1e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bd20:	e7c5      	b.n	800bcae <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bd22:	693a      	ldr	r2, [r7, #16]
 800bd24:	69bb      	ldr	r3, [r7, #24]
 800bd26:	441a      	add	r2, r3
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800bd2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd2e:	2b1f      	cmp	r3, #31
 800bd30:	d801      	bhi.n	800bd36 <create_name+0xc2>
 800bd32:	2304      	movs	r3, #4
 800bd34:	e000      	b.n	800bd38 <create_name+0xc4>
 800bd36:	2300      	movs	r3, #0
 800bd38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800bd3c:	e011      	b.n	800bd62 <create_name+0xee>
		w = lfn[di - 1];
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd44:	3b01      	subs	r3, #1
 800bd46:	005b      	lsls	r3, r3, #1
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	881b      	ldrh	r3, [r3, #0]
 800bd4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800bd50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd52:	2b20      	cmp	r3, #32
 800bd54:	d002      	beq.n	800bd5c <create_name+0xe8>
 800bd56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd58:	2b2e      	cmp	r3, #46	; 0x2e
 800bd5a:	d106      	bne.n	800bd6a <create_name+0xf6>
		di--;
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1ea      	bne.n	800bd3e <create_name+0xca>
 800bd68:	e000      	b.n	800bd6c <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800bd6a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <create_name+0x102>
 800bd72:	2306      	movs	r3, #6
 800bd74:	e13c      	b.n	800bff0 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	2200      	movs	r2, #0
 800bd80:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd88:	3318      	adds	r3, #24
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	220b      	movs	r2, #11
 800bd8e:	2120      	movs	r1, #32
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7fe f98d 	bl	800a0b0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bd96:	2300      	movs	r3, #0
 800bd98:	61bb      	str	r3, [r7, #24]
 800bd9a:	e002      	b.n	800bda2 <create_name+0x12e>
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	61bb      	str	r3, [r7, #24]
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	005b      	lsls	r3, r3, #1
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	4413      	add	r3, r2
 800bdaa:	881b      	ldrh	r3, [r3, #0]
 800bdac:	2b20      	cmp	r3, #32
 800bdae:	d0f5      	beq.n	800bd9c <create_name+0x128>
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	005b      	lsls	r3, r3, #1
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	881b      	ldrh	r3, [r3, #0]
 800bdba:	2b2e      	cmp	r3, #46	; 0x2e
 800bdbc:	d0ee      	beq.n	800bd9c <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d009      	beq.n	800bdd8 <create_name+0x164>
 800bdc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdc8:	f043 0303 	orr.w	r3, r3, #3
 800bdcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bdd0:	e002      	b.n	800bdd8 <create_name+0x164>
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	617b      	str	r3, [r7, #20]
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d009      	beq.n	800bdf2 <create_name+0x17e>
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bde4:	3b01      	subs	r3, #1
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	4413      	add	r3, r2
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	2b2e      	cmp	r3, #46	; 0x2e
 800bdf0:	d1ef      	bne.n	800bdd2 <create_name+0x15e>

	b = i = 0; ni = 8;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	623b      	str	r3, [r7, #32]
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bdfc:	2308      	movs	r3, #8
 800bdfe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	1c5a      	adds	r2, r3, #1
 800be04:	61ba      	str	r2, [r7, #24]
 800be06:	005b      	lsls	r3, r3, #1
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	4413      	add	r3, r2
 800be0c:	881b      	ldrh	r3, [r3, #0]
 800be0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800be10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be12:	2b00      	cmp	r3, #0
 800be14:	f000 8092 	beq.w	800bf3c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800be18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be1a:	2b20      	cmp	r3, #32
 800be1c:	d006      	beq.n	800be2c <create_name+0x1b8>
 800be1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be20:	2b2e      	cmp	r3, #46	; 0x2e
 800be22:	d10a      	bne.n	800be3a <create_name+0x1c6>
 800be24:	69ba      	ldr	r2, [r7, #24]
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d006      	beq.n	800be3a <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800be2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be30:	f043 0303 	orr.w	r3, r3, #3
 800be34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800be38:	e07f      	b.n	800bf3a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800be3a:	6a3a      	ldr	r2, [r7, #32]
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d203      	bcs.n	800be4a <create_name+0x1d6>
 800be42:	69ba      	ldr	r2, [r7, #24]
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	429a      	cmp	r2, r3
 800be48:	d123      	bne.n	800be92 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	2b0b      	cmp	r3, #11
 800be4e:	d106      	bne.n	800be5e <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800be50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be54:	f043 0303 	orr.w	r3, r3, #3
 800be58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800be5c:	e077      	b.n	800bf4e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800be5e:	69ba      	ldr	r2, [r7, #24]
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	429a      	cmp	r2, r3
 800be64:	d005      	beq.n	800be72 <create_name+0x1fe>
 800be66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800be6a:	f043 0303 	orr.w	r3, r3, #3
 800be6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800be72:	69ba      	ldr	r2, [r7, #24]
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	429a      	cmp	r2, r3
 800be78:	d868      	bhi.n	800bf4c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	61bb      	str	r3, [r7, #24]
 800be7e:	2308      	movs	r3, #8
 800be80:	623b      	str	r3, [r7, #32]
 800be82:	230b      	movs	r3, #11
 800be84:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800be86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be90:	e053      	b.n	800bf3a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800be92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be94:	2b7f      	cmp	r3, #127	; 0x7f
 800be96:	d914      	bls.n	800bec2 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800be98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be9a:	2100      	movs	r1, #0
 800be9c:	4618      	mov	r0, r3
 800be9e:	f002 f879 	bl	800df94 <ff_convert>
 800bea2:	4603      	mov	r3, r0
 800bea4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d004      	beq.n	800beb6 <create_name+0x242>
 800beac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beae:	3b80      	subs	r3, #128	; 0x80
 800beb0:	4a24      	ldr	r2, [pc, #144]	; (800bf44 <create_name+0x2d0>)
 800beb2:	5cd3      	ldrb	r3, [r2, r3]
 800beb4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800beb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800beba:	f043 0302 	orr.w	r3, r3, #2
 800bebe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d007      	beq.n	800bed8 <create_name+0x264>
 800bec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beca:	4619      	mov	r1, r3
 800becc:	481e      	ldr	r0, [pc, #120]	; (800bf48 <create_name+0x2d4>)
 800bece:	f7fe f930 	bl	800a132 <chk_chr>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d008      	beq.n	800beea <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bed8:	235f      	movs	r3, #95	; 0x5f
 800beda:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bedc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bee0:	f043 0303 	orr.w	r3, r3, #3
 800bee4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bee8:	e01b      	b.n	800bf22 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800beea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800beec:	2b40      	cmp	r3, #64	; 0x40
 800beee:	d909      	bls.n	800bf04 <create_name+0x290>
 800bef0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bef2:	2b5a      	cmp	r3, #90	; 0x5a
 800bef4:	d806      	bhi.n	800bf04 <create_name+0x290>
					b |= 2;
 800bef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800befa:	f043 0302 	orr.w	r3, r3, #2
 800befe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf02:	e00e      	b.n	800bf22 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bf04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf06:	2b60      	cmp	r3, #96	; 0x60
 800bf08:	d90b      	bls.n	800bf22 <create_name+0x2ae>
 800bf0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf0c:	2b7a      	cmp	r3, #122	; 0x7a
 800bf0e:	d808      	bhi.n	800bf22 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 800bf10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf14:	f043 0301 	orr.w	r3, r3, #1
 800bf18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf1e:	3b20      	subs	r3, #32
 800bf20:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf28:	3318      	adds	r3, #24
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	6a3b      	ldr	r3, [r7, #32]
 800bf2e:	1c59      	adds	r1, r3, #1
 800bf30:	6239      	str	r1, [r7, #32]
 800bf32:	4413      	add	r3, r2
 800bf34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bf36:	b2d2      	uxtb	r2, r2
 800bf38:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800bf3a:	e761      	b.n	800be00 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800bf3c:	bf00      	nop
 800bf3e:	e006      	b.n	800bf4e <create_name+0x2da>
 800bf40:	0801021c 	.word	0x0801021c
 800bf44:	0801029c 	.word	0x0801029c
 800bf48:	08010228 	.word	0x08010228
			if (si > di) break;			/* No extension */
 800bf4c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf54:	3318      	adds	r3, #24
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	2be5      	cmp	r3, #229	; 0xe5
 800bf5c:	d106      	bne.n	800bf6c <create_name+0x2f8>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf64:	3318      	adds	r3, #24
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2205      	movs	r2, #5
 800bf6a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	2b08      	cmp	r3, #8
 800bf70:	d104      	bne.n	800bf7c <create_name+0x308>
 800bf72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800bf7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf80:	f003 030c 	and.w	r3, r3, #12
 800bf84:	2b0c      	cmp	r3, #12
 800bf86:	d005      	beq.n	800bf94 <create_name+0x320>
 800bf88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf8c:	f003 0303 	and.w	r3, r3, #3
 800bf90:	2b03      	cmp	r3, #3
 800bf92:	d105      	bne.n	800bfa0 <create_name+0x32c>
		cf |= NS_LFN;
 800bf94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf98:	f043 0302 	orr.w	r3, r3, #2
 800bf9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bfa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfa4:	f003 0302 	and.w	r3, r3, #2
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d117      	bne.n	800bfdc <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bfac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfb0:	f003 0303 	and.w	r3, r3, #3
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d105      	bne.n	800bfc4 <create_name+0x350>
 800bfb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfbc:	f043 0310 	orr.w	r3, r3, #16
 800bfc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bfc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfc8:	f003 030c 	and.w	r3, r3, #12
 800bfcc:	2b04      	cmp	r3, #4
 800bfce:	d105      	bne.n	800bfdc <create_name+0x368>
 800bfd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfd4:	f043 0308 	orr.w	r3, r3, #8
 800bfd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfe2:	3318      	adds	r3, #24
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	330b      	adds	r3, #11
 800bfe8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bfec:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bfee:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3728      	adds	r7, #40	; 0x28
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	2b2f      	cmp	r3, #47	; 0x2f
 800c008:	d003      	beq.n	800c012 <follow_path+0x1a>
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	2b5c      	cmp	r3, #92	; 0x5c
 800c010:	d102      	bne.n	800c018 <follow_path+0x20>
		path++;
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	3301      	adds	r3, #1
 800c016:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c01e:	3308      	adds	r3, #8
 800c020:	2200      	movs	r2, #0
 800c022:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	2b1f      	cmp	r3, #31
 800c02a:	d80c      	bhi.n	800c046 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800c02c:	2100      	movs	r1, #0
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7fe ffa1 	bl	800af76 <dir_sdi>
 800c034:	4603      	mov	r3, r0
 800c036:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c03e:	3314      	adds	r3, #20
 800c040:	2200      	movs	r2, #0
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	e04c      	b.n	800c0e0 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c046:	463b      	mov	r3, r7
 800c048:	4619      	mov	r1, r3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7ff fe12 	bl	800bc74 <create_name>
 800c050:	4603      	mov	r3, r0
 800c052:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c054:	7bfb      	ldrb	r3, [r7, #15]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d13d      	bne.n	800c0d6 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f7ff fc04 	bl	800b868 <dir_find>
 800c060:	4603      	mov	r3, r0
 800c062:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c06a:	3318      	adds	r3, #24
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	7adb      	ldrb	r3, [r3, #11]
 800c070:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800c072:	7bfb      	ldrb	r3, [r7, #15]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00a      	beq.n	800c08e <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c078:	7bfb      	ldrb	r3, [r7, #15]
 800c07a:	2b04      	cmp	r3, #4
 800c07c:	d12d      	bne.n	800c0da <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c07e:	7bbb      	ldrb	r3, [r7, #14]
 800c080:	f003 0304 	and.w	r3, r3, #4
 800c084:	2b00      	cmp	r3, #0
 800c086:	d128      	bne.n	800c0da <follow_path+0xe2>
 800c088:	2305      	movs	r3, #5
 800c08a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800c08c:	e025      	b.n	800c0da <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c08e:	7bbb      	ldrb	r3, [r7, #14]
 800c090:	f003 0304 	and.w	r3, r3, #4
 800c094:	2b00      	cmp	r3, #0
 800c096:	d122      	bne.n	800c0de <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c09e:	3314      	adds	r3, #20
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	330b      	adds	r3, #11
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	f003 0310 	and.w	r3, r3, #16
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d102      	bne.n	800c0b8 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 800c0b2:	2305      	movs	r3, #5
 800c0b4:	73fb      	strb	r3, [r7, #15]
 800c0b6:	e013      	b.n	800c0e0 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68b9      	ldr	r1, [r7, #8]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7ff f9e5 	bl	800b492 <ld_clust>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c0d4:	e7b7      	b.n	800c046 <follow_path+0x4e>
			if (res != FR_OK) break;
 800c0d6:	bf00      	nop
 800c0d8:	e002      	b.n	800c0e0 <follow_path+0xe8>
				break;
 800c0da:	bf00      	nop
 800c0dc:	e000      	b.n	800c0e0 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c0de:	bf00      	nop
		}
	}

	return res;
 800c0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c0ea:	b480      	push	{r7}
 800c0ec:	b087      	sub	sp, #28
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c0f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d031      	beq.n	800c164 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	617b      	str	r3, [r7, #20]
 800c106:	e002      	b.n	800c10e <get_ldnumber+0x24>
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	3301      	adds	r3, #1
 800c10c:	617b      	str	r3, [r7, #20]
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b1f      	cmp	r3, #31
 800c114:	d903      	bls.n	800c11e <get_ldnumber+0x34>
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	2b3a      	cmp	r3, #58	; 0x3a
 800c11c:	d1f4      	bne.n	800c108 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	2b3a      	cmp	r3, #58	; 0x3a
 800c124:	d11c      	bne.n	800c160 <get_ldnumber+0x76>
			tp = *path;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	1c5a      	adds	r2, r3, #1
 800c130:	60fa      	str	r2, [r7, #12]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	3b30      	subs	r3, #48	; 0x30
 800c136:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	2b09      	cmp	r3, #9
 800c13c:	d80e      	bhi.n	800c15c <get_ldnumber+0x72>
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	429a      	cmp	r2, r3
 800c144:	d10a      	bne.n	800c15c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d107      	bne.n	800c15c <get_ldnumber+0x72>
					vol = (int)i;
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	3301      	adds	r3, #1
 800c154:	617b      	str	r3, [r7, #20]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	697a      	ldr	r2, [r7, #20]
 800c15a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	e002      	b.n	800c166 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c160:	2300      	movs	r3, #0
 800c162:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c164:	693b      	ldr	r3, [r7, #16]
}
 800c166:	4618      	mov	r0, r3
 800c168:	371c      	adds	r7, #28
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
	...

0800c174 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c184:	3304      	adds	r3, #4
 800c186:	2200      	movs	r2, #0
 800c188:	701a      	strb	r2, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c190:	330c      	adds	r3, #12
 800c192:	f04f 32ff 	mov.w	r2, #4294967295
 800c196:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800c198:	6839      	ldr	r1, [r7, #0]
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7fe fa04 	bl	800a5a8 <move_window>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d001      	beq.n	800c1aa <check_fs+0x36>
		return 3;
 800c1a6:	2303      	movs	r3, #3
 800c1a8:	e04a      	b.n	800c240 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	021b      	lsls	r3, r3, #8
 800c1b6:	b21a      	sxth	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c1be:	b21b      	sxth	r3, r3
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	b21b      	sxth	r3, r3
 800c1c4:	4a20      	ldr	r2, [pc, #128]	; (800c248 <check_fs+0xd4>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d001      	beq.n	800c1ce <check_fs+0x5a>
		return 2;
 800c1ca:	2302      	movs	r3, #2
 800c1cc:	e038      	b.n	800c240 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	3336      	adds	r3, #54	; 0x36
 800c1d2:	3303      	adds	r3, #3
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	061a      	lsls	r2, r3, #24
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	3336      	adds	r3, #54	; 0x36
 800c1dc:	3302      	adds	r3, #2
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	041b      	lsls	r3, r3, #16
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	3236      	adds	r2, #54	; 0x36
 800c1e8:	3201      	adds	r2, #1
 800c1ea:	7812      	ldrb	r2, [r2, #0]
 800c1ec:	0212      	lsls	r2, r2, #8
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c1fc:	4a13      	ldr	r2, [pc, #76]	; (800c24c <check_fs+0xd8>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d101      	bne.n	800c206 <check_fs+0x92>
		return 0;
 800c202:	2300      	movs	r3, #0
 800c204:	e01c      	b.n	800c240 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	3352      	adds	r3, #82	; 0x52
 800c20a:	3303      	adds	r3, #3
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	061a      	lsls	r2, r3, #24
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	3352      	adds	r3, #82	; 0x52
 800c214:	3302      	adds	r3, #2
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	041b      	lsls	r3, r3, #16
 800c21a:	4313      	orrs	r3, r2
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	3252      	adds	r2, #82	; 0x52
 800c220:	3201      	adds	r2, #1
 800c222:	7812      	ldrb	r2, [r2, #0]
 800c224:	0212      	lsls	r2, r2, #8
 800c226:	4313      	orrs	r3, r2
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800c22e:	4313      	orrs	r3, r2
 800c230:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c234:	4a05      	ldr	r2, [pc, #20]	; (800c24c <check_fs+0xd8>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d101      	bne.n	800c23e <check_fs+0xca>
		return 0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	e000      	b.n	800c240 <check_fs+0xcc>

	return 1;
 800c23e:	2301      	movs	r3, #1
}
 800c240:	4618      	mov	r0, r3
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	ffffaa55 	.word	0xffffaa55
 800c24c:	00544146 	.word	0x00544146

0800c250 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b096      	sub	sp, #88	; 0x58
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	4613      	mov	r3, r2
 800c25c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2200      	movs	r2, #0
 800c262:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c264:	68b8      	ldr	r0, [r7, #8]
 800c266:	f7ff ff40 	bl	800c0ea <get_ldnumber>
 800c26a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c26e:	2b00      	cmp	r3, #0
 800c270:	da01      	bge.n	800c276 <find_volume+0x26>
 800c272:	230b      	movs	r3, #11
 800c274:	e33c      	b.n	800c8f0 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c276:	4ab3      	ldr	r2, [pc, #716]	; (800c544 <find_volume+0x2f4>)
 800c278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c27a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c27e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c282:	2b00      	cmp	r3, #0
 800c284:	d101      	bne.n	800c28a <find_volume+0x3a>
 800c286:	230c      	movs	r3, #12
 800c288:	e332      	b.n	800c8f0 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c28e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800c290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d01d      	beq.n	800c2d8 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800c29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fd fe46 	bl	8009f38 <disk_status>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c2b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10c      	bne.n	800c2d8 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800c2be:	79fb      	ldrb	r3, [r7, #7]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d007      	beq.n	800c2d4 <find_volume+0x84>
 800c2c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2c8:	f003 0304 	and.w	r3, r3, #4
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d001      	beq.n	800c2d4 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800c2d0:	230a      	movs	r3, #10
 800c2d2:	e30d      	b.n	800c8f0 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	e30b      	b.n	800c8f0 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2de:	2200      	movs	r2, #0
 800c2e0:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fd fe36 	bl	8009f6c <disk_initialize>
 800c300:	4603      	mov	r3, r0
 800c302:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800c306:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c30a:	f003 0301 	and.w	r3, r3, #1
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c312:	2303      	movs	r3, #3
 800c314:	e2ec      	b.n	800c8f0 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800c316:	79fb      	ldrb	r3, [r7, #7]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d007      	beq.n	800c32c <find_volume+0xdc>
 800c31c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c320:	f003 0304 	and.w	r3, r3, #4
 800c324:	2b00      	cmp	r3, #0
 800c326:	d001      	beq.n	800c32c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800c328:	230a      	movs	r3, #10
 800c32a:	e2e1      	b.n	800c8f0 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800c32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c332:	3301      	adds	r3, #1
 800c334:	7818      	ldrb	r0, [r3, #0]
 800c336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c33c:	330a      	adds	r3, #10
 800c33e:	461a      	mov	r2, r3
 800c340:	2102      	movs	r1, #2
 800c342:	f7fd fe79 	bl	800a038 <disk_ioctl>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d10f      	bne.n	800c36c <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800c34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c352:	330a      	adds	r3, #10
 800c354:	881b      	ldrh	r3, [r3, #0]
 800c356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c35a:	d307      	bcc.n	800c36c <find_volume+0x11c>
 800c35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c362:	330a      	adds	r3, #10
 800c364:	881b      	ldrh	r3, [r3, #0]
 800c366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c36a:	d901      	bls.n	800c370 <find_volume+0x120>
 800c36c:	2301      	movs	r3, #1
 800c36e:	e2bf      	b.n	800c8f0 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800c370:	2300      	movs	r3, #0
 800c372:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800c374:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c376:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c378:	f7ff fefc 	bl	800c174 <check_fs>
 800c37c:	4603      	mov	r3, r0
 800c37e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800c382:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c386:	2b01      	cmp	r3, #1
 800c388:	d155      	bne.n	800c436 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c38a:	2300      	movs	r3, #0
 800c38c:	643b      	str	r3, [r7, #64]	; 0x40
 800c38e:	e029      	b.n	800c3e4 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800c390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c394:	011b      	lsls	r3, r3, #4
 800c396:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c39a:	4413      	add	r3, r2
 800c39c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d012      	beq.n	800c3ce <find_volume+0x17e>
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3aa:	330b      	adds	r3, #11
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	061a      	lsls	r2, r3, #24
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b2:	330a      	adds	r3, #10
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	041b      	lsls	r3, r3, #16
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3bc:	3209      	adds	r2, #9
 800c3be:	7812      	ldrb	r2, [r2, #0]
 800c3c0:	0212      	lsls	r2, r2, #8
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3c6:	3208      	adds	r2, #8
 800c3c8:	7812      	ldrb	r2, [r2, #0]
 800c3ca:	431a      	orrs	r2, r3
 800c3cc:	e000      	b.n	800c3d0 <find_volume+0x180>
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c3d8:	440b      	add	r3, r1
 800c3da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800c3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	643b      	str	r3, [r7, #64]	; 0x40
 800c3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3e6:	2b03      	cmp	r3, #3
 800c3e8:	d9d2      	bls.n	800c390 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c3ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <find_volume+0x1aa>
 800c3f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800c3fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c402:	4413      	add	r3, r2
 800c404:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c408:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800c40a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d005      	beq.n	800c41c <find_volume+0x1cc>
 800c410:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c412:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c414:	f7ff feae 	bl	800c174 <check_fs>
 800c418:	4603      	mov	r3, r0
 800c41a:	e000      	b.n	800c41e <find_volume+0x1ce>
 800c41c:	2302      	movs	r3, #2
 800c41e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800c422:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c426:	2b00      	cmp	r3, #0
 800c428:	d005      	beq.n	800c436 <find_volume+0x1e6>
 800c42a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c42c:	3301      	adds	r3, #1
 800c42e:	643b      	str	r3, [r7, #64]	; 0x40
 800c430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c432:	2b03      	cmp	r3, #3
 800c434:	d9e1      	bls.n	800c3fa <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c436:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c43a:	2b03      	cmp	r3, #3
 800c43c:	d101      	bne.n	800c442 <find_volume+0x1f2>
 800c43e:	2301      	movs	r3, #1
 800c440:	e256      	b.n	800c8f0 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800c442:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c446:	2b00      	cmp	r3, #0
 800c448:	d001      	beq.n	800c44e <find_volume+0x1fe>
 800c44a:	230d      	movs	r3, #13
 800c44c:	e250      	b.n	800c8f0 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c450:	7b1b      	ldrb	r3, [r3, #12]
 800c452:	021b      	lsls	r3, r3, #8
 800c454:	b21a      	sxth	r2, r3
 800c456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c458:	7adb      	ldrb	r3, [r3, #11]
 800c45a:	b21b      	sxth	r3, r3
 800c45c:	4313      	orrs	r3, r2
 800c45e:	b21b      	sxth	r3, r3
 800c460:	b29a      	uxth	r2, r3
 800c462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c468:	330a      	adds	r3, #10
 800c46a:	881b      	ldrh	r3, [r3, #0]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d001      	beq.n	800c474 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 800c470:	230d      	movs	r3, #13
 800c472:	e23d      	b.n	800c8f0 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800c474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c476:	7ddb      	ldrb	r3, [r3, #23]
 800c478:	021b      	lsls	r3, r3, #8
 800c47a:	b21a      	sxth	r2, r3
 800c47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47e:	7d9b      	ldrb	r3, [r3, #22]
 800c480:	b21b      	sxth	r3, r3
 800c482:	4313      	orrs	r3, r2
 800c484:	b21b      	sxth	r3, r3
 800c486:	b29b      	uxth	r3, r3
 800c488:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800c48a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d112      	bne.n	800c4b6 <find_volume+0x266>
 800c490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c492:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c496:	061a      	lsls	r2, r3, #24
 800c498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c49e:	041b      	lsls	r3, r3, #16
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4a4:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c4a8:	0212      	lsls	r2, r2, #8
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4ae:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800c4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4bc:	3318      	adds	r3, #24
 800c4be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4c0:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800c4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c4:	7c1a      	ldrb	r2, [r3, #16]
 800c4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4cc:	3303      	adds	r3, #3
 800c4ce:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800c4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4d6:	3303      	adds	r3, #3
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d008      	beq.n	800c4f0 <find_volume+0x2a0>
 800c4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4e4:	3303      	adds	r3, #3
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d001      	beq.n	800c4f0 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800c4ec:	230d      	movs	r3, #13
 800c4ee:	e1ff      	b.n	800c8f0 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4f6:	3303      	adds	r3, #3
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4fe:	fb02 f303 	mul.w	r3, r2, r3
 800c502:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	7b5a      	ldrb	r2, [r3, #13]
 800c508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c50e:	3302      	adds	r3, #2
 800c510:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c518:	3302      	adds	r3, #2
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00e      	beq.n	800c53e <find_volume+0x2ee>
 800c520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c526:	3302      	adds	r3, #2
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	461a      	mov	r2, r3
 800c52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c532:	3302      	adds	r3, #2
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	3b01      	subs	r3, #1
 800c538:	4013      	ands	r3, r2
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d004      	beq.n	800c548 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800c53e:	230d      	movs	r3, #13
 800c540:	e1d6      	b.n	800c8f0 <find_volume+0x6a0>
 800c542:	bf00      	nop
 800c544:	2000023c 	.word	0x2000023c

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800c548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54a:	7c9b      	ldrb	r3, [r3, #18]
 800c54c:	021b      	lsls	r3, r3, #8
 800c54e:	b21a      	sxth	r2, r3
 800c550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c552:	7c5b      	ldrb	r3, [r3, #17]
 800c554:	b21b      	sxth	r3, r3
 800c556:	4313      	orrs	r3, r2
 800c558:	b21b      	sxth	r3, r3
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c562:	3308      	adds	r3, #8
 800c564:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800c566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c56c:	3308      	adds	r3, #8
 800c56e:	881a      	ldrh	r2, [r3, #0]
 800c570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c576:	330a      	adds	r3, #10
 800c578:	881b      	ldrh	r3, [r3, #0]
 800c57a:	095b      	lsrs	r3, r3, #5
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	fbb2 f1f3 	udiv	r1, r2, r3
 800c582:	fb03 f301 	mul.w	r3, r3, r1
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	b29b      	uxth	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d001      	beq.n	800c592 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800c58e:	230d      	movs	r3, #13
 800c590:	e1ae      	b.n	800c8f0 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800c592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c594:	7d1b      	ldrb	r3, [r3, #20]
 800c596:	021b      	lsls	r3, r3, #8
 800c598:	b21a      	sxth	r2, r3
 800c59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59c:	7cdb      	ldrb	r3, [r3, #19]
 800c59e:	b21b      	sxth	r3, r3
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	b21b      	sxth	r3, r3
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800c5a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d112      	bne.n	800c5d4 <find_volume+0x384>
 800c5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c5b4:	061a      	lsls	r2, r3, #24
 800c5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c5bc:	041b      	lsls	r3, r3, #16
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5c2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800c5c6:	0212      	lsls	r2, r2, #8
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5cc:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d6:	7bdb      	ldrb	r3, [r3, #15]
 800c5d8:	021b      	lsls	r3, r3, #8
 800c5da:	b21a      	sxth	r2, r3
 800c5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5de:	7b9b      	ldrb	r3, [r3, #14]
 800c5e0:	b21b      	sxth	r3, r3
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	b21b      	sxth	r3, r3
 800c5e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800c5e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d101      	bne.n	800c5f2 <find_volume+0x3a2>
 800c5ee:	230d      	movs	r3, #13
 800c5f0:	e17e      	b.n	800c8f0 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800c5f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c5f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5f6:	441a      	add	r2, r3
 800c5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5fe:	3308      	adds	r3, #8
 800c600:	8819      	ldrh	r1, [r3, #0]
 800c602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c608:	330a      	adds	r3, #10
 800c60a:	881b      	ldrh	r3, [r3, #0]
 800c60c:	095b      	lsrs	r3, r3, #5
 800c60e:	b29b      	uxth	r3, r3
 800c610:	fbb1 f3f3 	udiv	r3, r1, r3
 800c614:	b29b      	uxth	r3, r3
 800c616:	4413      	add	r3, r2
 800c618:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c61a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61e:	429a      	cmp	r2, r3
 800c620:	d201      	bcs.n	800c626 <find_volume+0x3d6>
 800c622:	230d      	movs	r3, #13
 800c624:	e164      	b.n	800c8f0 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800c626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62a:	1ad2      	subs	r2, r2, r3
 800c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c632:	3302      	adds	r3, #2
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	fbb2 f3f3 	udiv	r3, r2, r3
 800c63a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800c63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d101      	bne.n	800c646 <find_volume+0x3f6>
 800c642:	230d      	movs	r3, #13
 800c644:	e154      	b.n	800c8f0 <find_volume+0x6a0>
	fmt = FS_FAT12;
 800c646:	2301      	movs	r3, #1
 800c648:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800c64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c652:	4293      	cmp	r3, r2
 800c654:	d902      	bls.n	800c65c <find_volume+0x40c>
 800c656:	2302      	movs	r3, #2
 800c658:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800c65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c662:	4293      	cmp	r3, r2
 800c664:	d902      	bls.n	800c66c <find_volume+0x41c>
 800c666:	2303      	movs	r3, #3
 800c668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	1c9a      	adds	r2, r3, #2
 800c670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c676:	3314      	adds	r3, #20
 800c678:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c680:	331c      	adds	r3, #28
 800c682:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c684:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800c686:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c68a:	441a      	add	r2, r3
 800c68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c692:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800c694:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c698:	441a      	add	r2, r3
 800c69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c6a0:	3308      	adds	r3, #8
 800c6a2:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800c6a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	d127      	bne.n	800c6fc <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800c6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6b2:	3308      	adds	r3, #8
 800c6b4:	881b      	ldrh	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <find_volume+0x46e>
 800c6ba:	230d      	movs	r3, #13
 800c6bc:	e118      	b.n	800c8f0 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800c6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c6c4:	061a      	lsls	r2, r3, #24
 800c6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c6cc:	041b      	lsls	r3, r3, #16
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6d2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c6d6:	0212      	lsls	r2, r2, #8
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6dc:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c6e0:	431a      	orrs	r2, r3
 800c6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6f2:	3314      	adds	r3, #20
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	647b      	str	r3, [r7, #68]	; 0x44
 800c6fa:	e030      	b.n	800c75e <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800c6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c702:	3308      	adds	r3, #8
 800c704:	881b      	ldrh	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d101      	bne.n	800c70e <find_volume+0x4be>
 800c70a:	230d      	movs	r3, #13
 800c70c:	e0f0      	b.n	800c8f0 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800c70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c710:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c718:	441a      	add	r2, r3
 800c71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800c720:	3304      	adds	r3, #4
 800c722:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d106      	bne.n	800c73a <find_volume+0x4ea>
 800c72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c732:	3314      	adds	r3, #20
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	005b      	lsls	r3, r3, #1
 800c738:	e010      	b.n	800c75c <find_volume+0x50c>
 800c73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c740:	3314      	adds	r3, #20
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	4613      	mov	r3, r2
 800c746:	005b      	lsls	r3, r3, #1
 800c748:	4413      	add	r3, r2
 800c74a:	085a      	lsrs	r2, r3, #1
 800c74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c752:	3314      	adds	r3, #20
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f003 0301 	and.w	r3, r3, #1
 800c75a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800c75c:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800c75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c764:	3318      	adds	r3, #24
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c76e:	330a      	adds	r3, #10
 800c770:	881b      	ldrh	r3, [r3, #0]
 800c772:	4619      	mov	r1, r3
 800c774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c776:	440b      	add	r3, r1
 800c778:	1e59      	subs	r1, r3, #1
 800c77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c780:	330a      	adds	r3, #10
 800c782:	881b      	ldrh	r3, [r3, #0]
 800c784:	fbb1 f3f3 	udiv	r3, r1, r3
 800c788:	429a      	cmp	r2, r3
 800c78a:	d201      	bcs.n	800c790 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800c78c:	230d      	movs	r3, #13
 800c78e:	e0af      	b.n	800c8f0 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800c790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c796:	3310      	adds	r3, #16
 800c798:	f04f 32ff 	mov.w	r2, #4294967295
 800c79c:	601a      	str	r2, [r3, #0]
 800c79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7a4:	3310      	adds	r3, #16
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ae:	330c      	adds	r3, #12
 800c7b0:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800c7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7b8:	3305      	adds	r3, #5
 800c7ba:	2280      	movs	r2, #128	; 0x80
 800c7bc:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800c7be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7c2:	2b03      	cmp	r3, #3
 800c7c4:	d17d      	bne.n	800c8c2 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7cc:	021b      	lsls	r3, r3, #8
 800c7ce:	b21a      	sxth	r2, r3
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7d6:	b21b      	sxth	r3, r3
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	b21b      	sxth	r3, r3
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d170      	bne.n	800c8c2 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 800c7e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7e8:	f7fd fede 	bl	800a5a8 <move_window>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d167      	bne.n	800c8c2 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800c7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7f8:	3305      	adds	r3, #5
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c800:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800c804:	021b      	lsls	r3, r3, #8
 800c806:	b21a      	sxth	r2, r3
 800c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c80e:	b21b      	sxth	r3, r3
 800c810:	4313      	orrs	r3, r2
 800c812:	b21b      	sxth	r3, r3
 800c814:	4a38      	ldr	r2, [pc, #224]	; (800c8f8 <find_volume+0x6a8>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d153      	bne.n	800c8c2 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	78db      	ldrb	r3, [r3, #3]
 800c81e:	061a      	lsls	r2, r3, #24
 800c820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c822:	789b      	ldrb	r3, [r3, #2]
 800c824:	041b      	lsls	r3, r3, #16
 800c826:	4313      	orrs	r3, r2
 800c828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c82a:	7852      	ldrb	r2, [r2, #1]
 800c82c:	0212      	lsls	r2, r2, #8
 800c82e:	4313      	orrs	r3, r2
 800c830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c832:	7812      	ldrb	r2, [r2, #0]
 800c834:	4313      	orrs	r3, r2
 800c836:	4a31      	ldr	r2, [pc, #196]	; (800c8fc <find_volume+0x6ac>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d142      	bne.n	800c8c2 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800c83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83e:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800c842:	061a      	lsls	r2, r3, #24
 800c844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c846:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800c84a:	041b      	lsls	r3, r3, #16
 800c84c:	4313      	orrs	r3, r2
 800c84e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c850:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800c854:	0212      	lsls	r2, r2, #8
 800c856:	4313      	orrs	r3, r2
 800c858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c85a:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800c85e:	4313      	orrs	r3, r2
 800c860:	4a27      	ldr	r2, [pc, #156]	; (800c900 <find_volume+0x6b0>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d12d      	bne.n	800c8c2 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c868:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800c86c:	061a      	lsls	r2, r3, #24
 800c86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c870:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800c874:	041b      	lsls	r3, r3, #16
 800c876:	4313      	orrs	r3, r2
 800c878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c87a:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800c87e:	0212      	lsls	r2, r2, #8
 800c880:	4313      	orrs	r3, r2
 800c882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c884:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800c888:	431a      	orrs	r2, r3
 800c88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c890:	3310      	adds	r3, #16
 800c892:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800c894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c896:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800c89a:	061a      	lsls	r2, r3, #24
 800c89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89e:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800c8a2:	041b      	lsls	r3, r3, #16
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8a8:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800c8ac:	0212      	lsls	r2, r2, #8
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8b2:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800c8b6:	431a      	orrs	r2, r3
 800c8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8be:	330c      	adds	r3, #12
 800c8c0:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800c8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8c8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c8cc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800c8ce:	4b0d      	ldr	r3, [pc, #52]	; (800c904 <find_volume+0x6b4>)
 800c8d0:	881b      	ldrh	r3, [r3, #0]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	4b0b      	ldr	r3, [pc, #44]	; (800c904 <find_volume+0x6b4>)
 800c8d8:	801a      	strh	r2, [r3, #0]
 800c8da:	4b0a      	ldr	r3, [pc, #40]	; (800c904 <find_volume+0x6b4>)
 800c8dc:	881a      	ldrh	r2, [r3, #0]
 800c8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8e4:	3306      	adds	r3, #6
 800c8e6:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800c8e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8ea:	f7fd fdd9 	bl	800a4a0 <clear_lock>
#endif

	return FR_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3758      	adds	r7, #88	; 0x58
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	ffffaa55 	.word	0xffffaa55
 800c8fc:	41615252 	.word	0x41615252
 800c900:	61417272 	.word	0x61417272
 800c904:	20000240 	.word	0x20000240

0800c908 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d02d      	beq.n	800c976 <validate+0x6e>
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d027      	beq.n	800c976 <validate+0x6e>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d01e      	beq.n	800c976 <validate+0x6e>
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c944:	3306      	adds	r3, #6
 800c946:	881a      	ldrh	r2, [r3, #0]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c94e:	3304      	adds	r3, #4
 800c950:	881b      	ldrh	r3, [r3, #0]
 800c952:	429a      	cmp	r2, r3
 800c954:	d10f      	bne.n	800c976 <validate+0x6e>
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c962:	3301      	adds	r3, #1
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	4618      	mov	r0, r3
 800c968:	f7fd fae6 	bl	8009f38 <disk_status>
 800c96c:	4603      	mov	r3, r0
 800c96e:	f003 0301 	and.w	r3, r3, #1
 800c972:	2b00      	cmp	r3, #0
 800c974:	d001      	beq.n	800c97a <validate+0x72>
		return FR_INVALID_OBJECT;
 800c976:	2309      	movs	r3, #9
 800c978:	e000      	b.n	800c97c <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b088      	sub	sp, #32
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	4613      	mov	r3, r2
 800c990:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800c996:	f107 0310 	add.w	r3, r7, #16
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7ff fba5 	bl	800c0ea <get_ldnumber>
 800c9a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	da01      	bge.n	800c9ac <f_mount+0x28>
 800c9a8:	230b      	movs	r3, #11
 800c9aa:	e02f      	b.n	800ca0c <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c9ac:	4a19      	ldr	r2, [pc, #100]	; (800ca14 <f_mount+0x90>)
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d007      	beq.n	800c9cc <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800c9bc:	69b8      	ldr	r0, [r7, #24]
 800c9be:	f7fd fd6f 	bl	800a4a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d004      	beq.n	800c9dc <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9d8:	2200      	movs	r2, #0
 800c9da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	490d      	ldr	r1, [pc, #52]	; (800ca14 <f_mount+0x90>)
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d002      	beq.n	800c9f2 <f_mount+0x6e>
 800c9ec:	79fb      	ldrb	r3, [r7, #7]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d001      	beq.n	800c9f6 <f_mount+0x72>
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	e00a      	b.n	800ca0c <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800c9f6:	f107 0108 	add.w	r1, r7, #8
 800c9fa:	f107 030c 	add.w	r3, r7, #12
 800c9fe:	2200      	movs	r2, #0
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7ff fc25 	bl	800c250 <find_volume>
 800ca06:	4603      	mov	r3, r0
 800ca08:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ca0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3720      	adds	r7, #32
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	2000023c 	.word	0x2000023c

0800ca18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800ca1e:	b086      	sub	sp, #24
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	f107 0318 	add.w	r3, r7, #24
 800ca26:	3b0c      	subs	r3, #12
 800ca28:	6018      	str	r0, [r3, #0]
 800ca2a:	f107 0318 	add.w	r3, r7, #24
 800ca2e:	3b10      	subs	r3, #16
 800ca30:	6019      	str	r1, [r3, #0]
 800ca32:	f107 0318 	add.w	r3, r7, #24
 800ca36:	3b11      	subs	r3, #17
 800ca38:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800ca3a:	f107 0318 	add.w	r3, r7, #24
 800ca3e:	3b0c      	subs	r3, #12
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <f_open+0x32>
 800ca46:	2309      	movs	r3, #9
 800ca48:	e319      	b.n	800d07e <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 800ca4a:	f107 0318 	add.w	r3, r7, #24
 800ca4e:	3b0c      	subs	r3, #12
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca56:	2200      	movs	r2, #0
 800ca58:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800ca5a:	f107 0318 	add.w	r3, r7, #24
 800ca5e:	3b11      	subs	r3, #17
 800ca60:	f107 0218 	add.w	r2, r7, #24
 800ca64:	3a11      	subs	r2, #17
 800ca66:	7812      	ldrb	r2, [r2, #0]
 800ca68:	f002 021f 	and.w	r2, r2, #31
 800ca6c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800ca6e:	f107 0318 	add.w	r3, r7, #24
 800ca72:	3b11      	subs	r3, #17
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	f023 0301 	bic.w	r3, r3, #1
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	f107 0118 	add.w	r1, r7, #24
 800ca80:	3910      	subs	r1, #16
 800ca82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ca86:	3b18      	subs	r3, #24
 800ca88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7ff fbdf 	bl	800c250 <find_volume>
 800ca92:	4603      	mov	r3, r0
 800ca94:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ca98:	f102 0217 	add.w	r2, r2, #23
 800ca9c:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800ca9e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800caa2:	f103 0317 	add.w	r3, r3, #23
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f040 82e3 	bne.w	800d074 <f_open+0x65c>
		INIT_BUF(dj);
 800caae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cab2:	3b18      	subs	r3, #24
 800cab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cab8:	3318      	adds	r3, #24
 800caba:	f107 0218 	add.w	r2, r7, #24
 800cabe:	3a04      	subs	r2, #4
 800cac0:	601a      	str	r2, [r3, #0]
 800cac2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cac6:	3b18      	subs	r3, #24
 800cac8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cacc:	4ad1      	ldr	r2, [pc, #836]	; (800ce14 <f_open+0x3fc>)
 800cace:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800cad0:	f107 0318 	add.w	r3, r7, #24
 800cad4:	3b10      	subs	r3, #16
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cadc:	3b18      	subs	r3, #24
 800cade:	4611      	mov	r1, r2
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7ff fa89 	bl	800bff8 <follow_path>
 800cae6:	4603      	mov	r3, r0
 800cae8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800caec:	f102 0217 	add.w	r2, r2, #23
 800caf0:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800caf2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800caf6:	3b18      	subs	r3, #24
 800caf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cafc:	3314      	adds	r3, #20
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cb04:	f102 0210 	add.w	r2, r2, #16
 800cb08:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cb0a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb0e:	f103 0317 	add.w	r3, r3, #23
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d126      	bne.n	800cb66 <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800cb18:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb1c:	f103 0310 	add.w	r3, r3, #16
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d106      	bne.n	800cb34 <f_open+0x11c>
				res = FR_INVALID_NAME;
 800cb26:	2306      	movs	r3, #6
 800cb28:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cb2c:	f102 0217 	add.w	r2, r2, #23
 800cb30:	7013      	strb	r3, [r2, #0]
 800cb32:	e018      	b.n	800cb66 <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cb34:	f107 0318 	add.w	r3, r7, #24
 800cb38:	3b11      	subs	r3, #17
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	f023 0301 	bic.w	r3, r3, #1
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	bf14      	ite	ne
 800cb44:	2301      	movne	r3, #1
 800cb46:	2300      	moveq	r3, #0
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cb50:	3b18      	subs	r3, #24
 800cb52:	4611      	mov	r1, r2
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fd fb07 	bl	800a168 <chk_lock>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cb60:	f102 0217 	add.w	r2, r2, #23
 800cb64:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cb66:	f107 0318 	add.w	r3, r7, #24
 800cb6a:	3b11      	subs	r3, #17
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	f003 031c 	and.w	r3, r3, #28
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	f000 8150 	beq.w	800ce18 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 800cb78:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb7c:	f103 0317 	add.w	r3, r3, #23
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d030      	beq.n	800cbe8 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800cb86:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb8a:	f103 0317 	add.w	r3, r3, #23
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	2b04      	cmp	r3, #4
 800cb92:	d112      	bne.n	800cbba <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cb94:	f7fd fb5a 	bl	800a24c <enq_lock>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d007      	beq.n	800cbae <f_open+0x196>
 800cb9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cba2:	3b18      	subs	r3, #24
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7fe ff35 	bl	800ba14 <dir_register>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	e000      	b.n	800cbb0 <f_open+0x198>
 800cbae:	2312      	movs	r3, #18
 800cbb0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cbb4:	f102 0217 	add.w	r2, r2, #23
 800cbb8:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cbba:	f107 0318 	add.w	r3, r7, #24
 800cbbe:	3b11      	subs	r3, #17
 800cbc0:	f107 0218 	add.w	r2, r7, #24
 800cbc4:	3a11      	subs	r2, #17
 800cbc6:	7812      	ldrb	r2, [r2, #0]
 800cbc8:	f042 0208 	orr.w	r2, r2, #8
 800cbcc:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800cbce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cbd2:	3b18      	subs	r3, #24
 800cbd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbd8:	3314      	adds	r3, #20
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cbe0:	f102 0210 	add.w	r2, r2, #16
 800cbe4:	6013      	str	r3, [r2, #0]
 800cbe6:	e01f      	b.n	800cc28 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cbe8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cbec:	f103 0310 	add.w	r3, r3, #16
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	330b      	adds	r3, #11
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	f003 0311 	and.w	r3, r3, #17
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d006      	beq.n	800cc0c <f_open+0x1f4>
					res = FR_DENIED;
 800cbfe:	2307      	movs	r3, #7
 800cc00:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc04:	f102 0217 	add.w	r2, r2, #23
 800cc08:	7013      	strb	r3, [r2, #0]
 800cc0a:	e00d      	b.n	800cc28 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800cc0c:	f107 0318 	add.w	r3, r7, #24
 800cc10:	3b11      	subs	r3, #17
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	f003 0304 	and.w	r3, r3, #4
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d005      	beq.n	800cc28 <f_open+0x210>
						res = FR_EXIST;
 800cc1c:	2308      	movs	r3, #8
 800cc1e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc22:	f102 0217 	add.w	r2, r2, #23
 800cc26:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cc28:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc2c:	f103 0317 	add.w	r3, r3, #23
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f040 8122 	bne.w	800ce7c <f_open+0x464>
 800cc38:	f107 0318 	add.w	r3, r7, #24
 800cc3c:	3b11      	subs	r3, #17
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	f003 0308 	and.w	r3, r3, #8
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	f000 8119 	beq.w	800ce7c <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 800cc4a:	f7fd f913 	bl	8009e74 <get_fattime>
 800cc4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc52:	f103 030c 	add.w	r3, r3, #12
 800cc56:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800cc58:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc5c:	f103 0310 	add.w	r3, r3, #16
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	330e      	adds	r3, #14
 800cc64:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cc68:	f102 020c 	add.w	r2, r2, #12
 800cc6c:	6812      	ldr	r2, [r2, #0]
 800cc6e:	b2d2      	uxtb	r2, r2
 800cc70:	701a      	strb	r2, [r3, #0]
 800cc72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc76:	f103 030c 	add.w	r3, r3, #12
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	0a1b      	lsrs	r3, r3, #8
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc86:	f103 0310 	add.w	r3, r3, #16
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	330f      	adds	r3, #15
 800cc8e:	b2d2      	uxtb	r2, r2
 800cc90:	701a      	strb	r2, [r3, #0]
 800cc92:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc96:	f103 030c 	add.w	r3, r3, #12
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	0c1a      	lsrs	r2, r3, #16
 800cc9e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cca2:	f103 0310 	add.w	r3, r3, #16
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3310      	adds	r3, #16
 800ccaa:	b2d2      	uxtb	r2, r2
 800ccac:	701a      	strb	r2, [r3, #0]
 800ccae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ccb2:	f103 030c 	add.w	r3, r3, #12
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	0e1a      	lsrs	r2, r3, #24
 800ccba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ccbe:	f103 0310 	add.w	r3, r3, #16
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	3311      	adds	r3, #17
 800ccc6:	b2d2      	uxtb	r2, r2
 800ccc8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800ccca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ccce:	f103 0310 	add.w	r3, r3, #16
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	330b      	adds	r3, #11
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800ccda:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ccde:	f103 0310 	add.w	r3, r3, #16
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	331c      	adds	r3, #28
 800cce6:	2200      	movs	r2, #0
 800cce8:	701a      	strb	r2, [r3, #0]
 800ccea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ccee:	f103 0310 	add.w	r3, r3, #16
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	331d      	adds	r3, #29
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	701a      	strb	r2, [r3, #0]
 800ccfa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ccfe:	f103 0310 	add.w	r3, r3, #16
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	331e      	adds	r3, #30
 800cd06:	2200      	movs	r2, #0
 800cd08:	701a      	strb	r2, [r3, #0]
 800cd0a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cd0e:	f103 0310 	add.w	r3, r3, #16
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	331f      	adds	r3, #31
 800cd16:	2200      	movs	r2, #0
 800cd18:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800cd1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd1e:	3b18      	subs	r3, #24
 800cd20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cd2a:	f102 0210 	add.w	r2, r2, #16
 800cd2e:	6811      	ldr	r1, [r2, #0]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fe fbae 	bl	800b492 <ld_clust>
 800cd36:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cd3a:	f103 0308 	add.w	r3, r3, #8
 800cd3e:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800cd40:	2100      	movs	r1, #0
 800cd42:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cd46:	f103 0310 	add.w	r3, r3, #16
 800cd4a:	6818      	ldr	r0, [r3, #0]
 800cd4c:	f7fe fbd0 	bl	800b4f0 <st_clust>
				dj.fs->wflag = 1;
 800cd50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd54:	3b18      	subs	r3, #24
 800cd56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd60:	3304      	adds	r3, #4
 800cd62:	2201      	movs	r2, #1
 800cd64:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800cd66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cd6a:	f103 0308 	add.w	r3, r3, #8
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	f000 8083 	beq.w	800ce7c <f_open+0x464>
					dw = dj.fs->winsect;
 800cd76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd7a:	3b18      	subs	r3, #24
 800cd7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cd86:	330c      	adds	r3, #12
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cd8e:	f102 020c 	add.w	r2, r2, #12
 800cd92:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800cd94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd98:	3b18      	subs	r3, #24
 800cd9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cda4:	f102 0208 	add.w	r2, r2, #8
 800cda8:	6811      	ldr	r1, [r2, #0]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fd ff86 	bl	800acbc <remove_chain>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cdb6:	f102 0217 	add.w	r2, r2, #23
 800cdba:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800cdbc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cdc0:	f103 0317 	add.w	r3, r3, #23
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d158      	bne.n	800ce7c <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800cdca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cdce:	3b18      	subs	r3, #24
 800cdd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cdda:	f102 0208 	add.w	r2, r2, #8
 800cdde:	6812      	ldr	r2, [r2, #0]
 800cde0:	3a01      	subs	r2, #1
 800cde2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cde6:	330c      	adds	r3, #12
 800cde8:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 800cdea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cdee:	3b18      	subs	r3, #24
 800cdf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cdfa:	f102 020c 	add.w	r2, r2, #12
 800cdfe:	6811      	ldr	r1, [r2, #0]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7fd fbd1 	bl	800a5a8 <move_window>
 800ce06:	4603      	mov	r3, r0
 800ce08:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ce0c:	f102 0217 	add.w	r2, r2, #23
 800ce10:	7013      	strb	r3, [r2, #0]
 800ce12:	e033      	b.n	800ce7c <f_open+0x464>
 800ce14:	2000025c 	.word	0x2000025c
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800ce18:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ce1c:	f103 0317 	add.w	r3, r3, #23
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d12a      	bne.n	800ce7c <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800ce26:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ce2a:	f103 0310 	add.w	r3, r3, #16
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	330b      	adds	r3, #11
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	f003 0310 	and.w	r3, r3, #16
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d006      	beq.n	800ce4a <f_open+0x432>
					res = FR_NO_FILE;
 800ce3c:	2304      	movs	r3, #4
 800ce3e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ce42:	f102 0217 	add.w	r2, r2, #23
 800ce46:	7013      	strb	r3, [r2, #0]
 800ce48:	e018      	b.n	800ce7c <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800ce4a:	f107 0318 	add.w	r3, r7, #24
 800ce4e:	3b11      	subs	r3, #17
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	f003 0302 	and.w	r3, r3, #2
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d010      	beq.n	800ce7c <f_open+0x464>
 800ce5a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ce5e:	f103 0310 	add.w	r3, r3, #16
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	330b      	adds	r3, #11
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d005      	beq.n	800ce7c <f_open+0x464>
						res = FR_DENIED;
 800ce70:	2307      	movs	r3, #7
 800ce72:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ce76:	f102 0217 	add.w	r2, r2, #23
 800ce7a:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800ce7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ce80:	f103 0317 	add.w	r3, r3, #23
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d15b      	bne.n	800cf42 <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ce8a:	f107 0318 	add.w	r3, r7, #24
 800ce8e:	3b11      	subs	r3, #17
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	f003 0308 	and.w	r3, r3, #8
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d009      	beq.n	800ceae <f_open+0x496>
				mode |= FA__WRITTEN;
 800ce9a:	f107 0318 	add.w	r3, r7, #24
 800ce9e:	3b11      	subs	r3, #17
 800cea0:	f107 0218 	add.w	r2, r7, #24
 800cea4:	3a11      	subs	r2, #17
 800cea6:	7812      	ldrb	r2, [r2, #0]
 800cea8:	f042 0220 	orr.w	r2, r2, #32
 800ceac:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ceae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ceb2:	3b18      	subs	r3, #24
 800ceb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cebe:	330c      	adds	r3, #12
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	f107 0318 	add.w	r3, r7, #24
 800cec6:	3b0c      	subs	r3, #12
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cece:	331c      	adds	r3, #28
 800ced0:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800ced2:	f107 0318 	add.w	r3, r7, #24
 800ced6:	3b0c      	subs	r3, #12
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cede:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cee2:	f102 0210 	add.w	r2, r2, #16
 800cee6:	6812      	ldr	r2, [r2, #0]
 800cee8:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ceea:	f107 0318 	add.w	r3, r7, #24
 800ceee:	3b11      	subs	r3, #17
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	f023 0301 	bic.w	r3, r3, #1
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	bf14      	ite	ne
 800cefa:	2301      	movne	r3, #1
 800cefc:	2300      	moveq	r3, #0
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	461a      	mov	r2, r3
 800cf02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cf06:	3b18      	subs	r3, #24
 800cf08:	4611      	mov	r1, r2
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7fd f9c2 	bl	800a294 <inc_lock>
 800cf10:	4602      	mov	r2, r0
 800cf12:	f107 0318 	add.w	r3, r7, #24
 800cf16:	3b0c      	subs	r3, #12
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cf1e:	3308      	adds	r3, #8
 800cf20:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 800cf22:	f107 0318 	add.w	r3, r7, #24
 800cf26:	3b0c      	subs	r3, #12
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cf2e:	3308      	adds	r3, #8
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d105      	bne.n	800cf42 <f_open+0x52a>
 800cf36:	2302      	movs	r3, #2
 800cf38:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cf3c:	f102 0217 	add.w	r2, r2, #23
 800cf40:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800cf42:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cf46:	f103 0317 	add.w	r3, r3, #23
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f040 8091 	bne.w	800d074 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 800cf52:	f107 0318 	add.w	r3, r7, #24
 800cf56:	3b0c      	subs	r3, #12
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf5e:	3306      	adds	r3, #6
 800cf60:	f107 0218 	add.w	r2, r7, #24
 800cf64:	3a11      	subs	r2, #17
 800cf66:	7812      	ldrb	r2, [r2, #0]
 800cf68:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800cf6a:	f107 0318 	add.w	r3, r7, #24
 800cf6e:	3b0c      	subs	r3, #12
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf76:	3307      	adds	r3, #7
 800cf78:	2200      	movs	r2, #0
 800cf7a:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800cf7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cf80:	3b18      	subs	r3, #24
 800cf82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cf8c:	f102 0210 	add.w	r2, r2, #16
 800cf90:	6811      	ldr	r1, [r2, #0]
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fe fa7d 	bl	800b492 <ld_clust>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	f107 0318 	add.w	r3, r7, #24
 800cf9e:	3b0c      	subs	r3, #12
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfa6:	3310      	adds	r3, #16
 800cfa8:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800cfaa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cfae:	f103 0310 	add.w	r3, r3, #16
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	331f      	adds	r3, #31
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	061a      	lsls	r2, r3, #24
 800cfba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cfbe:	f103 0310 	add.w	r3, r3, #16
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	331e      	adds	r3, #30
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	041b      	lsls	r3, r3, #16
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cfd0:	f102 0210 	add.w	r2, r2, #16
 800cfd4:	6812      	ldr	r2, [r2, #0]
 800cfd6:	321d      	adds	r2, #29
 800cfd8:	7812      	ldrb	r2, [r2, #0]
 800cfda:	0212      	lsls	r2, r2, #8
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cfe2:	f102 0210 	add.w	r2, r2, #16
 800cfe6:	6812      	ldr	r2, [r2, #0]
 800cfe8:	321c      	adds	r2, #28
 800cfea:	7812      	ldrb	r2, [r2, #0]
 800cfec:	431a      	orrs	r2, r3
 800cfee:	f107 0318 	add.w	r3, r7, #24
 800cff2:	3b0c      	subs	r3, #12
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cffa:	330c      	adds	r3, #12
 800cffc:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 800cffe:	f107 0318 	add.w	r3, r7, #24
 800d002:	3b0c      	subs	r3, #12
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d00a:	3308      	adds	r3, #8
 800d00c:	2200      	movs	r2, #0
 800d00e:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 800d010:	f107 0318 	add.w	r3, r7, #24
 800d014:	3b0c      	subs	r3, #12
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d01c:	3318      	adds	r3, #24
 800d01e:	2200      	movs	r2, #0
 800d020:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800d022:	f107 0318 	add.w	r3, r7, #24
 800d026:	3b0c      	subs	r3, #12
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d02e:	3304      	adds	r3, #4
 800d030:	2200      	movs	r2, #0
 800d032:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800d034:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d038:	3b18      	subs	r3, #24
 800d03a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	f107 0318 	add.w	r3, r7, #24
 800d044:	3b0c      	subs	r3, #12
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d04c:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800d04e:	f107 0318 	add.w	r3, r7, #24
 800d052:	3b0c      	subs	r3, #12
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d060:	3306      	adds	r3, #6
 800d062:	881a      	ldrh	r2, [r3, #0]
 800d064:	f107 0318 	add.w	r3, r7, #24
 800d068:	3b0c      	subs	r3, #12
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d070:	3304      	adds	r3, #4
 800d072:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 800d074:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800d078:	f103 0317 	add.w	r3, r3, #23
 800d07c:	781b      	ldrb	r3, [r3, #0]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800d084:	3718      	adds	r7, #24
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop

0800d08c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08a      	sub	sp, #40	; 0x28
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	607a      	str	r2, [r7, #4]
 800d098:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f7ff fc2f 	bl	800c908 <validate>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d0ae:	7dfb      	ldrb	r3, [r7, #23]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <f_write+0x2c>
 800d0b4:	7dfb      	ldrb	r3, [r7, #23]
 800d0b6:	e258      	b.n	800d56a <f_write+0x4de>
	if (fp->err)							/* Check error */
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0be:	3307      	adds	r3, #7
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d005      	beq.n	800d0d2 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0cc:	3307      	adds	r3, #7
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	e24b      	b.n	800d56a <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0d8:	3306      	adds	r3, #6
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	f003 0302 	and.w	r3, r3, #2
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d101      	bne.n	800d0e8 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 800d0e4:	2307      	movs	r3, #7
 800d0e6:	e240      	b.n	800d56a <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0ee:	3308      	adds	r3, #8
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	441a      	add	r2, r3
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0fc:	3308      	adds	r3, #8
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	429a      	cmp	r2, r3
 800d102:	f080 8208 	bcs.w	800d516 <f_write+0x48a>
 800d106:	2300      	movs	r3, #0
 800d108:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800d10a:	e204      	b.n	800d516 <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d112:	3308      	adds	r3, #8
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d122:	330a      	adds	r3, #10
 800d124:	881b      	ldrh	r3, [r3, #0]
 800d126:	fbb2 f1f3 	udiv	r1, r2, r3
 800d12a:	fb03 f301 	mul.w	r3, r3, r1
 800d12e:	1ad3      	subs	r3, r2, r3
 800d130:	2b00      	cmp	r3, #0
 800d132:	f040 818d 	bne.w	800d450 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d13c:	3308      	adds	r3, #8
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d14c:	330a      	adds	r3, #10
 800d14e:	881b      	ldrh	r3, [r3, #0]
 800d150:	fbb2 f3f3 	udiv	r3, r2, r3
 800d154:	b2da      	uxtb	r2, r3
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d162:	3302      	adds	r3, #2
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	3b01      	subs	r3, #1
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	4013      	ands	r3, r2
 800d16c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800d16e:	7dbb      	ldrb	r3, [r7, #22]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d167      	bne.n	800d244 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d17a:	3308      	adds	r3, #8
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d112      	bne.n	800d1a8 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d188:	3310      	adds	r3, #16
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800d18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d190:	2b00      	cmp	r3, #0
 800d192:	d129      	bne.n	800d1e8 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2100      	movs	r1, #0
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fd fdf4 	bl	800ad8c <create_chain>
 800d1a4:	6278      	str	r0, [r7, #36]	; 0x24
 800d1a6:	e01f      	b.n	800d1e8 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d1ae:	3304      	adds	r3, #4
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00a      	beq.n	800d1cc <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1bc:	3308      	adds	r3, #8
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	f7fd fe93 	bl	800aeee <clmt_clust>
 800d1c8:	6278      	str	r0, [r7, #36]	; 0x24
 800d1ca:	e00d      	b.n	800d1e8 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1da:	3314      	adds	r3, #20
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4619      	mov	r1, r3
 800d1e0:	4610      	mov	r0, r2
 800d1e2:	f7fd fdd3 	bl	800ad8c <create_chain>
 800d1e6:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	f000 8198 	beq.w	800d520 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d107      	bne.n	800d206 <f_write+0x17a>
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1fc:	3307      	adds	r3, #7
 800d1fe:	2202      	movs	r2, #2
 800d200:	701a      	strb	r2, [r3, #0]
 800d202:	2302      	movs	r3, #2
 800d204:	e1b1      	b.n	800d56a <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20c:	d107      	bne.n	800d21e <f_write+0x192>
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d214:	3307      	adds	r3, #7
 800d216:	2201      	movs	r2, #1
 800d218:	701a      	strb	r2, [r3, #0]
 800d21a:	2301      	movs	r3, #1
 800d21c:	e1a5      	b.n	800d56a <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d224:	3314      	adds	r3, #20
 800d226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d228:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d230:	3310      	adds	r3, #16
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d105      	bne.n	800d244 <f_write+0x1b8>
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d23e:	3310      	adds	r3, #16
 800d240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d242:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d24a:	3306      	adds	r3, #6
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d252:	2b00      	cmp	r3, #0
 800d254:	d028      	beq.n	800d2a8 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d262:	3301      	adds	r3, #1
 800d264:	7818      	ldrb	r0, [r3, #0]
 800d266:	68f9      	ldr	r1, [r7, #12]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d26e:	3318      	adds	r3, #24
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	2301      	movs	r3, #1
 800d274:	f7fc fec0 	bl	8009ff8 <disk_write>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d007      	beq.n	800d28e <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d284:	3307      	adds	r3, #7
 800d286:	2201      	movs	r2, #1
 800d288:	701a      	strb	r2, [r3, #0]
 800d28a:	2301      	movs	r3, #1
 800d28c:	e16d      	b.n	800d56a <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d294:	3306      	adds	r3, #6
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d29c:	b2da      	uxtb	r2, r3
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2a4:	3306      	adds	r3, #6
 800d2a6:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2b6:	3314      	adds	r3, #20
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	4610      	mov	r0, r2
 800d2be:	f7fd fa76 	bl	800a7ae <clust2sect>
 800d2c2:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d107      	bne.n	800d2da <f_write+0x24e>
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2d0:	3307      	adds	r3, #7
 800d2d2:	2202      	movs	r2, #2
 800d2d4:	701a      	strb	r2, [r3, #0]
 800d2d6:	2302      	movs	r3, #2
 800d2d8:	e147      	b.n	800d56a <f_write+0x4de>
			sect += csect;
 800d2da:	7dbb      	ldrb	r3, [r7, #22]
 800d2dc:	693a      	ldr	r2, [r7, #16]
 800d2de:	4413      	add	r3, r2
 800d2e0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ee:	330a      	adds	r3, #10
 800d2f0:	881b      	ldrh	r3, [r3, #0]
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2fa:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d074      	beq.n	800d3ec <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800d302:	7dba      	ldrb	r2, [r7, #22]
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	441a      	add	r2, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d314:	3302      	adds	r3, #2
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d90b      	bls.n	800d334 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d328:	3302      	adds	r3, #2
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	461a      	mov	r2, r3
 800d32e:	7dbb      	ldrb	r3, [r7, #22]
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d340:	3301      	adds	r3, #1
 800d342:	7818      	ldrb	r0, [r3, #0]
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	693a      	ldr	r2, [r7, #16]
 800d348:	69b9      	ldr	r1, [r7, #24]
 800d34a:	f7fc fe55 	bl	8009ff8 <disk_write>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d007      	beq.n	800d364 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d35a:	3307      	adds	r3, #7
 800d35c:	2201      	movs	r2, #1
 800d35e:	701a      	strb	r2, [r3, #0]
 800d360:	2301      	movs	r3, #1
 800d362:	e102      	b.n	800d56a <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d36a:	3318      	adds	r3, #24
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	69fa      	ldr	r2, [r7, #28]
 800d374:	429a      	cmp	r2, r3
 800d376:	d92b      	bls.n	800d3d0 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800d378:	68f8      	ldr	r0, [r7, #12]
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d380:	3318      	adds	r3, #24
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	1ad2      	subs	r2, r2, r3
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d394:	330a      	adds	r3, #10
 800d396:	881b      	ldrh	r3, [r3, #0]
 800d398:	fb03 f302 	mul.w	r3, r3, r2
 800d39c:	69ba      	ldr	r2, [r7, #24]
 800d39e:	18d1      	adds	r1, r2, r3
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ac:	330a      	adds	r3, #10
 800d3ae:	881b      	ldrh	r3, [r3, #0]
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	f7fc fe5f 	bl	800a074 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3bc:	3306      	adds	r3, #6
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3cc:	3306      	adds	r3, #6
 800d3ce:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3dc:	330a      	adds	r3, #10
 800d3de:	881b      	ldrh	r3, [r3, #0]
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	fb02 f303 	mul.w	r3, r2, r3
 800d3e8:	623b      	str	r3, [r7, #32]
				continue;
 800d3ea:	e07a      	b.n	800d4e2 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3f2:	3318      	adds	r3, #24
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	693a      	ldr	r2, [r7, #16]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d023      	beq.n	800d444 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d402:	3308      	adds	r3, #8
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d40c:	330c      	adds	r3, #12
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	429a      	cmp	r2, r3
 800d412:	d217      	bcs.n	800d444 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d420:	3301      	adds	r3, #1
 800d422:	7818      	ldrb	r0, [r3, #0]
 800d424:	68f9      	ldr	r1, [r7, #12]
 800d426:	2301      	movs	r3, #1
 800d428:	693a      	ldr	r2, [r7, #16]
 800d42a:	f7fc fdc5 	bl	8009fb8 <disk_read>
 800d42e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800d430:	2b00      	cmp	r3, #0
 800d432:	d007      	beq.n	800d444 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d43a:	3307      	adds	r3, #7
 800d43c:	2201      	movs	r2, #1
 800d43e:	701a      	strb	r2, [r3, #0]
 800d440:	2301      	movs	r3, #1
 800d442:	e092      	b.n	800d56a <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d44a:	3318      	adds	r3, #24
 800d44c:	693a      	ldr	r2, [r7, #16]
 800d44e:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d45c:	330a      	adds	r3, #10
 800d45e:	881b      	ldrh	r3, [r3, #0]
 800d460:	4618      	mov	r0, r3
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d468:	3308      	adds	r3, #8
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d478:	330a      	adds	r3, #10
 800d47a:	881b      	ldrh	r3, [r3, #0]
 800d47c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d480:	fb03 f301 	mul.w	r3, r3, r1
 800d484:	1ad3      	subs	r3, r2, r3
 800d486:	1ac3      	subs	r3, r0, r3
 800d488:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800d48a:	6a3a      	ldr	r2, [r7, #32]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d901      	bls.n	800d496 <f_write+0x40a>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d49c:	3308      	adds	r3, #8
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4ac:	330a      	adds	r3, #10
 800d4ae:	881b      	ldrh	r3, [r3, #0]
 800d4b0:	fbb2 f1f3 	udiv	r1, r2, r3
 800d4b4:	fb03 f301 	mul.w	r3, r3, r1
 800d4b8:	1ad3      	subs	r3, r2, r3
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	4413      	add	r3, r2
 800d4be:	6a3a      	ldr	r2, [r7, #32]
 800d4c0:	69b9      	ldr	r1, [r7, #24]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fc fdd6 	bl	800a074 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4ce:	3306      	adds	r3, #6
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4d6:	b2da      	uxtb	r2, r3
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4de:	3306      	adds	r3, #6
 800d4e0:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800d4e2:	69ba      	ldr	r2, [r7, #24]
 800d4e4:	6a3b      	ldr	r3, [r7, #32]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	61bb      	str	r3, [r7, #24]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4f0:	3308      	adds	r3, #8
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	6a3b      	ldr	r3, [r7, #32]
 800d4f6:	441a      	add	r2, r3
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4fe:	3308      	adds	r3, #8
 800d500:	601a      	str	r2, [r3, #0]
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	6a3b      	ldr	r3, [r7, #32]
 800d508:	441a      	add	r2, r3
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	601a      	str	r2, [r3, #0]
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	6a3b      	ldr	r3, [r7, #32]
 800d512:	1ad3      	subs	r3, r2, r3
 800d514:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f47f adf7 	bne.w	800d10c <f_write+0x80>
 800d51e:	e000      	b.n	800d522 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d520:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d528:	3308      	adds	r3, #8
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d532:	330c      	adds	r3, #12
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	429a      	cmp	r2, r3
 800d538:	d909      	bls.n	800d54e <f_write+0x4c2>
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d540:	3308      	adds	r3, #8
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d54a:	330c      	adds	r3, #12
 800d54c:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d554:	3306      	adds	r3, #6
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	f043 0320 	orr.w	r3, r3, #32
 800d55c:	b2da      	uxtb	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d564:	3306      	adds	r3, #6
 800d566:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3728      	adds	r7, #40	; 0x28
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b086      	sub	sp, #24
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f7ff f9c4 	bl	800c908 <validate>
 800d580:	4603      	mov	r3, r0
 800d582:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d584:	7dfb      	ldrb	r3, [r7, #23]
 800d586:	2b00      	cmp	r3, #0
 800d588:	f040 80cc 	bne.w	800d724 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d592:	3306      	adds	r3, #6
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	f003 0320 	and.w	r3, r3, #32
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f000 80c2 	beq.w	800d724 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5a6:	3306      	adds	r3, #6
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d022      	beq.n	800d5f8 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5be:	3301      	adds	r3, #1
 800d5c0:	7818      	ldrb	r0, [r3, #0]
 800d5c2:	6879      	ldr	r1, [r7, #4]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5ca:	3318      	adds	r3, #24
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	f7fc fd12 	bl	8009ff8 <disk_write>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d001      	beq.n	800d5de <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e0a3      	b.n	800d726 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5e4:	3306      	adds	r3, #6
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5f4:	3306      	adds	r3, #6
 800d5f6:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d606:	331c      	adds	r3, #28
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4619      	mov	r1, r3
 800d60c:	4610      	mov	r0, r2
 800d60e:	f7fc ffcb 	bl	800a5a8 <move_window>
 800d612:	4603      	mov	r3, r0
 800d614:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800d616:	7dfb      	ldrb	r3, [r7, #23]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	f040 8083 	bne.w	800d724 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	330b      	adds	r3, #11
 800d62c:	781a      	ldrb	r2, [r3, #0]
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	330b      	adds	r3, #11
 800d632:	f042 0220 	orr.w	r2, r2, #32
 800d636:	b2d2      	uxtb	r2, r2
 800d638:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d640:	330c      	adds	r3, #12
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	331c      	adds	r3, #28
 800d648:	b2d2      	uxtb	r2, r2
 800d64a:	701a      	strb	r2, [r3, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d652:	330c      	adds	r3, #12
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	b29b      	uxth	r3, r3
 800d658:	0a1b      	lsrs	r3, r3, #8
 800d65a:	b29a      	uxth	r2, r3
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	331d      	adds	r3, #29
 800d660:	b2d2      	uxtb	r2, r2
 800d662:	701a      	strb	r2, [r3, #0]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d66a:	330c      	adds	r3, #12
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	0c1a      	lsrs	r2, r3, #16
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	331e      	adds	r3, #30
 800d674:	b2d2      	uxtb	r2, r2
 800d676:	701a      	strb	r2, [r3, #0]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d67e:	330c      	adds	r3, #12
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	0e1a      	lsrs	r2, r3, #24
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	331f      	adds	r3, #31
 800d688:	b2d2      	uxtb	r2, r2
 800d68a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d692:	3310      	adds	r3, #16
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4619      	mov	r1, r3
 800d698:	6938      	ldr	r0, [r7, #16]
 800d69a:	f7fd ff29 	bl	800b4f0 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800d69e:	f7fc fbe9 	bl	8009e74 <get_fattime>
 800d6a2:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	3316      	adds	r3, #22
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	b2d2      	uxtb	r2, r2
 800d6ac:	701a      	strb	r2, [r3, #0]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	0a1b      	lsrs	r3, r3, #8
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	3317      	adds	r3, #23
 800d6ba:	b2d2      	uxtb	r2, r2
 800d6bc:	701a      	strb	r2, [r3, #0]
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	0c1a      	lsrs	r2, r3, #16
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	3318      	adds	r3, #24
 800d6c6:	b2d2      	uxtb	r2, r2
 800d6c8:	701a      	strb	r2, [r3, #0]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	0e1a      	lsrs	r2, r3, #24
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	3319      	adds	r3, #25
 800d6d2:	b2d2      	uxtb	r2, r2
 800d6d4:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	3312      	adds	r3, #18
 800d6da:	2200      	movs	r2, #0
 800d6dc:	701a      	strb	r2, [r3, #0]
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	3313      	adds	r3, #19
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6ec:	3306      	adds	r3, #6
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	f023 0320 	bic.w	r3, r3, #32
 800d6f4:	b2da      	uxtb	r2, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6fc:	3306      	adds	r3, #6
 800d6fe:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d70c:	3304      	adds	r3, #4
 800d70e:	2201      	movs	r2, #1
 800d710:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7fc ff78 	bl	800a610 <sync_fs>
 800d720:	4603      	mov	r3, r0
 800d722:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800d724:	7dfb      	ldrb	r3, [r7, #23]
}
 800d726:	4618      	mov	r0, r3
 800d728:	3718      	adds	r7, #24
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b084      	sub	sp, #16
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f7ff ff1b 	bl	800d572 <f_sync>
 800d73c:	4603      	mov	r3, r0
 800d73e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d740:	7bfb      	ldrb	r3, [r7, #15]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d119      	bne.n	800d77a <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7ff f8de 	bl	800c908 <validate>
 800d74c:	4603      	mov	r3, r0
 800d74e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d750:	7bfb      	ldrb	r3, [r7, #15]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d111      	bne.n	800d77a <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d75c:	3308      	adds	r3, #8
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4618      	mov	r0, r3
 800d762:	f7fc fe59 	bl	800a418 <dec_lock>
 800d766:	4603      	mov	r3, r0
 800d768:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d76a:	7bfb      	ldrb	r3, [r7, #15]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d104      	bne.n	800d77a <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d776:	2200      	movs	r2, #0
 800d778:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b090      	sub	sp, #64	; 0x40
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7ff f8ba 	bl	800c908 <validate>
 800d794:	4603      	mov	r3, r0
 800d796:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d79a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d002      	beq.n	800d7a8 <f_lseek+0x24>
 800d7a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d7a6:	e31d      	b.n	800dde4 <f_lseek+0x660>
	if (fp->err)						/* Check error */
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7ae:	3307      	adds	r3, #7
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d005      	beq.n	800d7c2 <f_lseek+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7bc:	3307      	adds	r3, #7
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	e310      	b.n	800dde4 <f_lseek+0x660>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d7c8:	3304      	adds	r3, #4
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f000 813c 	beq.w	800da4a <f_lseek+0x2c6>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d8:	d172      	bne.n	800d8c0 <f_lseek+0x13c>
			tbl = fp->cltbl;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d7e0:	3304      	adds	r3, #4
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e8:	1d1a      	adds	r2, r3, #4
 800d7ea:	627a      	str	r2, [r7, #36]	; 0x24
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	617b      	str	r3, [r7, #20]
 800d7f0:	2302      	movs	r3, #2
 800d7f2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7fa:	3310      	adds	r3, #16
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d802:	2b00      	cmp	r3, #0
 800d804:	d049      	beq.n	800d89a <f_lseek+0x116>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d808:	613b      	str	r3, [r7, #16]
 800d80a:	2300      	movs	r3, #0
 800d80c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d810:	3302      	adds	r3, #2
 800d812:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81a:	3301      	adds	r3, #1
 800d81c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d828:	4618      	mov	r0, r3
 800d82a:	f7fc ffe8 	bl	800a7fe <get_fat>
 800d82e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800d830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d832:	2b01      	cmp	r3, #1
 800d834:	d807      	bhi.n	800d846 <f_lseek+0xc2>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d83c:	3307      	adds	r3, #7
 800d83e:	2202      	movs	r2, #2
 800d840:	701a      	strb	r2, [r3, #0]
 800d842:	2302      	movs	r3, #2
 800d844:	e2ce      	b.n	800dde4 <f_lseek+0x660>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84c:	d107      	bne.n	800d85e <f_lseek+0xda>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d854:	3307      	adds	r3, #7
 800d856:	2201      	movs	r2, #1
 800d858:	701a      	strb	r2, [r3, #0]
 800d85a:	2301      	movs	r3, #1
 800d85c:	e2c2      	b.n	800dde4 <f_lseek+0x660>
					} while (cl == pcl + 1);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	3301      	adds	r3, #1
 800d862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d864:	429a      	cmp	r2, r3
 800d866:	d0d5      	beq.n	800d814 <f_lseek+0x90>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d809      	bhi.n	800d884 <f_lseek+0x100>
						*tbl++ = ncl; *tbl++ = tcl;
 800d870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d872:	1d1a      	adds	r2, r3, #4
 800d874:	627a      	str	r2, [r7, #36]	; 0x24
 800d876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d878:	601a      	str	r2, [r3, #0]
 800d87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87c:	1d1a      	adds	r2, r3, #4
 800d87e:	627a      	str	r2, [r7, #36]	; 0x24
 800d880:	693a      	ldr	r2, [r7, #16]
 800d882:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d890:	3314      	adds	r3, #20
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d896:	429a      	cmp	r2, r3
 800d898:	d3b5      	bcc.n	800d806 <f_lseek+0x82>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8a6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800d8a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d803      	bhi.n	800d8b8 <f_lseek+0x134>
				*tbl = 0;		/* Terminate table */
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	e293      	b.n	800dde0 <f_lseek+0x65c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d8b8:	2311      	movs	r3, #17
 800d8ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d8be:	e28f      	b.n	800dde0 <f_lseek+0x65c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8c6:	330c      	adds	r3, #12
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	683a      	ldr	r2, [r7, #0]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d905      	bls.n	800d8dc <f_lseek+0x158>
				ofs = fp->fsize;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8d6:	330c      	adds	r3, #12
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8e2:	3308      	adds	r3, #8
 800d8e4:	683a      	ldr	r2, [r7, #0]
 800d8e6:	601a      	str	r2, [r3, #0]
			if (ofs) {
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	f000 8278 	beq.w	800dde0 <f_lseek+0x65c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7fd faf9 	bl	800aeee <clmt_clust>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d904:	3314      	adds	r3, #20
 800d906:	601a      	str	r2, [r3, #0]
				dsc = clust2sect(fp->fs, fp->clust);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d916:	3314      	adds	r3, #20
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4619      	mov	r1, r3
 800d91c:	4610      	mov	r0, r2
 800d91e:	f7fc ff46 	bl	800a7ae <clust2sect>
 800d922:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d107      	bne.n	800d93a <f_lseek+0x1b6>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d930:	3307      	adds	r3, #7
 800d932:	2202      	movs	r2, #2
 800d934:	701a      	strb	r2, [r3, #0]
 800d936:	2302      	movs	r3, #2
 800d938:	e254      	b.n	800dde4 <f_lseek+0x660>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	1e5a      	subs	r2, r3, #1
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d94a:	330a      	adds	r3, #10
 800d94c:	881b      	ldrh	r3, [r3, #0]
 800d94e:	fbb2 f2f3 	udiv	r2, r2, r3
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d95e:	3302      	adds	r3, #2
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	3b01      	subs	r3, #1
 800d964:	4013      	ands	r3, r2
 800d966:	69ba      	ldr	r2, [r7, #24]
 800d968:	4413      	add	r3, r2
 800d96a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d972:	3308      	adds	r3, #8
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d982:	330a      	adds	r3, #10
 800d984:	881b      	ldrh	r3, [r3, #0]
 800d986:	fbb2 f1f3 	udiv	r1, r2, r3
 800d98a:	fb03 f301 	mul.w	r3, r3, r1
 800d98e:	1ad3      	subs	r3, r2, r3
 800d990:	2b00      	cmp	r3, #0
 800d992:	f000 8225 	beq.w	800dde0 <f_lseek+0x65c>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d99c:	3318      	adds	r3, #24
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	69ba      	ldr	r2, [r7, #24]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	f000 821c 	beq.w	800dde0 <f_lseek+0x65c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9ae:	3306      	adds	r3, #6
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d028      	beq.n	800da0c <f_lseek+0x288>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	7818      	ldrb	r0, [r3, #0]
 800d9ca:	6879      	ldr	r1, [r7, #4]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9d2:	3318      	adds	r3, #24
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	f7fc fb0e 	bl	8009ff8 <disk_write>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d007      	beq.n	800d9f2 <f_lseek+0x26e>
							ABORT(fp->fs, FR_DISK_ERR);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9e8:	3307      	adds	r3, #7
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	701a      	strb	r2, [r3, #0]
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e1f8      	b.n	800dde4 <f_lseek+0x660>
						fp->flag &= ~FA__DIRTY;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9f8:	3306      	adds	r3, #6
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da00:	b2da      	uxtb	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da08:	3306      	adds	r3, #6
 800da0a:	701a      	strb	r2, [r3, #0]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da18:	3301      	adds	r3, #1
 800da1a:	7818      	ldrb	r0, [r3, #0]
 800da1c:	6879      	ldr	r1, [r7, #4]
 800da1e:	2301      	movs	r3, #1
 800da20:	69ba      	ldr	r2, [r7, #24]
 800da22:	f7fc fac9 	bl	8009fb8 <disk_read>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d007      	beq.n	800da3c <f_lseek+0x2b8>
						ABORT(fp->fs, FR_DISK_ERR);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da32:	3307      	adds	r3, #7
 800da34:	2201      	movs	r2, #1
 800da36:	701a      	strb	r2, [r3, #0]
 800da38:	2301      	movs	r3, #1
 800da3a:	e1d3      	b.n	800dde4 <f_lseek+0x660>
#endif
					fp->dsect = dsc;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da42:	3318      	adds	r3, #24
 800da44:	69ba      	ldr	r2, [r7, #24]
 800da46:	601a      	str	r2, [r3, #0]
 800da48:	e1ca      	b.n	800dde0 <f_lseek+0x65c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da50:	330c      	adds	r3, #12
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	683a      	ldr	r2, [r7, #0]
 800da56:	429a      	cmp	r2, r3
 800da58:	d90e      	bls.n	800da78 <f_lseek+0x2f4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da60:	3306      	adds	r3, #6
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	f003 0302 	and.w	r3, r3, #2
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d105      	bne.n	800da78 <f_lseek+0x2f4>
#endif
			) ofs = fp->fsize;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da72:	330c      	adds	r3, #12
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da7e:	3308      	adds	r3, #8
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800da84:	2300      	movs	r3, #0
 800da86:	637b      	str	r3, [r7, #52]	; 0x34
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da8e:	3308      	adds	r3, #8
 800da90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da92:	601a      	str	r2, [r3, #0]
		if (ofs) {
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	f000 8113 	beq.w	800dcc2 <f_lseek+0x53e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daa8:	3302      	adds	r3, #2
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	461a      	mov	r2, r3
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daba:	330a      	adds	r3, #10
 800dabc:	881b      	ldrh	r3, [r3, #0]
 800dabe:	fb03 f302 	mul.w	r3, r3, r2
 800dac2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800dac4:	6a3b      	ldr	r3, [r7, #32]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d024      	beq.n	800db14 <f_lseek+0x390>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	1e5a      	subs	r2, r3, #1
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	fbb2 f2f3 	udiv	r2, r2, r3
 800dad4:	6a3b      	ldr	r3, [r7, #32]
 800dad6:	1e59      	subs	r1, r3, #1
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800dade:	429a      	cmp	r2, r3
 800dae0:	d318      	bcc.n	800db14 <f_lseek+0x390>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	1e5a      	subs	r2, r3, #1
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	425b      	negs	r3, r3
 800daea:	401a      	ands	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800daf2:	3308      	adds	r3, #8
 800daf4:	601a      	str	r2, [r3, #0]
				ofs -= fp->fptr;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dafc:	3308      	adds	r3, #8
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	1ad3      	subs	r3, r2, r3
 800db04:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db0c:	3314      	adds	r3, #20
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	63bb      	str	r3, [r7, #56]	; 0x38
 800db12:	e034      	b.n	800db7e <f_lseek+0x3fa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db1a:	3310      	adds	r3, #16
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800db20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db22:	2b00      	cmp	r3, #0
 800db24:	d125      	bne.n	800db72 <f_lseek+0x3ee>
					clst = create_chain(fp->fs, 0);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2100      	movs	r1, #0
 800db30:	4618      	mov	r0, r3
 800db32:	f7fd f92b 	bl	800ad8c <create_chain>
 800db36:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800db38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d107      	bne.n	800db4e <f_lseek+0x3ca>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db44:	3307      	adds	r3, #7
 800db46:	2202      	movs	r2, #2
 800db48:	701a      	strb	r2, [r3, #0]
 800db4a:	2302      	movs	r3, #2
 800db4c:	e14a      	b.n	800dde4 <f_lseek+0x660>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800db4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db54:	d107      	bne.n	800db66 <f_lseek+0x3e2>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db5c:	3307      	adds	r3, #7
 800db5e:	2201      	movs	r2, #1
 800db60:	701a      	strb	r2, [r3, #0]
 800db62:	2301      	movs	r3, #1
 800db64:	e13e      	b.n	800dde4 <f_lseek+0x660>
					fp->sclust = clst;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db6c:	3310      	adds	r3, #16
 800db6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db70:	601a      	str	r2, [r3, #0]
				}
#endif
				fp->clust = clst;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db78:	3314      	adds	r3, #20
 800db7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db7c:	601a      	str	r2, [r3, #0]
			}
			if (clst != 0) {
 800db7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 809e 	beq.w	800dcc2 <f_lseek+0x53e>
				while (ofs > bcs) {						/* Cluster following loop */
 800db86:	e058      	b.n	800dc3a <f_lseek+0x4b6>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db8e:	3306      	adds	r3, #6
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	f003 0302 	and.w	r3, r3, #2
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00e      	beq.n	800dbb8 <f_lseek+0x434>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fd f8f1 	bl	800ad8c <create_chain>
 800dbaa:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800dbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10b      	bne.n	800dbca <f_lseek+0x446>
							ofs = bcs; break;
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	603b      	str	r3, [r7, #0]
 800dbb6:	e044      	b.n	800dc42 <f_lseek+0x4be>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fc fe1b 	bl	800a7fe <get_fat>
 800dbc8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800dbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd0:	d107      	bne.n	800dbe2 <f_lseek+0x45e>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbd8:	3307      	adds	r3, #7
 800dbda:	2201      	movs	r2, #1
 800dbdc:	701a      	strb	r2, [r3, #0]
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e100      	b.n	800dde4 <f_lseek+0x660>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800dbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d90a      	bls.n	800dbfe <f_lseek+0x47a>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbf4:	3314      	adds	r3, #20
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d307      	bcc.n	800dc0e <f_lseek+0x48a>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc04:	3307      	adds	r3, #7
 800dc06:	2202      	movs	r2, #2
 800dc08:	701a      	strb	r2, [r3, #0]
 800dc0a:	2302      	movs	r3, #2
 800dc0c:	e0ea      	b.n	800dde4 <f_lseek+0x660>
					fp->clust = clst;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc14:	3314      	adds	r3, #20
 800dc16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc18:	601a      	str	r2, [r3, #0]
					fp->fptr += bcs;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc20:	3308      	adds	r3, #8
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	441a      	add	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc2e:	3308      	adds	r3, #8
 800dc30:	601a      	str	r2, [r3, #0]
					ofs -= bcs;
 800dc32:	683a      	ldr	r2, [r7, #0]
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	1ad3      	subs	r3, r2, r3
 800dc38:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d8a2      	bhi.n	800db88 <f_lseek+0x404>
				}
				fp->fptr += ofs;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc48:	3308      	adds	r3, #8
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	441a      	add	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc56:	3308      	adds	r3, #8
 800dc58:	601a      	str	r2, [r3, #0]
				if (ofs % SS(fp->fs)) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc66:	330a      	adds	r3, #10
 800dc68:	881b      	ldrh	r3, [r3, #0]
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc72:	fb02 f201 	mul.w	r2, r2, r1
 800dc76:	1a9b      	subs	r3, r3, r2
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d022      	beq.n	800dcc2 <f_lseek+0x53e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fc fd91 	bl	800a7ae <clust2sect>
 800dc8c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800dc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d107      	bne.n	800dca4 <f_lseek+0x520>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc9a:	3307      	adds	r3, #7
 800dc9c:	2202      	movs	r2, #2
 800dc9e:	701a      	strb	r2, [r3, #0]
 800dca0:	2302      	movs	r3, #2
 800dca2:	e09f      	b.n	800dde4 <f_lseek+0x660>
					nsect += ofs / SS(fp->fs);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcb0:	330a      	adds	r3, #10
 800dcb2:	881b      	ldrh	r3, [r3, #0]
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcbe:	4413      	add	r3, r2
 800dcc0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcc8:	3308      	adds	r3, #8
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcd8:	330a      	adds	r3, #10
 800dcda:	881b      	ldrh	r3, [r3, #0]
 800dcdc:	fbb2 f1f3 	udiv	r1, r2, r3
 800dce0:	fb03 f301 	mul.w	r3, r3, r1
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d057      	beq.n	800dd9a <f_lseek+0x616>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcf0:	3318      	adds	r3, #24
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d04f      	beq.n	800dd9a <f_lseek+0x616>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd00:	3306      	adds	r3, #6
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d028      	beq.n	800dd5e <f_lseek+0x5da>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd18:	3301      	adds	r3, #1
 800dd1a:	7818      	ldrb	r0, [r3, #0]
 800dd1c:	6879      	ldr	r1, [r7, #4]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd24:	3318      	adds	r3, #24
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	2301      	movs	r3, #1
 800dd2a:	f7fc f965 	bl	8009ff8 <disk_write>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d007      	beq.n	800dd44 <f_lseek+0x5c0>
					ABORT(fp->fs, FR_DISK_ERR);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd3a:	3307      	adds	r3, #7
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	701a      	strb	r2, [r3, #0]
 800dd40:	2301      	movs	r3, #1
 800dd42:	e04f      	b.n	800dde4 <f_lseek+0x660>
				fp->flag &= ~FA__DIRTY;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd4a:	3306      	adds	r3, #6
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd5a:	3306      	adds	r3, #6
 800dd5c:	701a      	strb	r2, [r3, #0]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	7818      	ldrb	r0, [r3, #0]
 800dd6e:	6879      	ldr	r1, [r7, #4]
 800dd70:	2301      	movs	r3, #1
 800dd72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd74:	f7fc f920 	bl	8009fb8 <disk_read>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d007      	beq.n	800dd8e <f_lseek+0x60a>
				ABORT(fp->fs, FR_DISK_ERR);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd84:	3307      	adds	r3, #7
 800dd86:	2201      	movs	r2, #1
 800dd88:	701a      	strb	r2, [r3, #0]
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	e02a      	b.n	800dde4 <f_lseek+0x660>
#endif
			fp->dsect = nsect;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd94:	3318      	adds	r3, #24
 800dd96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd98:	601a      	str	r2, [r3, #0]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dda0:	3308      	adds	r3, #8
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddaa:	330c      	adds	r3, #12
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d916      	bls.n	800dde0 <f_lseek+0x65c>
			fp->fsize = fp->fptr;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddb8:	3308      	adds	r3, #8
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddc2:	330c      	adds	r3, #12
 800ddc4:	601a      	str	r2, [r3, #0]
			fp->flag |= FA__WRITTEN;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddcc:	3306      	adds	r3, #6
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	f043 0320 	orr.w	r3, r3, #32
 800ddd4:	b2da      	uxtb	r2, r3
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dddc:	3306      	adds	r3, #6
 800ddde:	701a      	strb	r2, [r3, #0]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800dde0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3740      	adds	r7, #64	; 0x40
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800ddf8:	78fb      	ldrb	r3, [r7, #3]
 800ddfa:	2b0a      	cmp	r3, #10
 800ddfc:	d103      	bne.n	800de06 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ddfe:	210d      	movs	r1, #13
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f7ff fff3 	bl	800ddec <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	db25      	blt.n	800de5e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	1c5a      	adds	r2, r3, #1
 800de16:	60fa      	str	r2, [r7, #12]
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	4413      	add	r3, r2
 800de1c:	78fa      	ldrb	r2, [r7, #3]
 800de1e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2b3c      	cmp	r3, #60	; 0x3c
 800de24:	dd12      	ble.n	800de4c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6818      	ldr	r0, [r3, #0]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f103 010c 	add.w	r1, r3, #12
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	f107 0308 	add.w	r3, r7, #8
 800de36:	f7ff f929 	bl	800d08c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800de3a:	68ba      	ldr	r2, [r7, #8]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d101      	bne.n	800de46 <putc_bfd+0x5a>
 800de42:	2300      	movs	r3, #0
 800de44:	e001      	b.n	800de4a <putc_bfd+0x5e>
 800de46:	f04f 33ff 	mov.w	r3, #4294967295
 800de4a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	689b      	ldr	r3, [r3, #8]
 800de56:	1c5a      	adds	r2, r3, #1
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	609a      	str	r2, [r3, #8]
 800de5c:	e000      	b.n	800de60 <putc_bfd+0x74>
	if (i < 0) return;
 800de5e:	bf00      	nop
}
 800de60:	3710      	adds	r7, #16
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800de66:	b590      	push	{r4, r7, lr}
 800de68:	b097      	sub	sp, #92	; 0x5c
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
 800de6e:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800de74:	2300      	movs	r3, #0
 800de76:	613b      	str	r3, [r7, #16]
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800de7c:	e009      	b.n	800de92 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	1c5a      	adds	r2, r3, #1
 800de82:	607a      	str	r2, [r7, #4]
 800de84:	781a      	ldrb	r2, [r3, #0]
 800de86:	f107 030c 	add.w	r3, r7, #12
 800de8a:	4611      	mov	r1, r2
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7ff ffad 	bl	800ddec <putc_bfd>
	while (*str)			/* Put the string */
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d1f1      	bne.n	800de7e <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	db16      	blt.n	800dece <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	461c      	mov	r4, r3
 800dea6:	f107 0208 	add.w	r2, r7, #8
 800deaa:	f107 030c 	add.w	r3, r7, #12
 800deae:	f103 010c 	add.w	r1, r3, #12
 800deb2:	4613      	mov	r3, r2
 800deb4:	4622      	mov	r2, r4
 800deb6:	f7ff f8e9 	bl	800d08c <f_write>
 800deba:	4603      	mov	r3, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d106      	bne.n	800dece <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	461a      	mov	r2, r3
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d101      	bne.n	800dece <f_puts+0x68>
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	e001      	b.n	800ded2 <f_puts+0x6c>
	return EOF;
 800dece:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	375c      	adds	r7, #92	; 0x5c
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd90      	pop	{r4, r7, pc}
	...

0800dedc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dedc:	b480      	push	{r7}
 800dede:	b087      	sub	sp, #28
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	4613      	mov	r3, r2
 800dee8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800deea:	2301      	movs	r3, #1
 800deec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800deee:	2300      	movs	r3, #0
 800def0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800def2:	4b1f      	ldr	r3, [pc, #124]	; (800df70 <FATFS_LinkDriverEx+0x94>)
 800def4:	7a5b      	ldrb	r3, [r3, #9]
 800def6:	b2db      	uxtb	r3, r3
 800def8:	2b01      	cmp	r3, #1
 800defa:	d831      	bhi.n	800df60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800defc:	4b1c      	ldr	r3, [pc, #112]	; (800df70 <FATFS_LinkDriverEx+0x94>)
 800defe:	7a5b      	ldrb	r3, [r3, #9]
 800df00:	b2db      	uxtb	r3, r3
 800df02:	461a      	mov	r2, r3
 800df04:	4b1a      	ldr	r3, [pc, #104]	; (800df70 <FATFS_LinkDriverEx+0x94>)
 800df06:	2100      	movs	r1, #0
 800df08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800df0a:	4b19      	ldr	r3, [pc, #100]	; (800df70 <FATFS_LinkDriverEx+0x94>)
 800df0c:	7a5b      	ldrb	r3, [r3, #9]
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	4a17      	ldr	r2, [pc, #92]	; (800df70 <FATFS_LinkDriverEx+0x94>)
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	4413      	add	r3, r2
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800df1a:	4b15      	ldr	r3, [pc, #84]	; (800df70 <FATFS_LinkDriverEx+0x94>)
 800df1c:	7a5b      	ldrb	r3, [r3, #9]
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	461a      	mov	r2, r3
 800df22:	4b13      	ldr	r3, [pc, #76]	; (800df70 <FATFS_LinkDriverEx+0x94>)
 800df24:	4413      	add	r3, r2
 800df26:	79fa      	ldrb	r2, [r7, #7]
 800df28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df2a:	4b11      	ldr	r3, [pc, #68]	; (800df70 <FATFS_LinkDriverEx+0x94>)
 800df2c:	7a5b      	ldrb	r3, [r3, #9]
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	1c5a      	adds	r2, r3, #1
 800df32:	b2d1      	uxtb	r1, r2
 800df34:	4a0e      	ldr	r2, [pc, #56]	; (800df70 <FATFS_LinkDriverEx+0x94>)
 800df36:	7251      	strb	r1, [r2, #9]
 800df38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df3a:	7dbb      	ldrb	r3, [r7, #22]
 800df3c:	3330      	adds	r3, #48	; 0x30
 800df3e:	b2da      	uxtb	r2, r3
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	3301      	adds	r3, #1
 800df48:	223a      	movs	r2, #58	; 0x3a
 800df4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	3302      	adds	r3, #2
 800df50:	222f      	movs	r2, #47	; 0x2f
 800df52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	3303      	adds	r3, #3
 800df58:	2200      	movs	r2, #0
 800df5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800df5c:	2300      	movs	r3, #0
 800df5e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800df60:	7dfb      	ldrb	r3, [r7, #23]
}
 800df62:	4618      	mov	r0, r3
 800df64:	371c      	adds	r7, #28
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	2000045c 	.word	0x2000045c

0800df74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800df7e:	2200      	movs	r2, #0
 800df80:	6839      	ldr	r1, [r7, #0]
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7ff ffaa 	bl	800dedc <FATFS_LinkDriverEx>
 800df88:	4603      	mov	r3, r0
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3708      	adds	r7, #8
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	4603      	mov	r3, r0
 800df9c:	6039      	str	r1, [r7, #0]
 800df9e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dfa0:	88fb      	ldrh	r3, [r7, #6]
 800dfa2:	2b7f      	cmp	r3, #127	; 0x7f
 800dfa4:	d802      	bhi.n	800dfac <ff_convert+0x18>
		c = chr;
 800dfa6:	88fb      	ldrh	r3, [r7, #6]
 800dfa8:	81fb      	strh	r3, [r7, #14]
 800dfaa:	e025      	b.n	800dff8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d00b      	beq.n	800dfca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dfb2:	88fb      	ldrh	r3, [r7, #6]
 800dfb4:	2bff      	cmp	r3, #255	; 0xff
 800dfb6:	d805      	bhi.n	800dfc4 <ff_convert+0x30>
 800dfb8:	88fb      	ldrh	r3, [r7, #6]
 800dfba:	3b80      	subs	r3, #128	; 0x80
 800dfbc:	4a12      	ldr	r2, [pc, #72]	; (800e008 <ff_convert+0x74>)
 800dfbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfc2:	e000      	b.n	800dfc6 <ff_convert+0x32>
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	81fb      	strh	r3, [r7, #14]
 800dfc8:	e016      	b.n	800dff8 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800dfca:	2300      	movs	r3, #0
 800dfcc:	81fb      	strh	r3, [r7, #14]
 800dfce:	e009      	b.n	800dfe4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800dfd0:	89fb      	ldrh	r3, [r7, #14]
 800dfd2:	4a0d      	ldr	r2, [pc, #52]	; (800e008 <ff_convert+0x74>)
 800dfd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfd8:	88fa      	ldrh	r2, [r7, #6]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d006      	beq.n	800dfec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800dfde:	89fb      	ldrh	r3, [r7, #14]
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	81fb      	strh	r3, [r7, #14]
 800dfe4:	89fb      	ldrh	r3, [r7, #14]
 800dfe6:	2b7f      	cmp	r3, #127	; 0x7f
 800dfe8:	d9f2      	bls.n	800dfd0 <ff_convert+0x3c>
 800dfea:	e000      	b.n	800dfee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800dfec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800dfee:	89fb      	ldrh	r3, [r7, #14]
 800dff0:	3380      	adds	r3, #128	; 0x80
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800dff8:	89fb      	ldrh	r3, [r7, #14]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3714      	adds	r7, #20
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr
 800e006:	bf00      	nop
 800e008:	0801032c 	.word	0x0801032c

0800e00c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	4603      	mov	r3, r0
 800e014:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800e016:	2300      	movs	r3, #0
 800e018:	60fb      	str	r3, [r7, #12]
 800e01a:	e002      	b.n	800e022 <ff_wtoupper+0x16>
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	3301      	adds	r3, #1
 800e020:	60fb      	str	r3, [r7, #12]
 800e022:	4a0f      	ldr	r2, [pc, #60]	; (800e060 <ff_wtoupper+0x54>)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d006      	beq.n	800e03c <ff_wtoupper+0x30>
 800e02e:	4a0c      	ldr	r2, [pc, #48]	; (800e060 <ff_wtoupper+0x54>)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e036:	88fa      	ldrh	r2, [r7, #6]
 800e038:	429a      	cmp	r2, r3
 800e03a:	d1ef      	bne.n	800e01c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800e03c:	4a08      	ldr	r2, [pc, #32]	; (800e060 <ff_wtoupper+0x54>)
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d004      	beq.n	800e052 <ff_wtoupper+0x46>
 800e048:	4a06      	ldr	r2, [pc, #24]	; (800e064 <ff_wtoupper+0x58>)
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e050:	e000      	b.n	800e054 <ff_wtoupper+0x48>
 800e052:	88fb      	ldrh	r3, [r7, #6]
}
 800e054:	4618      	mov	r0, r3
 800e056:	3714      	adds	r7, #20
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr
 800e060:	0801042c 	.word	0x0801042c
 800e064:	0801060c 	.word	0x0801060c

0800e068 <__libc_init_array>:
 800e068:	b570      	push	{r4, r5, r6, lr}
 800e06a:	4e0d      	ldr	r6, [pc, #52]	; (800e0a0 <__libc_init_array+0x38>)
 800e06c:	4c0d      	ldr	r4, [pc, #52]	; (800e0a4 <__libc_init_array+0x3c>)
 800e06e:	1ba4      	subs	r4, r4, r6
 800e070:	10a4      	asrs	r4, r4, #2
 800e072:	2500      	movs	r5, #0
 800e074:	42a5      	cmp	r5, r4
 800e076:	d109      	bne.n	800e08c <__libc_init_array+0x24>
 800e078:	4e0b      	ldr	r6, [pc, #44]	; (800e0a8 <__libc_init_array+0x40>)
 800e07a:	4c0c      	ldr	r4, [pc, #48]	; (800e0ac <__libc_init_array+0x44>)
 800e07c:	f002 f86a 	bl	8010154 <_init>
 800e080:	1ba4      	subs	r4, r4, r6
 800e082:	10a4      	asrs	r4, r4, #2
 800e084:	2500      	movs	r5, #0
 800e086:	42a5      	cmp	r5, r4
 800e088:	d105      	bne.n	800e096 <__libc_init_array+0x2e>
 800e08a:	bd70      	pop	{r4, r5, r6, pc}
 800e08c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e090:	4798      	blx	r3
 800e092:	3501      	adds	r5, #1
 800e094:	e7ee      	b.n	800e074 <__libc_init_array+0xc>
 800e096:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e09a:	4798      	blx	r3
 800e09c:	3501      	adds	r5, #1
 800e09e:	e7f2      	b.n	800e086 <__libc_init_array+0x1e>
 800e0a0:	08010a48 	.word	0x08010a48
 800e0a4:	08010a48 	.word	0x08010a48
 800e0a8:	08010a48 	.word	0x08010a48
 800e0ac:	08010a4c 	.word	0x08010a4c

0800e0b0 <memset>:
 800e0b0:	4402      	add	r2, r0
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d100      	bne.n	800e0ba <memset+0xa>
 800e0b8:	4770      	bx	lr
 800e0ba:	f803 1b01 	strb.w	r1, [r3], #1
 800e0be:	e7f9      	b.n	800e0b4 <memset+0x4>

0800e0c0 <__cvt>:
 800e0c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0c4:	ec55 4b10 	vmov	r4, r5, d0
 800e0c8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e0ca:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e0ce:	2d00      	cmp	r5, #0
 800e0d0:	460e      	mov	r6, r1
 800e0d2:	4691      	mov	r9, r2
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	bfb8      	it	lt
 800e0d8:	4622      	movlt	r2, r4
 800e0da:	462b      	mov	r3, r5
 800e0dc:	f027 0720 	bic.w	r7, r7, #32
 800e0e0:	bfbb      	ittet	lt
 800e0e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e0e6:	461d      	movlt	r5, r3
 800e0e8:	2300      	movge	r3, #0
 800e0ea:	232d      	movlt	r3, #45	; 0x2d
 800e0ec:	bfb8      	it	lt
 800e0ee:	4614      	movlt	r4, r2
 800e0f0:	2f46      	cmp	r7, #70	; 0x46
 800e0f2:	700b      	strb	r3, [r1, #0]
 800e0f4:	d004      	beq.n	800e100 <__cvt+0x40>
 800e0f6:	2f45      	cmp	r7, #69	; 0x45
 800e0f8:	d100      	bne.n	800e0fc <__cvt+0x3c>
 800e0fa:	3601      	adds	r6, #1
 800e0fc:	2102      	movs	r1, #2
 800e0fe:	e000      	b.n	800e102 <__cvt+0x42>
 800e100:	2103      	movs	r1, #3
 800e102:	ab03      	add	r3, sp, #12
 800e104:	9301      	str	r3, [sp, #4]
 800e106:	ab02      	add	r3, sp, #8
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	4632      	mov	r2, r6
 800e10c:	4653      	mov	r3, sl
 800e10e:	ec45 4b10 	vmov	d0, r4, r5
 800e112:	f000 fcdd 	bl	800ead0 <_dtoa_r>
 800e116:	2f47      	cmp	r7, #71	; 0x47
 800e118:	4680      	mov	r8, r0
 800e11a:	d102      	bne.n	800e122 <__cvt+0x62>
 800e11c:	f019 0f01 	tst.w	r9, #1
 800e120:	d026      	beq.n	800e170 <__cvt+0xb0>
 800e122:	2f46      	cmp	r7, #70	; 0x46
 800e124:	eb08 0906 	add.w	r9, r8, r6
 800e128:	d111      	bne.n	800e14e <__cvt+0x8e>
 800e12a:	f898 3000 	ldrb.w	r3, [r8]
 800e12e:	2b30      	cmp	r3, #48	; 0x30
 800e130:	d10a      	bne.n	800e148 <__cvt+0x88>
 800e132:	2200      	movs	r2, #0
 800e134:	2300      	movs	r3, #0
 800e136:	4620      	mov	r0, r4
 800e138:	4629      	mov	r1, r5
 800e13a:	f7f2 fccd 	bl	8000ad8 <__aeabi_dcmpeq>
 800e13e:	b918      	cbnz	r0, 800e148 <__cvt+0x88>
 800e140:	f1c6 0601 	rsb	r6, r6, #1
 800e144:	f8ca 6000 	str.w	r6, [sl]
 800e148:	f8da 3000 	ldr.w	r3, [sl]
 800e14c:	4499      	add	r9, r3
 800e14e:	2200      	movs	r2, #0
 800e150:	2300      	movs	r3, #0
 800e152:	4620      	mov	r0, r4
 800e154:	4629      	mov	r1, r5
 800e156:	f7f2 fcbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800e15a:	b938      	cbnz	r0, 800e16c <__cvt+0xac>
 800e15c:	2230      	movs	r2, #48	; 0x30
 800e15e:	9b03      	ldr	r3, [sp, #12]
 800e160:	454b      	cmp	r3, r9
 800e162:	d205      	bcs.n	800e170 <__cvt+0xb0>
 800e164:	1c59      	adds	r1, r3, #1
 800e166:	9103      	str	r1, [sp, #12]
 800e168:	701a      	strb	r2, [r3, #0]
 800e16a:	e7f8      	b.n	800e15e <__cvt+0x9e>
 800e16c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e170:	9b03      	ldr	r3, [sp, #12]
 800e172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e174:	eba3 0308 	sub.w	r3, r3, r8
 800e178:	4640      	mov	r0, r8
 800e17a:	6013      	str	r3, [r2, #0]
 800e17c:	b004      	add	sp, #16
 800e17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e182 <__exponent>:
 800e182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e184:	2900      	cmp	r1, #0
 800e186:	4604      	mov	r4, r0
 800e188:	bfba      	itte	lt
 800e18a:	4249      	neglt	r1, r1
 800e18c:	232d      	movlt	r3, #45	; 0x2d
 800e18e:	232b      	movge	r3, #43	; 0x2b
 800e190:	2909      	cmp	r1, #9
 800e192:	f804 2b02 	strb.w	r2, [r4], #2
 800e196:	7043      	strb	r3, [r0, #1]
 800e198:	dd20      	ble.n	800e1dc <__exponent+0x5a>
 800e19a:	f10d 0307 	add.w	r3, sp, #7
 800e19e:	461f      	mov	r7, r3
 800e1a0:	260a      	movs	r6, #10
 800e1a2:	fb91 f5f6 	sdiv	r5, r1, r6
 800e1a6:	fb06 1115 	mls	r1, r6, r5, r1
 800e1aa:	3130      	adds	r1, #48	; 0x30
 800e1ac:	2d09      	cmp	r5, #9
 800e1ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e1b2:	f103 32ff 	add.w	r2, r3, #4294967295
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	dc09      	bgt.n	800e1ce <__exponent+0x4c>
 800e1ba:	3130      	adds	r1, #48	; 0x30
 800e1bc:	3b02      	subs	r3, #2
 800e1be:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e1c2:	42bb      	cmp	r3, r7
 800e1c4:	4622      	mov	r2, r4
 800e1c6:	d304      	bcc.n	800e1d2 <__exponent+0x50>
 800e1c8:	1a10      	subs	r0, r2, r0
 800e1ca:	b003      	add	sp, #12
 800e1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ce:	4613      	mov	r3, r2
 800e1d0:	e7e7      	b.n	800e1a2 <__exponent+0x20>
 800e1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1d6:	f804 2b01 	strb.w	r2, [r4], #1
 800e1da:	e7f2      	b.n	800e1c2 <__exponent+0x40>
 800e1dc:	2330      	movs	r3, #48	; 0x30
 800e1de:	4419      	add	r1, r3
 800e1e0:	7083      	strb	r3, [r0, #2]
 800e1e2:	1d02      	adds	r2, r0, #4
 800e1e4:	70c1      	strb	r1, [r0, #3]
 800e1e6:	e7ef      	b.n	800e1c8 <__exponent+0x46>

0800e1e8 <_printf_float>:
 800e1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ec:	b08d      	sub	sp, #52	; 0x34
 800e1ee:	460c      	mov	r4, r1
 800e1f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e1f4:	4616      	mov	r6, r2
 800e1f6:	461f      	mov	r7, r3
 800e1f8:	4605      	mov	r5, r0
 800e1fa:	f001 fa21 	bl	800f640 <_localeconv_r>
 800e1fe:	6803      	ldr	r3, [r0, #0]
 800e200:	9304      	str	r3, [sp, #16]
 800e202:	4618      	mov	r0, r3
 800e204:	f7f1 ffec 	bl	80001e0 <strlen>
 800e208:	2300      	movs	r3, #0
 800e20a:	930a      	str	r3, [sp, #40]	; 0x28
 800e20c:	f8d8 3000 	ldr.w	r3, [r8]
 800e210:	9005      	str	r0, [sp, #20]
 800e212:	3307      	adds	r3, #7
 800e214:	f023 0307 	bic.w	r3, r3, #7
 800e218:	f103 0208 	add.w	r2, r3, #8
 800e21c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e220:	f8d4 b000 	ldr.w	fp, [r4]
 800e224:	f8c8 2000 	str.w	r2, [r8]
 800e228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e230:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e234:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e238:	9307      	str	r3, [sp, #28]
 800e23a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e23e:	f04f 32ff 	mov.w	r2, #4294967295
 800e242:	4ba7      	ldr	r3, [pc, #668]	; (800e4e0 <_printf_float+0x2f8>)
 800e244:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e248:	f7f2 fc78 	bl	8000b3c <__aeabi_dcmpun>
 800e24c:	bb70      	cbnz	r0, 800e2ac <_printf_float+0xc4>
 800e24e:	f04f 32ff 	mov.w	r2, #4294967295
 800e252:	4ba3      	ldr	r3, [pc, #652]	; (800e4e0 <_printf_float+0x2f8>)
 800e254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e258:	f7f2 fc52 	bl	8000b00 <__aeabi_dcmple>
 800e25c:	bb30      	cbnz	r0, 800e2ac <_printf_float+0xc4>
 800e25e:	2200      	movs	r2, #0
 800e260:	2300      	movs	r3, #0
 800e262:	4640      	mov	r0, r8
 800e264:	4649      	mov	r1, r9
 800e266:	f7f2 fc41 	bl	8000aec <__aeabi_dcmplt>
 800e26a:	b110      	cbz	r0, 800e272 <_printf_float+0x8a>
 800e26c:	232d      	movs	r3, #45	; 0x2d
 800e26e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e272:	4a9c      	ldr	r2, [pc, #624]	; (800e4e4 <_printf_float+0x2fc>)
 800e274:	4b9c      	ldr	r3, [pc, #624]	; (800e4e8 <_printf_float+0x300>)
 800e276:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e27a:	bf8c      	ite	hi
 800e27c:	4690      	movhi	r8, r2
 800e27e:	4698      	movls	r8, r3
 800e280:	2303      	movs	r3, #3
 800e282:	f02b 0204 	bic.w	r2, fp, #4
 800e286:	6123      	str	r3, [r4, #16]
 800e288:	6022      	str	r2, [r4, #0]
 800e28a:	f04f 0900 	mov.w	r9, #0
 800e28e:	9700      	str	r7, [sp, #0]
 800e290:	4633      	mov	r3, r6
 800e292:	aa0b      	add	r2, sp, #44	; 0x2c
 800e294:	4621      	mov	r1, r4
 800e296:	4628      	mov	r0, r5
 800e298:	f000 f9e6 	bl	800e668 <_printf_common>
 800e29c:	3001      	adds	r0, #1
 800e29e:	f040 808d 	bne.w	800e3bc <_printf_float+0x1d4>
 800e2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a6:	b00d      	add	sp, #52	; 0x34
 800e2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ac:	4642      	mov	r2, r8
 800e2ae:	464b      	mov	r3, r9
 800e2b0:	4640      	mov	r0, r8
 800e2b2:	4649      	mov	r1, r9
 800e2b4:	f7f2 fc42 	bl	8000b3c <__aeabi_dcmpun>
 800e2b8:	b110      	cbz	r0, 800e2c0 <_printf_float+0xd8>
 800e2ba:	4a8c      	ldr	r2, [pc, #560]	; (800e4ec <_printf_float+0x304>)
 800e2bc:	4b8c      	ldr	r3, [pc, #560]	; (800e4f0 <_printf_float+0x308>)
 800e2be:	e7da      	b.n	800e276 <_printf_float+0x8e>
 800e2c0:	6861      	ldr	r1, [r4, #4]
 800e2c2:	1c4b      	adds	r3, r1, #1
 800e2c4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e2c8:	a80a      	add	r0, sp, #40	; 0x28
 800e2ca:	d13e      	bne.n	800e34a <_printf_float+0x162>
 800e2cc:	2306      	movs	r3, #6
 800e2ce:	6063      	str	r3, [r4, #4]
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e2d6:	ab09      	add	r3, sp, #36	; 0x24
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	ec49 8b10 	vmov	d0, r8, r9
 800e2de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e2e2:	6022      	str	r2, [r4, #0]
 800e2e4:	f8cd a004 	str.w	sl, [sp, #4]
 800e2e8:	6861      	ldr	r1, [r4, #4]
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	f7ff fee8 	bl	800e0c0 <__cvt>
 800e2f0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e2f4:	2b47      	cmp	r3, #71	; 0x47
 800e2f6:	4680      	mov	r8, r0
 800e2f8:	d109      	bne.n	800e30e <_printf_float+0x126>
 800e2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2fc:	1cd8      	adds	r0, r3, #3
 800e2fe:	db02      	blt.n	800e306 <_printf_float+0x11e>
 800e300:	6862      	ldr	r2, [r4, #4]
 800e302:	4293      	cmp	r3, r2
 800e304:	dd47      	ble.n	800e396 <_printf_float+0x1ae>
 800e306:	f1aa 0a02 	sub.w	sl, sl, #2
 800e30a:	fa5f fa8a 	uxtb.w	sl, sl
 800e30e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e312:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e314:	d824      	bhi.n	800e360 <_printf_float+0x178>
 800e316:	3901      	subs	r1, #1
 800e318:	4652      	mov	r2, sl
 800e31a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e31e:	9109      	str	r1, [sp, #36]	; 0x24
 800e320:	f7ff ff2f 	bl	800e182 <__exponent>
 800e324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e326:	1813      	adds	r3, r2, r0
 800e328:	2a01      	cmp	r2, #1
 800e32a:	4681      	mov	r9, r0
 800e32c:	6123      	str	r3, [r4, #16]
 800e32e:	dc02      	bgt.n	800e336 <_printf_float+0x14e>
 800e330:	6822      	ldr	r2, [r4, #0]
 800e332:	07d1      	lsls	r1, r2, #31
 800e334:	d501      	bpl.n	800e33a <_printf_float+0x152>
 800e336:	3301      	adds	r3, #1
 800e338:	6123      	str	r3, [r4, #16]
 800e33a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d0a5      	beq.n	800e28e <_printf_float+0xa6>
 800e342:	232d      	movs	r3, #45	; 0x2d
 800e344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e348:	e7a1      	b.n	800e28e <_printf_float+0xa6>
 800e34a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e34e:	f000 8177 	beq.w	800e640 <_printf_float+0x458>
 800e352:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e356:	d1bb      	bne.n	800e2d0 <_printf_float+0xe8>
 800e358:	2900      	cmp	r1, #0
 800e35a:	d1b9      	bne.n	800e2d0 <_printf_float+0xe8>
 800e35c:	2301      	movs	r3, #1
 800e35e:	e7b6      	b.n	800e2ce <_printf_float+0xe6>
 800e360:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e364:	d119      	bne.n	800e39a <_printf_float+0x1b2>
 800e366:	2900      	cmp	r1, #0
 800e368:	6863      	ldr	r3, [r4, #4]
 800e36a:	dd0c      	ble.n	800e386 <_printf_float+0x19e>
 800e36c:	6121      	str	r1, [r4, #16]
 800e36e:	b913      	cbnz	r3, 800e376 <_printf_float+0x18e>
 800e370:	6822      	ldr	r2, [r4, #0]
 800e372:	07d2      	lsls	r2, r2, #31
 800e374:	d502      	bpl.n	800e37c <_printf_float+0x194>
 800e376:	3301      	adds	r3, #1
 800e378:	440b      	add	r3, r1
 800e37a:	6123      	str	r3, [r4, #16]
 800e37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e37e:	65a3      	str	r3, [r4, #88]	; 0x58
 800e380:	f04f 0900 	mov.w	r9, #0
 800e384:	e7d9      	b.n	800e33a <_printf_float+0x152>
 800e386:	b913      	cbnz	r3, 800e38e <_printf_float+0x1a6>
 800e388:	6822      	ldr	r2, [r4, #0]
 800e38a:	07d0      	lsls	r0, r2, #31
 800e38c:	d501      	bpl.n	800e392 <_printf_float+0x1aa>
 800e38e:	3302      	adds	r3, #2
 800e390:	e7f3      	b.n	800e37a <_printf_float+0x192>
 800e392:	2301      	movs	r3, #1
 800e394:	e7f1      	b.n	800e37a <_printf_float+0x192>
 800e396:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e39a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	db05      	blt.n	800e3ae <_printf_float+0x1c6>
 800e3a2:	6822      	ldr	r2, [r4, #0]
 800e3a4:	6123      	str	r3, [r4, #16]
 800e3a6:	07d1      	lsls	r1, r2, #31
 800e3a8:	d5e8      	bpl.n	800e37c <_printf_float+0x194>
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	e7e5      	b.n	800e37a <_printf_float+0x192>
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	bfd4      	ite	le
 800e3b2:	f1c3 0302 	rsble	r3, r3, #2
 800e3b6:	2301      	movgt	r3, #1
 800e3b8:	4413      	add	r3, r2
 800e3ba:	e7de      	b.n	800e37a <_printf_float+0x192>
 800e3bc:	6823      	ldr	r3, [r4, #0]
 800e3be:	055a      	lsls	r2, r3, #21
 800e3c0:	d407      	bmi.n	800e3d2 <_printf_float+0x1ea>
 800e3c2:	6923      	ldr	r3, [r4, #16]
 800e3c4:	4642      	mov	r2, r8
 800e3c6:	4631      	mov	r1, r6
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	47b8      	blx	r7
 800e3cc:	3001      	adds	r0, #1
 800e3ce:	d12b      	bne.n	800e428 <_printf_float+0x240>
 800e3d0:	e767      	b.n	800e2a2 <_printf_float+0xba>
 800e3d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e3d6:	f240 80dc 	bls.w	800e592 <_printf_float+0x3aa>
 800e3da:	2200      	movs	r2, #0
 800e3dc:	2300      	movs	r3, #0
 800e3de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3e2:	f7f2 fb79 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d033      	beq.n	800e452 <_printf_float+0x26a>
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	4a41      	ldr	r2, [pc, #260]	; (800e4f4 <_printf_float+0x30c>)
 800e3ee:	4631      	mov	r1, r6
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	47b8      	blx	r7
 800e3f4:	3001      	adds	r0, #1
 800e3f6:	f43f af54 	beq.w	800e2a2 <_printf_float+0xba>
 800e3fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e3fe:	429a      	cmp	r2, r3
 800e400:	db02      	blt.n	800e408 <_printf_float+0x220>
 800e402:	6823      	ldr	r3, [r4, #0]
 800e404:	07d8      	lsls	r0, r3, #31
 800e406:	d50f      	bpl.n	800e428 <_printf_float+0x240>
 800e408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e40c:	4631      	mov	r1, r6
 800e40e:	4628      	mov	r0, r5
 800e410:	47b8      	blx	r7
 800e412:	3001      	adds	r0, #1
 800e414:	f43f af45 	beq.w	800e2a2 <_printf_float+0xba>
 800e418:	f04f 0800 	mov.w	r8, #0
 800e41c:	f104 091a 	add.w	r9, r4, #26
 800e420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e422:	3b01      	subs	r3, #1
 800e424:	4543      	cmp	r3, r8
 800e426:	dc09      	bgt.n	800e43c <_printf_float+0x254>
 800e428:	6823      	ldr	r3, [r4, #0]
 800e42a:	079b      	lsls	r3, r3, #30
 800e42c:	f100 8103 	bmi.w	800e636 <_printf_float+0x44e>
 800e430:	68e0      	ldr	r0, [r4, #12]
 800e432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e434:	4298      	cmp	r0, r3
 800e436:	bfb8      	it	lt
 800e438:	4618      	movlt	r0, r3
 800e43a:	e734      	b.n	800e2a6 <_printf_float+0xbe>
 800e43c:	2301      	movs	r3, #1
 800e43e:	464a      	mov	r2, r9
 800e440:	4631      	mov	r1, r6
 800e442:	4628      	mov	r0, r5
 800e444:	47b8      	blx	r7
 800e446:	3001      	adds	r0, #1
 800e448:	f43f af2b 	beq.w	800e2a2 <_printf_float+0xba>
 800e44c:	f108 0801 	add.w	r8, r8, #1
 800e450:	e7e6      	b.n	800e420 <_printf_float+0x238>
 800e452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e454:	2b00      	cmp	r3, #0
 800e456:	dc2b      	bgt.n	800e4b0 <_printf_float+0x2c8>
 800e458:	2301      	movs	r3, #1
 800e45a:	4a26      	ldr	r2, [pc, #152]	; (800e4f4 <_printf_float+0x30c>)
 800e45c:	4631      	mov	r1, r6
 800e45e:	4628      	mov	r0, r5
 800e460:	47b8      	blx	r7
 800e462:	3001      	adds	r0, #1
 800e464:	f43f af1d 	beq.w	800e2a2 <_printf_float+0xba>
 800e468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e46a:	b923      	cbnz	r3, 800e476 <_printf_float+0x28e>
 800e46c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e46e:	b913      	cbnz	r3, 800e476 <_printf_float+0x28e>
 800e470:	6823      	ldr	r3, [r4, #0]
 800e472:	07d9      	lsls	r1, r3, #31
 800e474:	d5d8      	bpl.n	800e428 <_printf_float+0x240>
 800e476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e47a:	4631      	mov	r1, r6
 800e47c:	4628      	mov	r0, r5
 800e47e:	47b8      	blx	r7
 800e480:	3001      	adds	r0, #1
 800e482:	f43f af0e 	beq.w	800e2a2 <_printf_float+0xba>
 800e486:	f04f 0900 	mov.w	r9, #0
 800e48a:	f104 0a1a 	add.w	sl, r4, #26
 800e48e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e490:	425b      	negs	r3, r3
 800e492:	454b      	cmp	r3, r9
 800e494:	dc01      	bgt.n	800e49a <_printf_float+0x2b2>
 800e496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e498:	e794      	b.n	800e3c4 <_printf_float+0x1dc>
 800e49a:	2301      	movs	r3, #1
 800e49c:	4652      	mov	r2, sl
 800e49e:	4631      	mov	r1, r6
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	47b8      	blx	r7
 800e4a4:	3001      	adds	r0, #1
 800e4a6:	f43f aefc 	beq.w	800e2a2 <_printf_float+0xba>
 800e4aa:	f109 0901 	add.w	r9, r9, #1
 800e4ae:	e7ee      	b.n	800e48e <_printf_float+0x2a6>
 800e4b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	bfa8      	it	ge
 800e4b8:	461a      	movge	r2, r3
 800e4ba:	2a00      	cmp	r2, #0
 800e4bc:	4691      	mov	r9, r2
 800e4be:	dd07      	ble.n	800e4d0 <_printf_float+0x2e8>
 800e4c0:	4613      	mov	r3, r2
 800e4c2:	4631      	mov	r1, r6
 800e4c4:	4642      	mov	r2, r8
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	47b8      	blx	r7
 800e4ca:	3001      	adds	r0, #1
 800e4cc:	f43f aee9 	beq.w	800e2a2 <_printf_float+0xba>
 800e4d0:	f104 031a 	add.w	r3, r4, #26
 800e4d4:	f04f 0b00 	mov.w	fp, #0
 800e4d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4dc:	9306      	str	r3, [sp, #24]
 800e4de:	e015      	b.n	800e50c <_printf_float+0x324>
 800e4e0:	7fefffff 	.word	0x7fefffff
 800e4e4:	080107f0 	.word	0x080107f0
 800e4e8:	080107ec 	.word	0x080107ec
 800e4ec:	080107f8 	.word	0x080107f8
 800e4f0:	080107f4 	.word	0x080107f4
 800e4f4:	080107fc 	.word	0x080107fc
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	9a06      	ldr	r2, [sp, #24]
 800e4fc:	4631      	mov	r1, r6
 800e4fe:	4628      	mov	r0, r5
 800e500:	47b8      	blx	r7
 800e502:	3001      	adds	r0, #1
 800e504:	f43f aecd 	beq.w	800e2a2 <_printf_float+0xba>
 800e508:	f10b 0b01 	add.w	fp, fp, #1
 800e50c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e510:	ebaa 0309 	sub.w	r3, sl, r9
 800e514:	455b      	cmp	r3, fp
 800e516:	dcef      	bgt.n	800e4f8 <_printf_float+0x310>
 800e518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e51c:	429a      	cmp	r2, r3
 800e51e:	44d0      	add	r8, sl
 800e520:	db15      	blt.n	800e54e <_printf_float+0x366>
 800e522:	6823      	ldr	r3, [r4, #0]
 800e524:	07da      	lsls	r2, r3, #31
 800e526:	d412      	bmi.n	800e54e <_printf_float+0x366>
 800e528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e52a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e52c:	eba3 020a 	sub.w	r2, r3, sl
 800e530:	eba3 0a01 	sub.w	sl, r3, r1
 800e534:	4592      	cmp	sl, r2
 800e536:	bfa8      	it	ge
 800e538:	4692      	movge	sl, r2
 800e53a:	f1ba 0f00 	cmp.w	sl, #0
 800e53e:	dc0e      	bgt.n	800e55e <_printf_float+0x376>
 800e540:	f04f 0800 	mov.w	r8, #0
 800e544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e548:	f104 091a 	add.w	r9, r4, #26
 800e54c:	e019      	b.n	800e582 <_printf_float+0x39a>
 800e54e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e552:	4631      	mov	r1, r6
 800e554:	4628      	mov	r0, r5
 800e556:	47b8      	blx	r7
 800e558:	3001      	adds	r0, #1
 800e55a:	d1e5      	bne.n	800e528 <_printf_float+0x340>
 800e55c:	e6a1      	b.n	800e2a2 <_printf_float+0xba>
 800e55e:	4653      	mov	r3, sl
 800e560:	4642      	mov	r2, r8
 800e562:	4631      	mov	r1, r6
 800e564:	4628      	mov	r0, r5
 800e566:	47b8      	blx	r7
 800e568:	3001      	adds	r0, #1
 800e56a:	d1e9      	bne.n	800e540 <_printf_float+0x358>
 800e56c:	e699      	b.n	800e2a2 <_printf_float+0xba>
 800e56e:	2301      	movs	r3, #1
 800e570:	464a      	mov	r2, r9
 800e572:	4631      	mov	r1, r6
 800e574:	4628      	mov	r0, r5
 800e576:	47b8      	blx	r7
 800e578:	3001      	adds	r0, #1
 800e57a:	f43f ae92 	beq.w	800e2a2 <_printf_float+0xba>
 800e57e:	f108 0801 	add.w	r8, r8, #1
 800e582:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e586:	1a9b      	subs	r3, r3, r2
 800e588:	eba3 030a 	sub.w	r3, r3, sl
 800e58c:	4543      	cmp	r3, r8
 800e58e:	dcee      	bgt.n	800e56e <_printf_float+0x386>
 800e590:	e74a      	b.n	800e428 <_printf_float+0x240>
 800e592:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e594:	2a01      	cmp	r2, #1
 800e596:	dc01      	bgt.n	800e59c <_printf_float+0x3b4>
 800e598:	07db      	lsls	r3, r3, #31
 800e59a:	d53a      	bpl.n	800e612 <_printf_float+0x42a>
 800e59c:	2301      	movs	r3, #1
 800e59e:	4642      	mov	r2, r8
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	47b8      	blx	r7
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	f43f ae7b 	beq.w	800e2a2 <_printf_float+0xba>
 800e5ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5b0:	4631      	mov	r1, r6
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	47b8      	blx	r7
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	f108 0801 	add.w	r8, r8, #1
 800e5bc:	f43f ae71 	beq.w	800e2a2 <_printf_float+0xba>
 800e5c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f103 3aff 	add.w	sl, r3, #4294967295
 800e5c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	f7f2 fa83 	bl	8000ad8 <__aeabi_dcmpeq>
 800e5d2:	b9c8      	cbnz	r0, 800e608 <_printf_float+0x420>
 800e5d4:	4653      	mov	r3, sl
 800e5d6:	4642      	mov	r2, r8
 800e5d8:	4631      	mov	r1, r6
 800e5da:	4628      	mov	r0, r5
 800e5dc:	47b8      	blx	r7
 800e5de:	3001      	adds	r0, #1
 800e5e0:	d10e      	bne.n	800e600 <_printf_float+0x418>
 800e5e2:	e65e      	b.n	800e2a2 <_printf_float+0xba>
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	4652      	mov	r2, sl
 800e5e8:	4631      	mov	r1, r6
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	47b8      	blx	r7
 800e5ee:	3001      	adds	r0, #1
 800e5f0:	f43f ae57 	beq.w	800e2a2 <_printf_float+0xba>
 800e5f4:	f108 0801 	add.w	r8, r8, #1
 800e5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	4543      	cmp	r3, r8
 800e5fe:	dcf1      	bgt.n	800e5e4 <_printf_float+0x3fc>
 800e600:	464b      	mov	r3, r9
 800e602:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e606:	e6de      	b.n	800e3c6 <_printf_float+0x1de>
 800e608:	f04f 0800 	mov.w	r8, #0
 800e60c:	f104 0a1a 	add.w	sl, r4, #26
 800e610:	e7f2      	b.n	800e5f8 <_printf_float+0x410>
 800e612:	2301      	movs	r3, #1
 800e614:	e7df      	b.n	800e5d6 <_printf_float+0x3ee>
 800e616:	2301      	movs	r3, #1
 800e618:	464a      	mov	r2, r9
 800e61a:	4631      	mov	r1, r6
 800e61c:	4628      	mov	r0, r5
 800e61e:	47b8      	blx	r7
 800e620:	3001      	adds	r0, #1
 800e622:	f43f ae3e 	beq.w	800e2a2 <_printf_float+0xba>
 800e626:	f108 0801 	add.w	r8, r8, #1
 800e62a:	68e3      	ldr	r3, [r4, #12]
 800e62c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e62e:	1a9b      	subs	r3, r3, r2
 800e630:	4543      	cmp	r3, r8
 800e632:	dcf0      	bgt.n	800e616 <_printf_float+0x42e>
 800e634:	e6fc      	b.n	800e430 <_printf_float+0x248>
 800e636:	f04f 0800 	mov.w	r8, #0
 800e63a:	f104 0919 	add.w	r9, r4, #25
 800e63e:	e7f4      	b.n	800e62a <_printf_float+0x442>
 800e640:	2900      	cmp	r1, #0
 800e642:	f43f ae8b 	beq.w	800e35c <_printf_float+0x174>
 800e646:	2300      	movs	r3, #0
 800e648:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e64c:	ab09      	add	r3, sp, #36	; 0x24
 800e64e:	9300      	str	r3, [sp, #0]
 800e650:	ec49 8b10 	vmov	d0, r8, r9
 800e654:	6022      	str	r2, [r4, #0]
 800e656:	f8cd a004 	str.w	sl, [sp, #4]
 800e65a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e65e:	4628      	mov	r0, r5
 800e660:	f7ff fd2e 	bl	800e0c0 <__cvt>
 800e664:	4680      	mov	r8, r0
 800e666:	e648      	b.n	800e2fa <_printf_float+0x112>

0800e668 <_printf_common>:
 800e668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e66c:	4691      	mov	r9, r2
 800e66e:	461f      	mov	r7, r3
 800e670:	688a      	ldr	r2, [r1, #8]
 800e672:	690b      	ldr	r3, [r1, #16]
 800e674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e678:	4293      	cmp	r3, r2
 800e67a:	bfb8      	it	lt
 800e67c:	4613      	movlt	r3, r2
 800e67e:	f8c9 3000 	str.w	r3, [r9]
 800e682:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e686:	4606      	mov	r6, r0
 800e688:	460c      	mov	r4, r1
 800e68a:	b112      	cbz	r2, 800e692 <_printf_common+0x2a>
 800e68c:	3301      	adds	r3, #1
 800e68e:	f8c9 3000 	str.w	r3, [r9]
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	0699      	lsls	r1, r3, #26
 800e696:	bf42      	ittt	mi
 800e698:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e69c:	3302      	addmi	r3, #2
 800e69e:	f8c9 3000 	strmi.w	r3, [r9]
 800e6a2:	6825      	ldr	r5, [r4, #0]
 800e6a4:	f015 0506 	ands.w	r5, r5, #6
 800e6a8:	d107      	bne.n	800e6ba <_printf_common+0x52>
 800e6aa:	f104 0a19 	add.w	sl, r4, #25
 800e6ae:	68e3      	ldr	r3, [r4, #12]
 800e6b0:	f8d9 2000 	ldr.w	r2, [r9]
 800e6b4:	1a9b      	subs	r3, r3, r2
 800e6b6:	42ab      	cmp	r3, r5
 800e6b8:	dc28      	bgt.n	800e70c <_printf_common+0xa4>
 800e6ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e6be:	6822      	ldr	r2, [r4, #0]
 800e6c0:	3300      	adds	r3, #0
 800e6c2:	bf18      	it	ne
 800e6c4:	2301      	movne	r3, #1
 800e6c6:	0692      	lsls	r2, r2, #26
 800e6c8:	d42d      	bmi.n	800e726 <_printf_common+0xbe>
 800e6ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e6ce:	4639      	mov	r1, r7
 800e6d0:	4630      	mov	r0, r6
 800e6d2:	47c0      	blx	r8
 800e6d4:	3001      	adds	r0, #1
 800e6d6:	d020      	beq.n	800e71a <_printf_common+0xb2>
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	68e5      	ldr	r5, [r4, #12]
 800e6dc:	f8d9 2000 	ldr.w	r2, [r9]
 800e6e0:	f003 0306 	and.w	r3, r3, #6
 800e6e4:	2b04      	cmp	r3, #4
 800e6e6:	bf08      	it	eq
 800e6e8:	1aad      	subeq	r5, r5, r2
 800e6ea:	68a3      	ldr	r3, [r4, #8]
 800e6ec:	6922      	ldr	r2, [r4, #16]
 800e6ee:	bf0c      	ite	eq
 800e6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6f4:	2500      	movne	r5, #0
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	bfc4      	itt	gt
 800e6fa:	1a9b      	subgt	r3, r3, r2
 800e6fc:	18ed      	addgt	r5, r5, r3
 800e6fe:	f04f 0900 	mov.w	r9, #0
 800e702:	341a      	adds	r4, #26
 800e704:	454d      	cmp	r5, r9
 800e706:	d11a      	bne.n	800e73e <_printf_common+0xd6>
 800e708:	2000      	movs	r0, #0
 800e70a:	e008      	b.n	800e71e <_printf_common+0xb6>
 800e70c:	2301      	movs	r3, #1
 800e70e:	4652      	mov	r2, sl
 800e710:	4639      	mov	r1, r7
 800e712:	4630      	mov	r0, r6
 800e714:	47c0      	blx	r8
 800e716:	3001      	adds	r0, #1
 800e718:	d103      	bne.n	800e722 <_printf_common+0xba>
 800e71a:	f04f 30ff 	mov.w	r0, #4294967295
 800e71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e722:	3501      	adds	r5, #1
 800e724:	e7c3      	b.n	800e6ae <_printf_common+0x46>
 800e726:	18e1      	adds	r1, r4, r3
 800e728:	1c5a      	adds	r2, r3, #1
 800e72a:	2030      	movs	r0, #48	; 0x30
 800e72c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e730:	4422      	add	r2, r4
 800e732:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e736:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e73a:	3302      	adds	r3, #2
 800e73c:	e7c5      	b.n	800e6ca <_printf_common+0x62>
 800e73e:	2301      	movs	r3, #1
 800e740:	4622      	mov	r2, r4
 800e742:	4639      	mov	r1, r7
 800e744:	4630      	mov	r0, r6
 800e746:	47c0      	blx	r8
 800e748:	3001      	adds	r0, #1
 800e74a:	d0e6      	beq.n	800e71a <_printf_common+0xb2>
 800e74c:	f109 0901 	add.w	r9, r9, #1
 800e750:	e7d8      	b.n	800e704 <_printf_common+0x9c>
	...

0800e754 <_printf_i>:
 800e754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e758:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e75c:	460c      	mov	r4, r1
 800e75e:	7e09      	ldrb	r1, [r1, #24]
 800e760:	b085      	sub	sp, #20
 800e762:	296e      	cmp	r1, #110	; 0x6e
 800e764:	4617      	mov	r7, r2
 800e766:	4606      	mov	r6, r0
 800e768:	4698      	mov	r8, r3
 800e76a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e76c:	f000 80b3 	beq.w	800e8d6 <_printf_i+0x182>
 800e770:	d822      	bhi.n	800e7b8 <_printf_i+0x64>
 800e772:	2963      	cmp	r1, #99	; 0x63
 800e774:	d036      	beq.n	800e7e4 <_printf_i+0x90>
 800e776:	d80a      	bhi.n	800e78e <_printf_i+0x3a>
 800e778:	2900      	cmp	r1, #0
 800e77a:	f000 80b9 	beq.w	800e8f0 <_printf_i+0x19c>
 800e77e:	2958      	cmp	r1, #88	; 0x58
 800e780:	f000 8083 	beq.w	800e88a <_printf_i+0x136>
 800e784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e788:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e78c:	e032      	b.n	800e7f4 <_printf_i+0xa0>
 800e78e:	2964      	cmp	r1, #100	; 0x64
 800e790:	d001      	beq.n	800e796 <_printf_i+0x42>
 800e792:	2969      	cmp	r1, #105	; 0x69
 800e794:	d1f6      	bne.n	800e784 <_printf_i+0x30>
 800e796:	6820      	ldr	r0, [r4, #0]
 800e798:	6813      	ldr	r3, [r2, #0]
 800e79a:	0605      	lsls	r5, r0, #24
 800e79c:	f103 0104 	add.w	r1, r3, #4
 800e7a0:	d52a      	bpl.n	800e7f8 <_printf_i+0xa4>
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	6011      	str	r1, [r2, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	da03      	bge.n	800e7b2 <_printf_i+0x5e>
 800e7aa:	222d      	movs	r2, #45	; 0x2d
 800e7ac:	425b      	negs	r3, r3
 800e7ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e7b2:	486f      	ldr	r0, [pc, #444]	; (800e970 <_printf_i+0x21c>)
 800e7b4:	220a      	movs	r2, #10
 800e7b6:	e039      	b.n	800e82c <_printf_i+0xd8>
 800e7b8:	2973      	cmp	r1, #115	; 0x73
 800e7ba:	f000 809d 	beq.w	800e8f8 <_printf_i+0x1a4>
 800e7be:	d808      	bhi.n	800e7d2 <_printf_i+0x7e>
 800e7c0:	296f      	cmp	r1, #111	; 0x6f
 800e7c2:	d020      	beq.n	800e806 <_printf_i+0xb2>
 800e7c4:	2970      	cmp	r1, #112	; 0x70
 800e7c6:	d1dd      	bne.n	800e784 <_printf_i+0x30>
 800e7c8:	6823      	ldr	r3, [r4, #0]
 800e7ca:	f043 0320 	orr.w	r3, r3, #32
 800e7ce:	6023      	str	r3, [r4, #0]
 800e7d0:	e003      	b.n	800e7da <_printf_i+0x86>
 800e7d2:	2975      	cmp	r1, #117	; 0x75
 800e7d4:	d017      	beq.n	800e806 <_printf_i+0xb2>
 800e7d6:	2978      	cmp	r1, #120	; 0x78
 800e7d8:	d1d4      	bne.n	800e784 <_printf_i+0x30>
 800e7da:	2378      	movs	r3, #120	; 0x78
 800e7dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e7e0:	4864      	ldr	r0, [pc, #400]	; (800e974 <_printf_i+0x220>)
 800e7e2:	e055      	b.n	800e890 <_printf_i+0x13c>
 800e7e4:	6813      	ldr	r3, [r2, #0]
 800e7e6:	1d19      	adds	r1, r3, #4
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	6011      	str	r1, [r2, #0]
 800e7ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	e08c      	b.n	800e912 <_printf_i+0x1be>
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	6011      	str	r1, [r2, #0]
 800e7fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e800:	bf18      	it	ne
 800e802:	b21b      	sxthne	r3, r3
 800e804:	e7cf      	b.n	800e7a6 <_printf_i+0x52>
 800e806:	6813      	ldr	r3, [r2, #0]
 800e808:	6825      	ldr	r5, [r4, #0]
 800e80a:	1d18      	adds	r0, r3, #4
 800e80c:	6010      	str	r0, [r2, #0]
 800e80e:	0628      	lsls	r0, r5, #24
 800e810:	d501      	bpl.n	800e816 <_printf_i+0xc2>
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	e002      	b.n	800e81c <_printf_i+0xc8>
 800e816:	0668      	lsls	r0, r5, #25
 800e818:	d5fb      	bpl.n	800e812 <_printf_i+0xbe>
 800e81a:	881b      	ldrh	r3, [r3, #0]
 800e81c:	4854      	ldr	r0, [pc, #336]	; (800e970 <_printf_i+0x21c>)
 800e81e:	296f      	cmp	r1, #111	; 0x6f
 800e820:	bf14      	ite	ne
 800e822:	220a      	movne	r2, #10
 800e824:	2208      	moveq	r2, #8
 800e826:	2100      	movs	r1, #0
 800e828:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e82c:	6865      	ldr	r5, [r4, #4]
 800e82e:	60a5      	str	r5, [r4, #8]
 800e830:	2d00      	cmp	r5, #0
 800e832:	f2c0 8095 	blt.w	800e960 <_printf_i+0x20c>
 800e836:	6821      	ldr	r1, [r4, #0]
 800e838:	f021 0104 	bic.w	r1, r1, #4
 800e83c:	6021      	str	r1, [r4, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d13d      	bne.n	800e8be <_printf_i+0x16a>
 800e842:	2d00      	cmp	r5, #0
 800e844:	f040 808e 	bne.w	800e964 <_printf_i+0x210>
 800e848:	4665      	mov	r5, ip
 800e84a:	2a08      	cmp	r2, #8
 800e84c:	d10b      	bne.n	800e866 <_printf_i+0x112>
 800e84e:	6823      	ldr	r3, [r4, #0]
 800e850:	07db      	lsls	r3, r3, #31
 800e852:	d508      	bpl.n	800e866 <_printf_i+0x112>
 800e854:	6923      	ldr	r3, [r4, #16]
 800e856:	6862      	ldr	r2, [r4, #4]
 800e858:	429a      	cmp	r2, r3
 800e85a:	bfde      	ittt	le
 800e85c:	2330      	movle	r3, #48	; 0x30
 800e85e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e862:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e866:	ebac 0305 	sub.w	r3, ip, r5
 800e86a:	6123      	str	r3, [r4, #16]
 800e86c:	f8cd 8000 	str.w	r8, [sp]
 800e870:	463b      	mov	r3, r7
 800e872:	aa03      	add	r2, sp, #12
 800e874:	4621      	mov	r1, r4
 800e876:	4630      	mov	r0, r6
 800e878:	f7ff fef6 	bl	800e668 <_printf_common>
 800e87c:	3001      	adds	r0, #1
 800e87e:	d14d      	bne.n	800e91c <_printf_i+0x1c8>
 800e880:	f04f 30ff 	mov.w	r0, #4294967295
 800e884:	b005      	add	sp, #20
 800e886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e88a:	4839      	ldr	r0, [pc, #228]	; (800e970 <_printf_i+0x21c>)
 800e88c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e890:	6813      	ldr	r3, [r2, #0]
 800e892:	6821      	ldr	r1, [r4, #0]
 800e894:	1d1d      	adds	r5, r3, #4
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	6015      	str	r5, [r2, #0]
 800e89a:	060a      	lsls	r2, r1, #24
 800e89c:	d50b      	bpl.n	800e8b6 <_printf_i+0x162>
 800e89e:	07ca      	lsls	r2, r1, #31
 800e8a0:	bf44      	itt	mi
 800e8a2:	f041 0120 	orrmi.w	r1, r1, #32
 800e8a6:	6021      	strmi	r1, [r4, #0]
 800e8a8:	b91b      	cbnz	r3, 800e8b2 <_printf_i+0x15e>
 800e8aa:	6822      	ldr	r2, [r4, #0]
 800e8ac:	f022 0220 	bic.w	r2, r2, #32
 800e8b0:	6022      	str	r2, [r4, #0]
 800e8b2:	2210      	movs	r2, #16
 800e8b4:	e7b7      	b.n	800e826 <_printf_i+0xd2>
 800e8b6:	064d      	lsls	r5, r1, #25
 800e8b8:	bf48      	it	mi
 800e8ba:	b29b      	uxthmi	r3, r3
 800e8bc:	e7ef      	b.n	800e89e <_printf_i+0x14a>
 800e8be:	4665      	mov	r5, ip
 800e8c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8c4:	fb02 3311 	mls	r3, r2, r1, r3
 800e8c8:	5cc3      	ldrb	r3, [r0, r3]
 800e8ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	2900      	cmp	r1, #0
 800e8d2:	d1f5      	bne.n	800e8c0 <_printf_i+0x16c>
 800e8d4:	e7b9      	b.n	800e84a <_printf_i+0xf6>
 800e8d6:	6813      	ldr	r3, [r2, #0]
 800e8d8:	6825      	ldr	r5, [r4, #0]
 800e8da:	6961      	ldr	r1, [r4, #20]
 800e8dc:	1d18      	adds	r0, r3, #4
 800e8de:	6010      	str	r0, [r2, #0]
 800e8e0:	0628      	lsls	r0, r5, #24
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	d501      	bpl.n	800e8ea <_printf_i+0x196>
 800e8e6:	6019      	str	r1, [r3, #0]
 800e8e8:	e002      	b.n	800e8f0 <_printf_i+0x19c>
 800e8ea:	066a      	lsls	r2, r5, #25
 800e8ec:	d5fb      	bpl.n	800e8e6 <_printf_i+0x192>
 800e8ee:	8019      	strh	r1, [r3, #0]
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	6123      	str	r3, [r4, #16]
 800e8f4:	4665      	mov	r5, ip
 800e8f6:	e7b9      	b.n	800e86c <_printf_i+0x118>
 800e8f8:	6813      	ldr	r3, [r2, #0]
 800e8fa:	1d19      	adds	r1, r3, #4
 800e8fc:	6011      	str	r1, [r2, #0]
 800e8fe:	681d      	ldr	r5, [r3, #0]
 800e900:	6862      	ldr	r2, [r4, #4]
 800e902:	2100      	movs	r1, #0
 800e904:	4628      	mov	r0, r5
 800e906:	f7f1 fc73 	bl	80001f0 <memchr>
 800e90a:	b108      	cbz	r0, 800e910 <_printf_i+0x1bc>
 800e90c:	1b40      	subs	r0, r0, r5
 800e90e:	6060      	str	r0, [r4, #4]
 800e910:	6863      	ldr	r3, [r4, #4]
 800e912:	6123      	str	r3, [r4, #16]
 800e914:	2300      	movs	r3, #0
 800e916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e91a:	e7a7      	b.n	800e86c <_printf_i+0x118>
 800e91c:	6923      	ldr	r3, [r4, #16]
 800e91e:	462a      	mov	r2, r5
 800e920:	4639      	mov	r1, r7
 800e922:	4630      	mov	r0, r6
 800e924:	47c0      	blx	r8
 800e926:	3001      	adds	r0, #1
 800e928:	d0aa      	beq.n	800e880 <_printf_i+0x12c>
 800e92a:	6823      	ldr	r3, [r4, #0]
 800e92c:	079b      	lsls	r3, r3, #30
 800e92e:	d413      	bmi.n	800e958 <_printf_i+0x204>
 800e930:	68e0      	ldr	r0, [r4, #12]
 800e932:	9b03      	ldr	r3, [sp, #12]
 800e934:	4298      	cmp	r0, r3
 800e936:	bfb8      	it	lt
 800e938:	4618      	movlt	r0, r3
 800e93a:	e7a3      	b.n	800e884 <_printf_i+0x130>
 800e93c:	2301      	movs	r3, #1
 800e93e:	464a      	mov	r2, r9
 800e940:	4639      	mov	r1, r7
 800e942:	4630      	mov	r0, r6
 800e944:	47c0      	blx	r8
 800e946:	3001      	adds	r0, #1
 800e948:	d09a      	beq.n	800e880 <_printf_i+0x12c>
 800e94a:	3501      	adds	r5, #1
 800e94c:	68e3      	ldr	r3, [r4, #12]
 800e94e:	9a03      	ldr	r2, [sp, #12]
 800e950:	1a9b      	subs	r3, r3, r2
 800e952:	42ab      	cmp	r3, r5
 800e954:	dcf2      	bgt.n	800e93c <_printf_i+0x1e8>
 800e956:	e7eb      	b.n	800e930 <_printf_i+0x1dc>
 800e958:	2500      	movs	r5, #0
 800e95a:	f104 0919 	add.w	r9, r4, #25
 800e95e:	e7f5      	b.n	800e94c <_printf_i+0x1f8>
 800e960:	2b00      	cmp	r3, #0
 800e962:	d1ac      	bne.n	800e8be <_printf_i+0x16a>
 800e964:	7803      	ldrb	r3, [r0, #0]
 800e966:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e96a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e96e:	e76c      	b.n	800e84a <_printf_i+0xf6>
 800e970:	080107fe 	.word	0x080107fe
 800e974:	0801080f 	.word	0x0801080f

0800e978 <siprintf>:
 800e978:	b40e      	push	{r1, r2, r3}
 800e97a:	b500      	push	{lr}
 800e97c:	b09c      	sub	sp, #112	; 0x70
 800e97e:	ab1d      	add	r3, sp, #116	; 0x74
 800e980:	9002      	str	r0, [sp, #8]
 800e982:	9006      	str	r0, [sp, #24]
 800e984:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e988:	4809      	ldr	r0, [pc, #36]	; (800e9b0 <siprintf+0x38>)
 800e98a:	9107      	str	r1, [sp, #28]
 800e98c:	9104      	str	r1, [sp, #16]
 800e98e:	4909      	ldr	r1, [pc, #36]	; (800e9b4 <siprintf+0x3c>)
 800e990:	f853 2b04 	ldr.w	r2, [r3], #4
 800e994:	9105      	str	r1, [sp, #20]
 800e996:	6800      	ldr	r0, [r0, #0]
 800e998:	9301      	str	r3, [sp, #4]
 800e99a:	a902      	add	r1, sp, #8
 800e99c:	f001 fa5c 	bl	800fe58 <_svfiprintf_r>
 800e9a0:	9b02      	ldr	r3, [sp, #8]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	701a      	strb	r2, [r3, #0]
 800e9a6:	b01c      	add	sp, #112	; 0x70
 800e9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9ac:	b003      	add	sp, #12
 800e9ae:	4770      	bx	lr
 800e9b0:	20000024 	.word	0x20000024
 800e9b4:	ffff0208 	.word	0xffff0208

0800e9b8 <quorem>:
 800e9b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9bc:	6903      	ldr	r3, [r0, #16]
 800e9be:	690c      	ldr	r4, [r1, #16]
 800e9c0:	42a3      	cmp	r3, r4
 800e9c2:	4680      	mov	r8, r0
 800e9c4:	f2c0 8082 	blt.w	800eacc <quorem+0x114>
 800e9c8:	3c01      	subs	r4, #1
 800e9ca:	f101 0714 	add.w	r7, r1, #20
 800e9ce:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e9d2:	f100 0614 	add.w	r6, r0, #20
 800e9d6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e9da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e9de:	eb06 030c 	add.w	r3, r6, ip
 800e9e2:	3501      	adds	r5, #1
 800e9e4:	eb07 090c 	add.w	r9, r7, ip
 800e9e8:	9301      	str	r3, [sp, #4]
 800e9ea:	fbb0 f5f5 	udiv	r5, r0, r5
 800e9ee:	b395      	cbz	r5, 800ea56 <quorem+0x9e>
 800e9f0:	f04f 0a00 	mov.w	sl, #0
 800e9f4:	4638      	mov	r0, r7
 800e9f6:	46b6      	mov	lr, r6
 800e9f8:	46d3      	mov	fp, sl
 800e9fa:	f850 2b04 	ldr.w	r2, [r0], #4
 800e9fe:	b293      	uxth	r3, r2
 800ea00:	fb05 a303 	mla	r3, r5, r3, sl
 800ea04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	ebab 0303 	sub.w	r3, fp, r3
 800ea0e:	0c12      	lsrs	r2, r2, #16
 800ea10:	f8de b000 	ldr.w	fp, [lr]
 800ea14:	fb05 a202 	mla	r2, r5, r2, sl
 800ea18:	fa13 f38b 	uxtah	r3, r3, fp
 800ea1c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ea20:	fa1f fb82 	uxth.w	fp, r2
 800ea24:	f8de 2000 	ldr.w	r2, [lr]
 800ea28:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ea2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea36:	4581      	cmp	r9, r0
 800ea38:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ea3c:	f84e 3b04 	str.w	r3, [lr], #4
 800ea40:	d2db      	bcs.n	800e9fa <quorem+0x42>
 800ea42:	f856 300c 	ldr.w	r3, [r6, ip]
 800ea46:	b933      	cbnz	r3, 800ea56 <quorem+0x9e>
 800ea48:	9b01      	ldr	r3, [sp, #4]
 800ea4a:	3b04      	subs	r3, #4
 800ea4c:	429e      	cmp	r6, r3
 800ea4e:	461a      	mov	r2, r3
 800ea50:	d330      	bcc.n	800eab4 <quorem+0xfc>
 800ea52:	f8c8 4010 	str.w	r4, [r8, #16]
 800ea56:	4640      	mov	r0, r8
 800ea58:	f001 f828 	bl	800faac <__mcmp>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	db25      	blt.n	800eaac <quorem+0xf4>
 800ea60:	3501      	adds	r5, #1
 800ea62:	4630      	mov	r0, r6
 800ea64:	f04f 0c00 	mov.w	ip, #0
 800ea68:	f857 2b04 	ldr.w	r2, [r7], #4
 800ea6c:	f8d0 e000 	ldr.w	lr, [r0]
 800ea70:	b293      	uxth	r3, r2
 800ea72:	ebac 0303 	sub.w	r3, ip, r3
 800ea76:	0c12      	lsrs	r2, r2, #16
 800ea78:	fa13 f38e 	uxtah	r3, r3, lr
 800ea7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ea80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea8a:	45b9      	cmp	r9, r7
 800ea8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ea90:	f840 3b04 	str.w	r3, [r0], #4
 800ea94:	d2e8      	bcs.n	800ea68 <quorem+0xb0>
 800ea96:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ea9a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ea9e:	b92a      	cbnz	r2, 800eaac <quorem+0xf4>
 800eaa0:	3b04      	subs	r3, #4
 800eaa2:	429e      	cmp	r6, r3
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	d30b      	bcc.n	800eac0 <quorem+0x108>
 800eaa8:	f8c8 4010 	str.w	r4, [r8, #16]
 800eaac:	4628      	mov	r0, r5
 800eaae:	b003      	add	sp, #12
 800eab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab4:	6812      	ldr	r2, [r2, #0]
 800eab6:	3b04      	subs	r3, #4
 800eab8:	2a00      	cmp	r2, #0
 800eaba:	d1ca      	bne.n	800ea52 <quorem+0x9a>
 800eabc:	3c01      	subs	r4, #1
 800eabe:	e7c5      	b.n	800ea4c <quorem+0x94>
 800eac0:	6812      	ldr	r2, [r2, #0]
 800eac2:	3b04      	subs	r3, #4
 800eac4:	2a00      	cmp	r2, #0
 800eac6:	d1ef      	bne.n	800eaa8 <quorem+0xf0>
 800eac8:	3c01      	subs	r4, #1
 800eaca:	e7ea      	b.n	800eaa2 <quorem+0xea>
 800eacc:	2000      	movs	r0, #0
 800eace:	e7ee      	b.n	800eaae <quorem+0xf6>

0800ead0 <_dtoa_r>:
 800ead0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead4:	ec57 6b10 	vmov	r6, r7, d0
 800ead8:	b097      	sub	sp, #92	; 0x5c
 800eada:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eadc:	9106      	str	r1, [sp, #24]
 800eade:	4604      	mov	r4, r0
 800eae0:	920b      	str	r2, [sp, #44]	; 0x2c
 800eae2:	9312      	str	r3, [sp, #72]	; 0x48
 800eae4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eae8:	e9cd 6700 	strd	r6, r7, [sp]
 800eaec:	b93d      	cbnz	r5, 800eafe <_dtoa_r+0x2e>
 800eaee:	2010      	movs	r0, #16
 800eaf0:	f000 fdb4 	bl	800f65c <malloc>
 800eaf4:	6260      	str	r0, [r4, #36]	; 0x24
 800eaf6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eafa:	6005      	str	r5, [r0, #0]
 800eafc:	60c5      	str	r5, [r0, #12]
 800eafe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb00:	6819      	ldr	r1, [r3, #0]
 800eb02:	b151      	cbz	r1, 800eb1a <_dtoa_r+0x4a>
 800eb04:	685a      	ldr	r2, [r3, #4]
 800eb06:	604a      	str	r2, [r1, #4]
 800eb08:	2301      	movs	r3, #1
 800eb0a:	4093      	lsls	r3, r2
 800eb0c:	608b      	str	r3, [r1, #8]
 800eb0e:	4620      	mov	r0, r4
 800eb10:	f000 fdeb 	bl	800f6ea <_Bfree>
 800eb14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb16:	2200      	movs	r2, #0
 800eb18:	601a      	str	r2, [r3, #0]
 800eb1a:	1e3b      	subs	r3, r7, #0
 800eb1c:	bfbb      	ittet	lt
 800eb1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eb22:	9301      	strlt	r3, [sp, #4]
 800eb24:	2300      	movge	r3, #0
 800eb26:	2201      	movlt	r2, #1
 800eb28:	bfac      	ite	ge
 800eb2a:	f8c8 3000 	strge.w	r3, [r8]
 800eb2e:	f8c8 2000 	strlt.w	r2, [r8]
 800eb32:	4baf      	ldr	r3, [pc, #700]	; (800edf0 <_dtoa_r+0x320>)
 800eb34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800eb38:	ea33 0308 	bics.w	r3, r3, r8
 800eb3c:	d114      	bne.n	800eb68 <_dtoa_r+0x98>
 800eb3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb40:	f242 730f 	movw	r3, #9999	; 0x270f
 800eb44:	6013      	str	r3, [r2, #0]
 800eb46:	9b00      	ldr	r3, [sp, #0]
 800eb48:	b923      	cbnz	r3, 800eb54 <_dtoa_r+0x84>
 800eb4a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800eb4e:	2800      	cmp	r0, #0
 800eb50:	f000 8542 	beq.w	800f5d8 <_dtoa_r+0xb08>
 800eb54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb56:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ee04 <_dtoa_r+0x334>
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	f000 8544 	beq.w	800f5e8 <_dtoa_r+0xb18>
 800eb60:	f10b 0303 	add.w	r3, fp, #3
 800eb64:	f000 bd3e 	b.w	800f5e4 <_dtoa_r+0xb14>
 800eb68:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	2300      	movs	r3, #0
 800eb70:	4630      	mov	r0, r6
 800eb72:	4639      	mov	r1, r7
 800eb74:	f7f1 ffb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800eb78:	4681      	mov	r9, r0
 800eb7a:	b168      	cbz	r0, 800eb98 <_dtoa_r+0xc8>
 800eb7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb7e:	2301      	movs	r3, #1
 800eb80:	6013      	str	r3, [r2, #0]
 800eb82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f000 8524 	beq.w	800f5d2 <_dtoa_r+0xb02>
 800eb8a:	4b9a      	ldr	r3, [pc, #616]	; (800edf4 <_dtoa_r+0x324>)
 800eb8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eb8e:	f103 3bff 	add.w	fp, r3, #4294967295
 800eb92:	6013      	str	r3, [r2, #0]
 800eb94:	f000 bd28 	b.w	800f5e8 <_dtoa_r+0xb18>
 800eb98:	aa14      	add	r2, sp, #80	; 0x50
 800eb9a:	a915      	add	r1, sp, #84	; 0x54
 800eb9c:	ec47 6b10 	vmov	d0, r6, r7
 800eba0:	4620      	mov	r0, r4
 800eba2:	f000 fffa 	bl	800fb9a <__d2b>
 800eba6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ebaa:	9004      	str	r0, [sp, #16]
 800ebac:	2d00      	cmp	r5, #0
 800ebae:	d07c      	beq.n	800ecaa <_dtoa_r+0x1da>
 800ebb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ebb4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ebb8:	46b2      	mov	sl, r6
 800ebba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ebbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ebc2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	4b8b      	ldr	r3, [pc, #556]	; (800edf8 <_dtoa_r+0x328>)
 800ebca:	4650      	mov	r0, sl
 800ebcc:	4659      	mov	r1, fp
 800ebce:	f7f1 fb63 	bl	8000298 <__aeabi_dsub>
 800ebd2:	a381      	add	r3, pc, #516	; (adr r3, 800edd8 <_dtoa_r+0x308>)
 800ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd8:	f7f1 fd16 	bl	8000608 <__aeabi_dmul>
 800ebdc:	a380      	add	r3, pc, #512	; (adr r3, 800ede0 <_dtoa_r+0x310>)
 800ebde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe2:	f7f1 fb5b 	bl	800029c <__adddf3>
 800ebe6:	4606      	mov	r6, r0
 800ebe8:	4628      	mov	r0, r5
 800ebea:	460f      	mov	r7, r1
 800ebec:	f7f1 fca2 	bl	8000534 <__aeabi_i2d>
 800ebf0:	a37d      	add	r3, pc, #500	; (adr r3, 800ede8 <_dtoa_r+0x318>)
 800ebf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf6:	f7f1 fd07 	bl	8000608 <__aeabi_dmul>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	4630      	mov	r0, r6
 800ec00:	4639      	mov	r1, r7
 800ec02:	f7f1 fb4b 	bl	800029c <__adddf3>
 800ec06:	4606      	mov	r6, r0
 800ec08:	460f      	mov	r7, r1
 800ec0a:	f7f1 ffad 	bl	8000b68 <__aeabi_d2iz>
 800ec0e:	2200      	movs	r2, #0
 800ec10:	4682      	mov	sl, r0
 800ec12:	2300      	movs	r3, #0
 800ec14:	4630      	mov	r0, r6
 800ec16:	4639      	mov	r1, r7
 800ec18:	f7f1 ff68 	bl	8000aec <__aeabi_dcmplt>
 800ec1c:	b148      	cbz	r0, 800ec32 <_dtoa_r+0x162>
 800ec1e:	4650      	mov	r0, sl
 800ec20:	f7f1 fc88 	bl	8000534 <__aeabi_i2d>
 800ec24:	4632      	mov	r2, r6
 800ec26:	463b      	mov	r3, r7
 800ec28:	f7f1 ff56 	bl	8000ad8 <__aeabi_dcmpeq>
 800ec2c:	b908      	cbnz	r0, 800ec32 <_dtoa_r+0x162>
 800ec2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec32:	f1ba 0f16 	cmp.w	sl, #22
 800ec36:	d859      	bhi.n	800ecec <_dtoa_r+0x21c>
 800ec38:	4970      	ldr	r1, [pc, #448]	; (800edfc <_dtoa_r+0x32c>)
 800ec3a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ec3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec46:	f7f1 ff6f 	bl	8000b28 <__aeabi_dcmpgt>
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	d050      	beq.n	800ecf0 <_dtoa_r+0x220>
 800ec4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec52:	2300      	movs	r3, #0
 800ec54:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec58:	1b5d      	subs	r5, r3, r5
 800ec5a:	f1b5 0801 	subs.w	r8, r5, #1
 800ec5e:	bf49      	itett	mi
 800ec60:	f1c5 0301 	rsbmi	r3, r5, #1
 800ec64:	2300      	movpl	r3, #0
 800ec66:	9305      	strmi	r3, [sp, #20]
 800ec68:	f04f 0800 	movmi.w	r8, #0
 800ec6c:	bf58      	it	pl
 800ec6e:	9305      	strpl	r3, [sp, #20]
 800ec70:	f1ba 0f00 	cmp.w	sl, #0
 800ec74:	db3e      	blt.n	800ecf4 <_dtoa_r+0x224>
 800ec76:	2300      	movs	r3, #0
 800ec78:	44d0      	add	r8, sl
 800ec7a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ec7e:	9307      	str	r3, [sp, #28]
 800ec80:	9b06      	ldr	r3, [sp, #24]
 800ec82:	2b09      	cmp	r3, #9
 800ec84:	f200 8090 	bhi.w	800eda8 <_dtoa_r+0x2d8>
 800ec88:	2b05      	cmp	r3, #5
 800ec8a:	bfc4      	itt	gt
 800ec8c:	3b04      	subgt	r3, #4
 800ec8e:	9306      	strgt	r3, [sp, #24]
 800ec90:	9b06      	ldr	r3, [sp, #24]
 800ec92:	f1a3 0302 	sub.w	r3, r3, #2
 800ec96:	bfcc      	ite	gt
 800ec98:	2500      	movgt	r5, #0
 800ec9a:	2501      	movle	r5, #1
 800ec9c:	2b03      	cmp	r3, #3
 800ec9e:	f200 808f 	bhi.w	800edc0 <_dtoa_r+0x2f0>
 800eca2:	e8df f003 	tbb	[pc, r3]
 800eca6:	7f7d      	.short	0x7f7d
 800eca8:	7131      	.short	0x7131
 800ecaa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ecae:	441d      	add	r5, r3
 800ecb0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ecb4:	2820      	cmp	r0, #32
 800ecb6:	dd13      	ble.n	800ece0 <_dtoa_r+0x210>
 800ecb8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ecbc:	9b00      	ldr	r3, [sp, #0]
 800ecbe:	fa08 f800 	lsl.w	r8, r8, r0
 800ecc2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ecc6:	fa23 f000 	lsr.w	r0, r3, r0
 800ecca:	ea48 0000 	orr.w	r0, r8, r0
 800ecce:	f7f1 fc21 	bl	8000514 <__aeabi_ui2d>
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	4682      	mov	sl, r0
 800ecd6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ecda:	3d01      	subs	r5, #1
 800ecdc:	9313      	str	r3, [sp, #76]	; 0x4c
 800ecde:	e772      	b.n	800ebc6 <_dtoa_r+0xf6>
 800ece0:	9b00      	ldr	r3, [sp, #0]
 800ece2:	f1c0 0020 	rsb	r0, r0, #32
 800ece6:	fa03 f000 	lsl.w	r0, r3, r0
 800ecea:	e7f0      	b.n	800ecce <_dtoa_r+0x1fe>
 800ecec:	2301      	movs	r3, #1
 800ecee:	e7b1      	b.n	800ec54 <_dtoa_r+0x184>
 800ecf0:	900f      	str	r0, [sp, #60]	; 0x3c
 800ecf2:	e7b0      	b.n	800ec56 <_dtoa_r+0x186>
 800ecf4:	9b05      	ldr	r3, [sp, #20]
 800ecf6:	eba3 030a 	sub.w	r3, r3, sl
 800ecfa:	9305      	str	r3, [sp, #20]
 800ecfc:	f1ca 0300 	rsb	r3, sl, #0
 800ed00:	9307      	str	r3, [sp, #28]
 800ed02:	2300      	movs	r3, #0
 800ed04:	930e      	str	r3, [sp, #56]	; 0x38
 800ed06:	e7bb      	b.n	800ec80 <_dtoa_r+0x1b0>
 800ed08:	2301      	movs	r3, #1
 800ed0a:	930a      	str	r3, [sp, #40]	; 0x28
 800ed0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	dd59      	ble.n	800edc6 <_dtoa_r+0x2f6>
 800ed12:	9302      	str	r3, [sp, #8]
 800ed14:	4699      	mov	r9, r3
 800ed16:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ed18:	2200      	movs	r2, #0
 800ed1a:	6072      	str	r2, [r6, #4]
 800ed1c:	2204      	movs	r2, #4
 800ed1e:	f102 0014 	add.w	r0, r2, #20
 800ed22:	4298      	cmp	r0, r3
 800ed24:	6871      	ldr	r1, [r6, #4]
 800ed26:	d953      	bls.n	800edd0 <_dtoa_r+0x300>
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f000 fcaa 	bl	800f682 <_Balloc>
 800ed2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed30:	6030      	str	r0, [r6, #0]
 800ed32:	f1b9 0f0e 	cmp.w	r9, #14
 800ed36:	f8d3 b000 	ldr.w	fp, [r3]
 800ed3a:	f200 80e6 	bhi.w	800ef0a <_dtoa_r+0x43a>
 800ed3e:	2d00      	cmp	r5, #0
 800ed40:	f000 80e3 	beq.w	800ef0a <_dtoa_r+0x43a>
 800ed44:	ed9d 7b00 	vldr	d7, [sp]
 800ed48:	f1ba 0f00 	cmp.w	sl, #0
 800ed4c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ed50:	dd74      	ble.n	800ee3c <_dtoa_r+0x36c>
 800ed52:	4a2a      	ldr	r2, [pc, #168]	; (800edfc <_dtoa_r+0x32c>)
 800ed54:	f00a 030f 	and.w	r3, sl, #15
 800ed58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ed5c:	ed93 7b00 	vldr	d7, [r3]
 800ed60:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ed64:	06f0      	lsls	r0, r6, #27
 800ed66:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ed6a:	d565      	bpl.n	800ee38 <_dtoa_r+0x368>
 800ed6c:	4b24      	ldr	r3, [pc, #144]	; (800ee00 <_dtoa_r+0x330>)
 800ed6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ed72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed76:	f7f1 fd71 	bl	800085c <__aeabi_ddiv>
 800ed7a:	e9cd 0100 	strd	r0, r1, [sp]
 800ed7e:	f006 060f 	and.w	r6, r6, #15
 800ed82:	2503      	movs	r5, #3
 800ed84:	4f1e      	ldr	r7, [pc, #120]	; (800ee00 <_dtoa_r+0x330>)
 800ed86:	e04c      	b.n	800ee22 <_dtoa_r+0x352>
 800ed88:	2301      	movs	r3, #1
 800ed8a:	930a      	str	r3, [sp, #40]	; 0x28
 800ed8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed8e:	4453      	add	r3, sl
 800ed90:	f103 0901 	add.w	r9, r3, #1
 800ed94:	9302      	str	r3, [sp, #8]
 800ed96:	464b      	mov	r3, r9
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	bfb8      	it	lt
 800ed9c:	2301      	movlt	r3, #1
 800ed9e:	e7ba      	b.n	800ed16 <_dtoa_r+0x246>
 800eda0:	2300      	movs	r3, #0
 800eda2:	e7b2      	b.n	800ed0a <_dtoa_r+0x23a>
 800eda4:	2300      	movs	r3, #0
 800eda6:	e7f0      	b.n	800ed8a <_dtoa_r+0x2ba>
 800eda8:	2501      	movs	r5, #1
 800edaa:	2300      	movs	r3, #0
 800edac:	9306      	str	r3, [sp, #24]
 800edae:	950a      	str	r5, [sp, #40]	; 0x28
 800edb0:	f04f 33ff 	mov.w	r3, #4294967295
 800edb4:	9302      	str	r3, [sp, #8]
 800edb6:	4699      	mov	r9, r3
 800edb8:	2200      	movs	r2, #0
 800edba:	2312      	movs	r3, #18
 800edbc:	920b      	str	r2, [sp, #44]	; 0x2c
 800edbe:	e7aa      	b.n	800ed16 <_dtoa_r+0x246>
 800edc0:	2301      	movs	r3, #1
 800edc2:	930a      	str	r3, [sp, #40]	; 0x28
 800edc4:	e7f4      	b.n	800edb0 <_dtoa_r+0x2e0>
 800edc6:	2301      	movs	r3, #1
 800edc8:	9302      	str	r3, [sp, #8]
 800edca:	4699      	mov	r9, r3
 800edcc:	461a      	mov	r2, r3
 800edce:	e7f5      	b.n	800edbc <_dtoa_r+0x2ec>
 800edd0:	3101      	adds	r1, #1
 800edd2:	6071      	str	r1, [r6, #4]
 800edd4:	0052      	lsls	r2, r2, #1
 800edd6:	e7a2      	b.n	800ed1e <_dtoa_r+0x24e>
 800edd8:	636f4361 	.word	0x636f4361
 800eddc:	3fd287a7 	.word	0x3fd287a7
 800ede0:	8b60c8b3 	.word	0x8b60c8b3
 800ede4:	3fc68a28 	.word	0x3fc68a28
 800ede8:	509f79fb 	.word	0x509f79fb
 800edec:	3fd34413 	.word	0x3fd34413
 800edf0:	7ff00000 	.word	0x7ff00000
 800edf4:	080107fd 	.word	0x080107fd
 800edf8:	3ff80000 	.word	0x3ff80000
 800edfc:	08010858 	.word	0x08010858
 800ee00:	08010830 	.word	0x08010830
 800ee04:	08010829 	.word	0x08010829
 800ee08:	07f1      	lsls	r1, r6, #31
 800ee0a:	d508      	bpl.n	800ee1e <_dtoa_r+0x34e>
 800ee0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ee10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee14:	f7f1 fbf8 	bl	8000608 <__aeabi_dmul>
 800ee18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ee1c:	3501      	adds	r5, #1
 800ee1e:	1076      	asrs	r6, r6, #1
 800ee20:	3708      	adds	r7, #8
 800ee22:	2e00      	cmp	r6, #0
 800ee24:	d1f0      	bne.n	800ee08 <_dtoa_r+0x338>
 800ee26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ee2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee2e:	f7f1 fd15 	bl	800085c <__aeabi_ddiv>
 800ee32:	e9cd 0100 	strd	r0, r1, [sp]
 800ee36:	e01a      	b.n	800ee6e <_dtoa_r+0x39e>
 800ee38:	2502      	movs	r5, #2
 800ee3a:	e7a3      	b.n	800ed84 <_dtoa_r+0x2b4>
 800ee3c:	f000 80a0 	beq.w	800ef80 <_dtoa_r+0x4b0>
 800ee40:	f1ca 0600 	rsb	r6, sl, #0
 800ee44:	4b9f      	ldr	r3, [pc, #636]	; (800f0c4 <_dtoa_r+0x5f4>)
 800ee46:	4fa0      	ldr	r7, [pc, #640]	; (800f0c8 <_dtoa_r+0x5f8>)
 800ee48:	f006 020f 	and.w	r2, r6, #15
 800ee4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee58:	f7f1 fbd6 	bl	8000608 <__aeabi_dmul>
 800ee5c:	e9cd 0100 	strd	r0, r1, [sp]
 800ee60:	1136      	asrs	r6, r6, #4
 800ee62:	2300      	movs	r3, #0
 800ee64:	2502      	movs	r5, #2
 800ee66:	2e00      	cmp	r6, #0
 800ee68:	d17f      	bne.n	800ef6a <_dtoa_r+0x49a>
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d1e1      	bne.n	800ee32 <_dtoa_r+0x362>
 800ee6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	f000 8087 	beq.w	800ef84 <_dtoa_r+0x4b4>
 800ee76:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	4b93      	ldr	r3, [pc, #588]	; (800f0cc <_dtoa_r+0x5fc>)
 800ee7e:	4630      	mov	r0, r6
 800ee80:	4639      	mov	r1, r7
 800ee82:	f7f1 fe33 	bl	8000aec <__aeabi_dcmplt>
 800ee86:	2800      	cmp	r0, #0
 800ee88:	d07c      	beq.n	800ef84 <_dtoa_r+0x4b4>
 800ee8a:	f1b9 0f00 	cmp.w	r9, #0
 800ee8e:	d079      	beq.n	800ef84 <_dtoa_r+0x4b4>
 800ee90:	9b02      	ldr	r3, [sp, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	dd35      	ble.n	800ef02 <_dtoa_r+0x432>
 800ee96:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ee9a:	9308      	str	r3, [sp, #32]
 800ee9c:	4639      	mov	r1, r7
 800ee9e:	2200      	movs	r2, #0
 800eea0:	4b8b      	ldr	r3, [pc, #556]	; (800f0d0 <_dtoa_r+0x600>)
 800eea2:	4630      	mov	r0, r6
 800eea4:	f7f1 fbb0 	bl	8000608 <__aeabi_dmul>
 800eea8:	e9cd 0100 	strd	r0, r1, [sp]
 800eeac:	9f02      	ldr	r7, [sp, #8]
 800eeae:	3501      	adds	r5, #1
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	f7f1 fb3f 	bl	8000534 <__aeabi_i2d>
 800eeb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eeba:	f7f1 fba5 	bl	8000608 <__aeabi_dmul>
 800eebe:	2200      	movs	r2, #0
 800eec0:	4b84      	ldr	r3, [pc, #528]	; (800f0d4 <_dtoa_r+0x604>)
 800eec2:	f7f1 f9eb 	bl	800029c <__adddf3>
 800eec6:	4605      	mov	r5, r0
 800eec8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800eecc:	2f00      	cmp	r7, #0
 800eece:	d15d      	bne.n	800ef8c <_dtoa_r+0x4bc>
 800eed0:	2200      	movs	r2, #0
 800eed2:	4b81      	ldr	r3, [pc, #516]	; (800f0d8 <_dtoa_r+0x608>)
 800eed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eed8:	f7f1 f9de 	bl	8000298 <__aeabi_dsub>
 800eedc:	462a      	mov	r2, r5
 800eede:	4633      	mov	r3, r6
 800eee0:	e9cd 0100 	strd	r0, r1, [sp]
 800eee4:	f7f1 fe20 	bl	8000b28 <__aeabi_dcmpgt>
 800eee8:	2800      	cmp	r0, #0
 800eeea:	f040 8288 	bne.w	800f3fe <_dtoa_r+0x92e>
 800eeee:	462a      	mov	r2, r5
 800eef0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800eef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eef8:	f7f1 fdf8 	bl	8000aec <__aeabi_dcmplt>
 800eefc:	2800      	cmp	r0, #0
 800eefe:	f040 827c 	bne.w	800f3fa <_dtoa_r+0x92a>
 800ef02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ef06:	e9cd 2300 	strd	r2, r3, [sp]
 800ef0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	f2c0 8150 	blt.w	800f1b2 <_dtoa_r+0x6e2>
 800ef12:	f1ba 0f0e 	cmp.w	sl, #14
 800ef16:	f300 814c 	bgt.w	800f1b2 <_dtoa_r+0x6e2>
 800ef1a:	4b6a      	ldr	r3, [pc, #424]	; (800f0c4 <_dtoa_r+0x5f4>)
 800ef1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ef20:	ed93 7b00 	vldr	d7, [r3]
 800ef24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef2c:	f280 80d8 	bge.w	800f0e0 <_dtoa_r+0x610>
 800ef30:	f1b9 0f00 	cmp.w	r9, #0
 800ef34:	f300 80d4 	bgt.w	800f0e0 <_dtoa_r+0x610>
 800ef38:	f040 825e 	bne.w	800f3f8 <_dtoa_r+0x928>
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	4b66      	ldr	r3, [pc, #408]	; (800f0d8 <_dtoa_r+0x608>)
 800ef40:	ec51 0b17 	vmov	r0, r1, d7
 800ef44:	f7f1 fb60 	bl	8000608 <__aeabi_dmul>
 800ef48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef4c:	f7f1 fde2 	bl	8000b14 <__aeabi_dcmpge>
 800ef50:	464f      	mov	r7, r9
 800ef52:	464e      	mov	r6, r9
 800ef54:	2800      	cmp	r0, #0
 800ef56:	f040 8234 	bne.w	800f3c2 <_dtoa_r+0x8f2>
 800ef5a:	2331      	movs	r3, #49	; 0x31
 800ef5c:	f10b 0501 	add.w	r5, fp, #1
 800ef60:	f88b 3000 	strb.w	r3, [fp]
 800ef64:	f10a 0a01 	add.w	sl, sl, #1
 800ef68:	e22f      	b.n	800f3ca <_dtoa_r+0x8fa>
 800ef6a:	07f2      	lsls	r2, r6, #31
 800ef6c:	d505      	bpl.n	800ef7a <_dtoa_r+0x4aa>
 800ef6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef72:	f7f1 fb49 	bl	8000608 <__aeabi_dmul>
 800ef76:	3501      	adds	r5, #1
 800ef78:	2301      	movs	r3, #1
 800ef7a:	1076      	asrs	r6, r6, #1
 800ef7c:	3708      	adds	r7, #8
 800ef7e:	e772      	b.n	800ee66 <_dtoa_r+0x396>
 800ef80:	2502      	movs	r5, #2
 800ef82:	e774      	b.n	800ee6e <_dtoa_r+0x39e>
 800ef84:	f8cd a020 	str.w	sl, [sp, #32]
 800ef88:	464f      	mov	r7, r9
 800ef8a:	e791      	b.n	800eeb0 <_dtoa_r+0x3e0>
 800ef8c:	4b4d      	ldr	r3, [pc, #308]	; (800f0c4 <_dtoa_r+0x5f4>)
 800ef8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ef92:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ef96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d047      	beq.n	800f02c <_dtoa_r+0x55c>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	460b      	mov	r3, r1
 800efa0:	2000      	movs	r0, #0
 800efa2:	494e      	ldr	r1, [pc, #312]	; (800f0dc <_dtoa_r+0x60c>)
 800efa4:	f7f1 fc5a 	bl	800085c <__aeabi_ddiv>
 800efa8:	462a      	mov	r2, r5
 800efaa:	4633      	mov	r3, r6
 800efac:	f7f1 f974 	bl	8000298 <__aeabi_dsub>
 800efb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800efb4:	465d      	mov	r5, fp
 800efb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800efba:	f7f1 fdd5 	bl	8000b68 <__aeabi_d2iz>
 800efbe:	4606      	mov	r6, r0
 800efc0:	f7f1 fab8 	bl	8000534 <__aeabi_i2d>
 800efc4:	4602      	mov	r2, r0
 800efc6:	460b      	mov	r3, r1
 800efc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800efcc:	f7f1 f964 	bl	8000298 <__aeabi_dsub>
 800efd0:	3630      	adds	r6, #48	; 0x30
 800efd2:	f805 6b01 	strb.w	r6, [r5], #1
 800efd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800efda:	e9cd 0100 	strd	r0, r1, [sp]
 800efde:	f7f1 fd85 	bl	8000aec <__aeabi_dcmplt>
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d163      	bne.n	800f0ae <_dtoa_r+0x5de>
 800efe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efea:	2000      	movs	r0, #0
 800efec:	4937      	ldr	r1, [pc, #220]	; (800f0cc <_dtoa_r+0x5fc>)
 800efee:	f7f1 f953 	bl	8000298 <__aeabi_dsub>
 800eff2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eff6:	f7f1 fd79 	bl	8000aec <__aeabi_dcmplt>
 800effa:	2800      	cmp	r0, #0
 800effc:	f040 80b7 	bne.w	800f16e <_dtoa_r+0x69e>
 800f000:	eba5 030b 	sub.w	r3, r5, fp
 800f004:	429f      	cmp	r7, r3
 800f006:	f77f af7c 	ble.w	800ef02 <_dtoa_r+0x432>
 800f00a:	2200      	movs	r2, #0
 800f00c:	4b30      	ldr	r3, [pc, #192]	; (800f0d0 <_dtoa_r+0x600>)
 800f00e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f012:	f7f1 faf9 	bl	8000608 <__aeabi_dmul>
 800f016:	2200      	movs	r2, #0
 800f018:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f01c:	4b2c      	ldr	r3, [pc, #176]	; (800f0d0 <_dtoa_r+0x600>)
 800f01e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f022:	f7f1 faf1 	bl	8000608 <__aeabi_dmul>
 800f026:	e9cd 0100 	strd	r0, r1, [sp]
 800f02a:	e7c4      	b.n	800efb6 <_dtoa_r+0x4e6>
 800f02c:	462a      	mov	r2, r5
 800f02e:	4633      	mov	r3, r6
 800f030:	f7f1 faea 	bl	8000608 <__aeabi_dmul>
 800f034:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f038:	eb0b 0507 	add.w	r5, fp, r7
 800f03c:	465e      	mov	r6, fp
 800f03e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f042:	f7f1 fd91 	bl	8000b68 <__aeabi_d2iz>
 800f046:	4607      	mov	r7, r0
 800f048:	f7f1 fa74 	bl	8000534 <__aeabi_i2d>
 800f04c:	3730      	adds	r7, #48	; 0x30
 800f04e:	4602      	mov	r2, r0
 800f050:	460b      	mov	r3, r1
 800f052:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f056:	f7f1 f91f 	bl	8000298 <__aeabi_dsub>
 800f05a:	f806 7b01 	strb.w	r7, [r6], #1
 800f05e:	42ae      	cmp	r6, r5
 800f060:	e9cd 0100 	strd	r0, r1, [sp]
 800f064:	f04f 0200 	mov.w	r2, #0
 800f068:	d126      	bne.n	800f0b8 <_dtoa_r+0x5e8>
 800f06a:	4b1c      	ldr	r3, [pc, #112]	; (800f0dc <_dtoa_r+0x60c>)
 800f06c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f070:	f7f1 f914 	bl	800029c <__adddf3>
 800f074:	4602      	mov	r2, r0
 800f076:	460b      	mov	r3, r1
 800f078:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f07c:	f7f1 fd54 	bl	8000b28 <__aeabi_dcmpgt>
 800f080:	2800      	cmp	r0, #0
 800f082:	d174      	bne.n	800f16e <_dtoa_r+0x69e>
 800f084:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f088:	2000      	movs	r0, #0
 800f08a:	4914      	ldr	r1, [pc, #80]	; (800f0dc <_dtoa_r+0x60c>)
 800f08c:	f7f1 f904 	bl	8000298 <__aeabi_dsub>
 800f090:	4602      	mov	r2, r0
 800f092:	460b      	mov	r3, r1
 800f094:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f098:	f7f1 fd28 	bl	8000aec <__aeabi_dcmplt>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	f43f af30 	beq.w	800ef02 <_dtoa_r+0x432>
 800f0a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f0a6:	2b30      	cmp	r3, #48	; 0x30
 800f0a8:	f105 32ff 	add.w	r2, r5, #4294967295
 800f0ac:	d002      	beq.n	800f0b4 <_dtoa_r+0x5e4>
 800f0ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f0b2:	e04a      	b.n	800f14a <_dtoa_r+0x67a>
 800f0b4:	4615      	mov	r5, r2
 800f0b6:	e7f4      	b.n	800f0a2 <_dtoa_r+0x5d2>
 800f0b8:	4b05      	ldr	r3, [pc, #20]	; (800f0d0 <_dtoa_r+0x600>)
 800f0ba:	f7f1 faa5 	bl	8000608 <__aeabi_dmul>
 800f0be:	e9cd 0100 	strd	r0, r1, [sp]
 800f0c2:	e7bc      	b.n	800f03e <_dtoa_r+0x56e>
 800f0c4:	08010858 	.word	0x08010858
 800f0c8:	08010830 	.word	0x08010830
 800f0cc:	3ff00000 	.word	0x3ff00000
 800f0d0:	40240000 	.word	0x40240000
 800f0d4:	401c0000 	.word	0x401c0000
 800f0d8:	40140000 	.word	0x40140000
 800f0dc:	3fe00000 	.word	0x3fe00000
 800f0e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f0e4:	465d      	mov	r5, fp
 800f0e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	4639      	mov	r1, r7
 800f0ee:	f7f1 fbb5 	bl	800085c <__aeabi_ddiv>
 800f0f2:	f7f1 fd39 	bl	8000b68 <__aeabi_d2iz>
 800f0f6:	4680      	mov	r8, r0
 800f0f8:	f7f1 fa1c 	bl	8000534 <__aeabi_i2d>
 800f0fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f100:	f7f1 fa82 	bl	8000608 <__aeabi_dmul>
 800f104:	4602      	mov	r2, r0
 800f106:	460b      	mov	r3, r1
 800f108:	4630      	mov	r0, r6
 800f10a:	4639      	mov	r1, r7
 800f10c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f110:	f7f1 f8c2 	bl	8000298 <__aeabi_dsub>
 800f114:	f805 6b01 	strb.w	r6, [r5], #1
 800f118:	eba5 060b 	sub.w	r6, r5, fp
 800f11c:	45b1      	cmp	r9, r6
 800f11e:	4602      	mov	r2, r0
 800f120:	460b      	mov	r3, r1
 800f122:	d139      	bne.n	800f198 <_dtoa_r+0x6c8>
 800f124:	f7f1 f8ba 	bl	800029c <__adddf3>
 800f128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f12c:	4606      	mov	r6, r0
 800f12e:	460f      	mov	r7, r1
 800f130:	f7f1 fcfa 	bl	8000b28 <__aeabi_dcmpgt>
 800f134:	b9c8      	cbnz	r0, 800f16a <_dtoa_r+0x69a>
 800f136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f13a:	4630      	mov	r0, r6
 800f13c:	4639      	mov	r1, r7
 800f13e:	f7f1 fccb 	bl	8000ad8 <__aeabi_dcmpeq>
 800f142:	b110      	cbz	r0, 800f14a <_dtoa_r+0x67a>
 800f144:	f018 0f01 	tst.w	r8, #1
 800f148:	d10f      	bne.n	800f16a <_dtoa_r+0x69a>
 800f14a:	9904      	ldr	r1, [sp, #16]
 800f14c:	4620      	mov	r0, r4
 800f14e:	f000 facc 	bl	800f6ea <_Bfree>
 800f152:	2300      	movs	r3, #0
 800f154:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f156:	702b      	strb	r3, [r5, #0]
 800f158:	f10a 0301 	add.w	r3, sl, #1
 800f15c:	6013      	str	r3, [r2, #0]
 800f15e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f160:	2b00      	cmp	r3, #0
 800f162:	f000 8241 	beq.w	800f5e8 <_dtoa_r+0xb18>
 800f166:	601d      	str	r5, [r3, #0]
 800f168:	e23e      	b.n	800f5e8 <_dtoa_r+0xb18>
 800f16a:	f8cd a020 	str.w	sl, [sp, #32]
 800f16e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f172:	2a39      	cmp	r2, #57	; 0x39
 800f174:	f105 33ff 	add.w	r3, r5, #4294967295
 800f178:	d108      	bne.n	800f18c <_dtoa_r+0x6bc>
 800f17a:	459b      	cmp	fp, r3
 800f17c:	d10a      	bne.n	800f194 <_dtoa_r+0x6c4>
 800f17e:	9b08      	ldr	r3, [sp, #32]
 800f180:	3301      	adds	r3, #1
 800f182:	9308      	str	r3, [sp, #32]
 800f184:	2330      	movs	r3, #48	; 0x30
 800f186:	f88b 3000 	strb.w	r3, [fp]
 800f18a:	465b      	mov	r3, fp
 800f18c:	781a      	ldrb	r2, [r3, #0]
 800f18e:	3201      	adds	r2, #1
 800f190:	701a      	strb	r2, [r3, #0]
 800f192:	e78c      	b.n	800f0ae <_dtoa_r+0x5de>
 800f194:	461d      	mov	r5, r3
 800f196:	e7ea      	b.n	800f16e <_dtoa_r+0x69e>
 800f198:	2200      	movs	r2, #0
 800f19a:	4b9b      	ldr	r3, [pc, #620]	; (800f408 <_dtoa_r+0x938>)
 800f19c:	f7f1 fa34 	bl	8000608 <__aeabi_dmul>
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	4606      	mov	r6, r0
 800f1a6:	460f      	mov	r7, r1
 800f1a8:	f7f1 fc96 	bl	8000ad8 <__aeabi_dcmpeq>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d09a      	beq.n	800f0e6 <_dtoa_r+0x616>
 800f1b0:	e7cb      	b.n	800f14a <_dtoa_r+0x67a>
 800f1b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1b4:	2a00      	cmp	r2, #0
 800f1b6:	f000 808b 	beq.w	800f2d0 <_dtoa_r+0x800>
 800f1ba:	9a06      	ldr	r2, [sp, #24]
 800f1bc:	2a01      	cmp	r2, #1
 800f1be:	dc6e      	bgt.n	800f29e <_dtoa_r+0x7ce>
 800f1c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f1c2:	2a00      	cmp	r2, #0
 800f1c4:	d067      	beq.n	800f296 <_dtoa_r+0x7c6>
 800f1c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f1ca:	9f07      	ldr	r7, [sp, #28]
 800f1cc:	9d05      	ldr	r5, [sp, #20]
 800f1ce:	9a05      	ldr	r2, [sp, #20]
 800f1d0:	2101      	movs	r1, #1
 800f1d2:	441a      	add	r2, r3
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	9205      	str	r2, [sp, #20]
 800f1d8:	4498      	add	r8, r3
 800f1da:	f000 fb26 	bl	800f82a <__i2b>
 800f1de:	4606      	mov	r6, r0
 800f1e0:	2d00      	cmp	r5, #0
 800f1e2:	dd0c      	ble.n	800f1fe <_dtoa_r+0x72e>
 800f1e4:	f1b8 0f00 	cmp.w	r8, #0
 800f1e8:	dd09      	ble.n	800f1fe <_dtoa_r+0x72e>
 800f1ea:	4545      	cmp	r5, r8
 800f1ec:	9a05      	ldr	r2, [sp, #20]
 800f1ee:	462b      	mov	r3, r5
 800f1f0:	bfa8      	it	ge
 800f1f2:	4643      	movge	r3, r8
 800f1f4:	1ad2      	subs	r2, r2, r3
 800f1f6:	9205      	str	r2, [sp, #20]
 800f1f8:	1aed      	subs	r5, r5, r3
 800f1fa:	eba8 0803 	sub.w	r8, r8, r3
 800f1fe:	9b07      	ldr	r3, [sp, #28]
 800f200:	b1eb      	cbz	r3, 800f23e <_dtoa_r+0x76e>
 800f202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f204:	2b00      	cmp	r3, #0
 800f206:	d067      	beq.n	800f2d8 <_dtoa_r+0x808>
 800f208:	b18f      	cbz	r7, 800f22e <_dtoa_r+0x75e>
 800f20a:	4631      	mov	r1, r6
 800f20c:	463a      	mov	r2, r7
 800f20e:	4620      	mov	r0, r4
 800f210:	f000 fbaa 	bl	800f968 <__pow5mult>
 800f214:	9a04      	ldr	r2, [sp, #16]
 800f216:	4601      	mov	r1, r0
 800f218:	4606      	mov	r6, r0
 800f21a:	4620      	mov	r0, r4
 800f21c:	f000 fb0e 	bl	800f83c <__multiply>
 800f220:	9904      	ldr	r1, [sp, #16]
 800f222:	9008      	str	r0, [sp, #32]
 800f224:	4620      	mov	r0, r4
 800f226:	f000 fa60 	bl	800f6ea <_Bfree>
 800f22a:	9b08      	ldr	r3, [sp, #32]
 800f22c:	9304      	str	r3, [sp, #16]
 800f22e:	9b07      	ldr	r3, [sp, #28]
 800f230:	1bda      	subs	r2, r3, r7
 800f232:	d004      	beq.n	800f23e <_dtoa_r+0x76e>
 800f234:	9904      	ldr	r1, [sp, #16]
 800f236:	4620      	mov	r0, r4
 800f238:	f000 fb96 	bl	800f968 <__pow5mult>
 800f23c:	9004      	str	r0, [sp, #16]
 800f23e:	2101      	movs	r1, #1
 800f240:	4620      	mov	r0, r4
 800f242:	f000 faf2 	bl	800f82a <__i2b>
 800f246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f248:	4607      	mov	r7, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	f000 81d0 	beq.w	800f5f0 <_dtoa_r+0xb20>
 800f250:	461a      	mov	r2, r3
 800f252:	4601      	mov	r1, r0
 800f254:	4620      	mov	r0, r4
 800f256:	f000 fb87 	bl	800f968 <__pow5mult>
 800f25a:	9b06      	ldr	r3, [sp, #24]
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	4607      	mov	r7, r0
 800f260:	dc40      	bgt.n	800f2e4 <_dtoa_r+0x814>
 800f262:	9b00      	ldr	r3, [sp, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d139      	bne.n	800f2dc <_dtoa_r+0x80c>
 800f268:	9b01      	ldr	r3, [sp, #4]
 800f26a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d136      	bne.n	800f2e0 <_dtoa_r+0x810>
 800f272:	9b01      	ldr	r3, [sp, #4]
 800f274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f278:	0d1b      	lsrs	r3, r3, #20
 800f27a:	051b      	lsls	r3, r3, #20
 800f27c:	b12b      	cbz	r3, 800f28a <_dtoa_r+0x7ba>
 800f27e:	9b05      	ldr	r3, [sp, #20]
 800f280:	3301      	adds	r3, #1
 800f282:	9305      	str	r3, [sp, #20]
 800f284:	f108 0801 	add.w	r8, r8, #1
 800f288:	2301      	movs	r3, #1
 800f28a:	9307      	str	r3, [sp, #28]
 800f28c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d12a      	bne.n	800f2e8 <_dtoa_r+0x818>
 800f292:	2001      	movs	r0, #1
 800f294:	e030      	b.n	800f2f8 <_dtoa_r+0x828>
 800f296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f298:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f29c:	e795      	b.n	800f1ca <_dtoa_r+0x6fa>
 800f29e:	9b07      	ldr	r3, [sp, #28]
 800f2a0:	f109 37ff 	add.w	r7, r9, #4294967295
 800f2a4:	42bb      	cmp	r3, r7
 800f2a6:	bfbf      	itttt	lt
 800f2a8:	9b07      	ldrlt	r3, [sp, #28]
 800f2aa:	9707      	strlt	r7, [sp, #28]
 800f2ac:	1afa      	sublt	r2, r7, r3
 800f2ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f2b0:	bfbb      	ittet	lt
 800f2b2:	189b      	addlt	r3, r3, r2
 800f2b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f2b6:	1bdf      	subge	r7, r3, r7
 800f2b8:	2700      	movlt	r7, #0
 800f2ba:	f1b9 0f00 	cmp.w	r9, #0
 800f2be:	bfb5      	itete	lt
 800f2c0:	9b05      	ldrlt	r3, [sp, #20]
 800f2c2:	9d05      	ldrge	r5, [sp, #20]
 800f2c4:	eba3 0509 	sublt.w	r5, r3, r9
 800f2c8:	464b      	movge	r3, r9
 800f2ca:	bfb8      	it	lt
 800f2cc:	2300      	movlt	r3, #0
 800f2ce:	e77e      	b.n	800f1ce <_dtoa_r+0x6fe>
 800f2d0:	9f07      	ldr	r7, [sp, #28]
 800f2d2:	9d05      	ldr	r5, [sp, #20]
 800f2d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f2d6:	e783      	b.n	800f1e0 <_dtoa_r+0x710>
 800f2d8:	9a07      	ldr	r2, [sp, #28]
 800f2da:	e7ab      	b.n	800f234 <_dtoa_r+0x764>
 800f2dc:	2300      	movs	r3, #0
 800f2de:	e7d4      	b.n	800f28a <_dtoa_r+0x7ba>
 800f2e0:	9b00      	ldr	r3, [sp, #0]
 800f2e2:	e7d2      	b.n	800f28a <_dtoa_r+0x7ba>
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	9307      	str	r3, [sp, #28]
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f2ee:	6918      	ldr	r0, [r3, #16]
 800f2f0:	f000 fa4d 	bl	800f78e <__hi0bits>
 800f2f4:	f1c0 0020 	rsb	r0, r0, #32
 800f2f8:	4440      	add	r0, r8
 800f2fa:	f010 001f 	ands.w	r0, r0, #31
 800f2fe:	d047      	beq.n	800f390 <_dtoa_r+0x8c0>
 800f300:	f1c0 0320 	rsb	r3, r0, #32
 800f304:	2b04      	cmp	r3, #4
 800f306:	dd3b      	ble.n	800f380 <_dtoa_r+0x8b0>
 800f308:	9b05      	ldr	r3, [sp, #20]
 800f30a:	f1c0 001c 	rsb	r0, r0, #28
 800f30e:	4403      	add	r3, r0
 800f310:	9305      	str	r3, [sp, #20]
 800f312:	4405      	add	r5, r0
 800f314:	4480      	add	r8, r0
 800f316:	9b05      	ldr	r3, [sp, #20]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	dd05      	ble.n	800f328 <_dtoa_r+0x858>
 800f31c:	461a      	mov	r2, r3
 800f31e:	9904      	ldr	r1, [sp, #16]
 800f320:	4620      	mov	r0, r4
 800f322:	f000 fb6f 	bl	800fa04 <__lshift>
 800f326:	9004      	str	r0, [sp, #16]
 800f328:	f1b8 0f00 	cmp.w	r8, #0
 800f32c:	dd05      	ble.n	800f33a <_dtoa_r+0x86a>
 800f32e:	4639      	mov	r1, r7
 800f330:	4642      	mov	r2, r8
 800f332:	4620      	mov	r0, r4
 800f334:	f000 fb66 	bl	800fa04 <__lshift>
 800f338:	4607      	mov	r7, r0
 800f33a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f33c:	b353      	cbz	r3, 800f394 <_dtoa_r+0x8c4>
 800f33e:	4639      	mov	r1, r7
 800f340:	9804      	ldr	r0, [sp, #16]
 800f342:	f000 fbb3 	bl	800faac <__mcmp>
 800f346:	2800      	cmp	r0, #0
 800f348:	da24      	bge.n	800f394 <_dtoa_r+0x8c4>
 800f34a:	2300      	movs	r3, #0
 800f34c:	220a      	movs	r2, #10
 800f34e:	9904      	ldr	r1, [sp, #16]
 800f350:	4620      	mov	r0, r4
 800f352:	f000 f9e1 	bl	800f718 <__multadd>
 800f356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f358:	9004      	str	r0, [sp, #16]
 800f35a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f35e:	2b00      	cmp	r3, #0
 800f360:	f000 814d 	beq.w	800f5fe <_dtoa_r+0xb2e>
 800f364:	2300      	movs	r3, #0
 800f366:	4631      	mov	r1, r6
 800f368:	220a      	movs	r2, #10
 800f36a:	4620      	mov	r0, r4
 800f36c:	f000 f9d4 	bl	800f718 <__multadd>
 800f370:	9b02      	ldr	r3, [sp, #8]
 800f372:	2b00      	cmp	r3, #0
 800f374:	4606      	mov	r6, r0
 800f376:	dc4f      	bgt.n	800f418 <_dtoa_r+0x948>
 800f378:	9b06      	ldr	r3, [sp, #24]
 800f37a:	2b02      	cmp	r3, #2
 800f37c:	dd4c      	ble.n	800f418 <_dtoa_r+0x948>
 800f37e:	e011      	b.n	800f3a4 <_dtoa_r+0x8d4>
 800f380:	d0c9      	beq.n	800f316 <_dtoa_r+0x846>
 800f382:	9a05      	ldr	r2, [sp, #20]
 800f384:	331c      	adds	r3, #28
 800f386:	441a      	add	r2, r3
 800f388:	9205      	str	r2, [sp, #20]
 800f38a:	441d      	add	r5, r3
 800f38c:	4498      	add	r8, r3
 800f38e:	e7c2      	b.n	800f316 <_dtoa_r+0x846>
 800f390:	4603      	mov	r3, r0
 800f392:	e7f6      	b.n	800f382 <_dtoa_r+0x8b2>
 800f394:	f1b9 0f00 	cmp.w	r9, #0
 800f398:	dc38      	bgt.n	800f40c <_dtoa_r+0x93c>
 800f39a:	9b06      	ldr	r3, [sp, #24]
 800f39c:	2b02      	cmp	r3, #2
 800f39e:	dd35      	ble.n	800f40c <_dtoa_r+0x93c>
 800f3a0:	f8cd 9008 	str.w	r9, [sp, #8]
 800f3a4:	9b02      	ldr	r3, [sp, #8]
 800f3a6:	b963      	cbnz	r3, 800f3c2 <_dtoa_r+0x8f2>
 800f3a8:	4639      	mov	r1, r7
 800f3aa:	2205      	movs	r2, #5
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	f000 f9b3 	bl	800f718 <__multadd>
 800f3b2:	4601      	mov	r1, r0
 800f3b4:	4607      	mov	r7, r0
 800f3b6:	9804      	ldr	r0, [sp, #16]
 800f3b8:	f000 fb78 	bl	800faac <__mcmp>
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	f73f adcc 	bgt.w	800ef5a <_dtoa_r+0x48a>
 800f3c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3c4:	465d      	mov	r5, fp
 800f3c6:	ea6f 0a03 	mvn.w	sl, r3
 800f3ca:	f04f 0900 	mov.w	r9, #0
 800f3ce:	4639      	mov	r1, r7
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f000 f98a 	bl	800f6ea <_Bfree>
 800f3d6:	2e00      	cmp	r6, #0
 800f3d8:	f43f aeb7 	beq.w	800f14a <_dtoa_r+0x67a>
 800f3dc:	f1b9 0f00 	cmp.w	r9, #0
 800f3e0:	d005      	beq.n	800f3ee <_dtoa_r+0x91e>
 800f3e2:	45b1      	cmp	r9, r6
 800f3e4:	d003      	beq.n	800f3ee <_dtoa_r+0x91e>
 800f3e6:	4649      	mov	r1, r9
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	f000 f97e 	bl	800f6ea <_Bfree>
 800f3ee:	4631      	mov	r1, r6
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	f000 f97a 	bl	800f6ea <_Bfree>
 800f3f6:	e6a8      	b.n	800f14a <_dtoa_r+0x67a>
 800f3f8:	2700      	movs	r7, #0
 800f3fa:	463e      	mov	r6, r7
 800f3fc:	e7e1      	b.n	800f3c2 <_dtoa_r+0x8f2>
 800f3fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f402:	463e      	mov	r6, r7
 800f404:	e5a9      	b.n	800ef5a <_dtoa_r+0x48a>
 800f406:	bf00      	nop
 800f408:	40240000 	.word	0x40240000
 800f40c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f40e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f412:	2b00      	cmp	r3, #0
 800f414:	f000 80fa 	beq.w	800f60c <_dtoa_r+0xb3c>
 800f418:	2d00      	cmp	r5, #0
 800f41a:	dd05      	ble.n	800f428 <_dtoa_r+0x958>
 800f41c:	4631      	mov	r1, r6
 800f41e:	462a      	mov	r2, r5
 800f420:	4620      	mov	r0, r4
 800f422:	f000 faef 	bl	800fa04 <__lshift>
 800f426:	4606      	mov	r6, r0
 800f428:	9b07      	ldr	r3, [sp, #28]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d04c      	beq.n	800f4c8 <_dtoa_r+0x9f8>
 800f42e:	6871      	ldr	r1, [r6, #4]
 800f430:	4620      	mov	r0, r4
 800f432:	f000 f926 	bl	800f682 <_Balloc>
 800f436:	6932      	ldr	r2, [r6, #16]
 800f438:	3202      	adds	r2, #2
 800f43a:	4605      	mov	r5, r0
 800f43c:	0092      	lsls	r2, r2, #2
 800f43e:	f106 010c 	add.w	r1, r6, #12
 800f442:	300c      	adds	r0, #12
 800f444:	f000 f912 	bl	800f66c <memcpy>
 800f448:	2201      	movs	r2, #1
 800f44a:	4629      	mov	r1, r5
 800f44c:	4620      	mov	r0, r4
 800f44e:	f000 fad9 	bl	800fa04 <__lshift>
 800f452:	9b00      	ldr	r3, [sp, #0]
 800f454:	f8cd b014 	str.w	fp, [sp, #20]
 800f458:	f003 0301 	and.w	r3, r3, #1
 800f45c:	46b1      	mov	r9, r6
 800f45e:	9307      	str	r3, [sp, #28]
 800f460:	4606      	mov	r6, r0
 800f462:	4639      	mov	r1, r7
 800f464:	9804      	ldr	r0, [sp, #16]
 800f466:	f7ff faa7 	bl	800e9b8 <quorem>
 800f46a:	4649      	mov	r1, r9
 800f46c:	4605      	mov	r5, r0
 800f46e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f472:	9804      	ldr	r0, [sp, #16]
 800f474:	f000 fb1a 	bl	800faac <__mcmp>
 800f478:	4632      	mov	r2, r6
 800f47a:	9000      	str	r0, [sp, #0]
 800f47c:	4639      	mov	r1, r7
 800f47e:	4620      	mov	r0, r4
 800f480:	f000 fb2e 	bl	800fae0 <__mdiff>
 800f484:	68c3      	ldr	r3, [r0, #12]
 800f486:	4602      	mov	r2, r0
 800f488:	bb03      	cbnz	r3, 800f4cc <_dtoa_r+0x9fc>
 800f48a:	4601      	mov	r1, r0
 800f48c:	9008      	str	r0, [sp, #32]
 800f48e:	9804      	ldr	r0, [sp, #16]
 800f490:	f000 fb0c 	bl	800faac <__mcmp>
 800f494:	9a08      	ldr	r2, [sp, #32]
 800f496:	4603      	mov	r3, r0
 800f498:	4611      	mov	r1, r2
 800f49a:	4620      	mov	r0, r4
 800f49c:	9308      	str	r3, [sp, #32]
 800f49e:	f000 f924 	bl	800f6ea <_Bfree>
 800f4a2:	9b08      	ldr	r3, [sp, #32]
 800f4a4:	b9a3      	cbnz	r3, 800f4d0 <_dtoa_r+0xa00>
 800f4a6:	9a06      	ldr	r2, [sp, #24]
 800f4a8:	b992      	cbnz	r2, 800f4d0 <_dtoa_r+0xa00>
 800f4aa:	9a07      	ldr	r2, [sp, #28]
 800f4ac:	b982      	cbnz	r2, 800f4d0 <_dtoa_r+0xa00>
 800f4ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f4b2:	d029      	beq.n	800f508 <_dtoa_r+0xa38>
 800f4b4:	9b00      	ldr	r3, [sp, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	dd01      	ble.n	800f4be <_dtoa_r+0x9ee>
 800f4ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f4be:	9b05      	ldr	r3, [sp, #20]
 800f4c0:	1c5d      	adds	r5, r3, #1
 800f4c2:	f883 8000 	strb.w	r8, [r3]
 800f4c6:	e782      	b.n	800f3ce <_dtoa_r+0x8fe>
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	e7c2      	b.n	800f452 <_dtoa_r+0x982>
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	e7e3      	b.n	800f498 <_dtoa_r+0x9c8>
 800f4d0:	9a00      	ldr	r2, [sp, #0]
 800f4d2:	2a00      	cmp	r2, #0
 800f4d4:	db04      	blt.n	800f4e0 <_dtoa_r+0xa10>
 800f4d6:	d125      	bne.n	800f524 <_dtoa_r+0xa54>
 800f4d8:	9a06      	ldr	r2, [sp, #24]
 800f4da:	bb1a      	cbnz	r2, 800f524 <_dtoa_r+0xa54>
 800f4dc:	9a07      	ldr	r2, [sp, #28]
 800f4de:	bb0a      	cbnz	r2, 800f524 <_dtoa_r+0xa54>
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	ddec      	ble.n	800f4be <_dtoa_r+0x9ee>
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	9904      	ldr	r1, [sp, #16]
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	f000 fa8b 	bl	800fa04 <__lshift>
 800f4ee:	4639      	mov	r1, r7
 800f4f0:	9004      	str	r0, [sp, #16]
 800f4f2:	f000 fadb 	bl	800faac <__mcmp>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	dc03      	bgt.n	800f502 <_dtoa_r+0xa32>
 800f4fa:	d1e0      	bne.n	800f4be <_dtoa_r+0x9ee>
 800f4fc:	f018 0f01 	tst.w	r8, #1
 800f500:	d0dd      	beq.n	800f4be <_dtoa_r+0x9ee>
 800f502:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f506:	d1d8      	bne.n	800f4ba <_dtoa_r+0x9ea>
 800f508:	9b05      	ldr	r3, [sp, #20]
 800f50a:	9a05      	ldr	r2, [sp, #20]
 800f50c:	1c5d      	adds	r5, r3, #1
 800f50e:	2339      	movs	r3, #57	; 0x39
 800f510:	7013      	strb	r3, [r2, #0]
 800f512:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f516:	2b39      	cmp	r3, #57	; 0x39
 800f518:	f105 32ff 	add.w	r2, r5, #4294967295
 800f51c:	d04f      	beq.n	800f5be <_dtoa_r+0xaee>
 800f51e:	3301      	adds	r3, #1
 800f520:	7013      	strb	r3, [r2, #0]
 800f522:	e754      	b.n	800f3ce <_dtoa_r+0x8fe>
 800f524:	9a05      	ldr	r2, [sp, #20]
 800f526:	2b00      	cmp	r3, #0
 800f528:	f102 0501 	add.w	r5, r2, #1
 800f52c:	dd06      	ble.n	800f53c <_dtoa_r+0xa6c>
 800f52e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f532:	d0e9      	beq.n	800f508 <_dtoa_r+0xa38>
 800f534:	f108 0801 	add.w	r8, r8, #1
 800f538:	9b05      	ldr	r3, [sp, #20]
 800f53a:	e7c2      	b.n	800f4c2 <_dtoa_r+0x9f2>
 800f53c:	9a02      	ldr	r2, [sp, #8]
 800f53e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f542:	eba5 030b 	sub.w	r3, r5, fp
 800f546:	4293      	cmp	r3, r2
 800f548:	d021      	beq.n	800f58e <_dtoa_r+0xabe>
 800f54a:	2300      	movs	r3, #0
 800f54c:	220a      	movs	r2, #10
 800f54e:	9904      	ldr	r1, [sp, #16]
 800f550:	4620      	mov	r0, r4
 800f552:	f000 f8e1 	bl	800f718 <__multadd>
 800f556:	45b1      	cmp	r9, r6
 800f558:	9004      	str	r0, [sp, #16]
 800f55a:	f04f 0300 	mov.w	r3, #0
 800f55e:	f04f 020a 	mov.w	r2, #10
 800f562:	4649      	mov	r1, r9
 800f564:	4620      	mov	r0, r4
 800f566:	d105      	bne.n	800f574 <_dtoa_r+0xaa4>
 800f568:	f000 f8d6 	bl	800f718 <__multadd>
 800f56c:	4681      	mov	r9, r0
 800f56e:	4606      	mov	r6, r0
 800f570:	9505      	str	r5, [sp, #20]
 800f572:	e776      	b.n	800f462 <_dtoa_r+0x992>
 800f574:	f000 f8d0 	bl	800f718 <__multadd>
 800f578:	4631      	mov	r1, r6
 800f57a:	4681      	mov	r9, r0
 800f57c:	2300      	movs	r3, #0
 800f57e:	220a      	movs	r2, #10
 800f580:	4620      	mov	r0, r4
 800f582:	f000 f8c9 	bl	800f718 <__multadd>
 800f586:	4606      	mov	r6, r0
 800f588:	e7f2      	b.n	800f570 <_dtoa_r+0xaa0>
 800f58a:	f04f 0900 	mov.w	r9, #0
 800f58e:	2201      	movs	r2, #1
 800f590:	9904      	ldr	r1, [sp, #16]
 800f592:	4620      	mov	r0, r4
 800f594:	f000 fa36 	bl	800fa04 <__lshift>
 800f598:	4639      	mov	r1, r7
 800f59a:	9004      	str	r0, [sp, #16]
 800f59c:	f000 fa86 	bl	800faac <__mcmp>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	dcb6      	bgt.n	800f512 <_dtoa_r+0xa42>
 800f5a4:	d102      	bne.n	800f5ac <_dtoa_r+0xadc>
 800f5a6:	f018 0f01 	tst.w	r8, #1
 800f5aa:	d1b2      	bne.n	800f512 <_dtoa_r+0xa42>
 800f5ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f5b0:	2b30      	cmp	r3, #48	; 0x30
 800f5b2:	f105 32ff 	add.w	r2, r5, #4294967295
 800f5b6:	f47f af0a 	bne.w	800f3ce <_dtoa_r+0x8fe>
 800f5ba:	4615      	mov	r5, r2
 800f5bc:	e7f6      	b.n	800f5ac <_dtoa_r+0xadc>
 800f5be:	4593      	cmp	fp, r2
 800f5c0:	d105      	bne.n	800f5ce <_dtoa_r+0xafe>
 800f5c2:	2331      	movs	r3, #49	; 0x31
 800f5c4:	f10a 0a01 	add.w	sl, sl, #1
 800f5c8:	f88b 3000 	strb.w	r3, [fp]
 800f5cc:	e6ff      	b.n	800f3ce <_dtoa_r+0x8fe>
 800f5ce:	4615      	mov	r5, r2
 800f5d0:	e79f      	b.n	800f512 <_dtoa_r+0xa42>
 800f5d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f638 <_dtoa_r+0xb68>
 800f5d6:	e007      	b.n	800f5e8 <_dtoa_r+0xb18>
 800f5d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5da:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f63c <_dtoa_r+0xb6c>
 800f5de:	b11b      	cbz	r3, 800f5e8 <_dtoa_r+0xb18>
 800f5e0:	f10b 0308 	add.w	r3, fp, #8
 800f5e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f5e6:	6013      	str	r3, [r2, #0]
 800f5e8:	4658      	mov	r0, fp
 800f5ea:	b017      	add	sp, #92	; 0x5c
 800f5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f0:	9b06      	ldr	r3, [sp, #24]
 800f5f2:	2b01      	cmp	r3, #1
 800f5f4:	f77f ae35 	ble.w	800f262 <_dtoa_r+0x792>
 800f5f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5fa:	9307      	str	r3, [sp, #28]
 800f5fc:	e649      	b.n	800f292 <_dtoa_r+0x7c2>
 800f5fe:	9b02      	ldr	r3, [sp, #8]
 800f600:	2b00      	cmp	r3, #0
 800f602:	dc03      	bgt.n	800f60c <_dtoa_r+0xb3c>
 800f604:	9b06      	ldr	r3, [sp, #24]
 800f606:	2b02      	cmp	r3, #2
 800f608:	f73f aecc 	bgt.w	800f3a4 <_dtoa_r+0x8d4>
 800f60c:	465d      	mov	r5, fp
 800f60e:	4639      	mov	r1, r7
 800f610:	9804      	ldr	r0, [sp, #16]
 800f612:	f7ff f9d1 	bl	800e9b8 <quorem>
 800f616:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f61a:	f805 8b01 	strb.w	r8, [r5], #1
 800f61e:	9a02      	ldr	r2, [sp, #8]
 800f620:	eba5 030b 	sub.w	r3, r5, fp
 800f624:	429a      	cmp	r2, r3
 800f626:	ddb0      	ble.n	800f58a <_dtoa_r+0xaba>
 800f628:	2300      	movs	r3, #0
 800f62a:	220a      	movs	r2, #10
 800f62c:	9904      	ldr	r1, [sp, #16]
 800f62e:	4620      	mov	r0, r4
 800f630:	f000 f872 	bl	800f718 <__multadd>
 800f634:	9004      	str	r0, [sp, #16]
 800f636:	e7ea      	b.n	800f60e <_dtoa_r+0xb3e>
 800f638:	080107fc 	.word	0x080107fc
 800f63c:	08010820 	.word	0x08010820

0800f640 <_localeconv_r>:
 800f640:	4b04      	ldr	r3, [pc, #16]	; (800f654 <_localeconv_r+0x14>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	6a18      	ldr	r0, [r3, #32]
 800f646:	4b04      	ldr	r3, [pc, #16]	; (800f658 <_localeconv_r+0x18>)
 800f648:	2800      	cmp	r0, #0
 800f64a:	bf08      	it	eq
 800f64c:	4618      	moveq	r0, r3
 800f64e:	30f0      	adds	r0, #240	; 0xf0
 800f650:	4770      	bx	lr
 800f652:	bf00      	nop
 800f654:	20000024 	.word	0x20000024
 800f658:	20000088 	.word	0x20000088

0800f65c <malloc>:
 800f65c:	4b02      	ldr	r3, [pc, #8]	; (800f668 <malloc+0xc>)
 800f65e:	4601      	mov	r1, r0
 800f660:	6818      	ldr	r0, [r3, #0]
 800f662:	f000 bb45 	b.w	800fcf0 <_malloc_r>
 800f666:	bf00      	nop
 800f668:	20000024 	.word	0x20000024

0800f66c <memcpy>:
 800f66c:	b510      	push	{r4, lr}
 800f66e:	1e43      	subs	r3, r0, #1
 800f670:	440a      	add	r2, r1
 800f672:	4291      	cmp	r1, r2
 800f674:	d100      	bne.n	800f678 <memcpy+0xc>
 800f676:	bd10      	pop	{r4, pc}
 800f678:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f67c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f680:	e7f7      	b.n	800f672 <memcpy+0x6>

0800f682 <_Balloc>:
 800f682:	b570      	push	{r4, r5, r6, lr}
 800f684:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f686:	4604      	mov	r4, r0
 800f688:	460e      	mov	r6, r1
 800f68a:	b93d      	cbnz	r5, 800f69c <_Balloc+0x1a>
 800f68c:	2010      	movs	r0, #16
 800f68e:	f7ff ffe5 	bl	800f65c <malloc>
 800f692:	6260      	str	r0, [r4, #36]	; 0x24
 800f694:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f698:	6005      	str	r5, [r0, #0]
 800f69a:	60c5      	str	r5, [r0, #12]
 800f69c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f69e:	68eb      	ldr	r3, [r5, #12]
 800f6a0:	b183      	cbz	r3, 800f6c4 <_Balloc+0x42>
 800f6a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f6aa:	b9b8      	cbnz	r0, 800f6dc <_Balloc+0x5a>
 800f6ac:	2101      	movs	r1, #1
 800f6ae:	fa01 f506 	lsl.w	r5, r1, r6
 800f6b2:	1d6a      	adds	r2, r5, #5
 800f6b4:	0092      	lsls	r2, r2, #2
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f000 fabe 	bl	800fc38 <_calloc_r>
 800f6bc:	b160      	cbz	r0, 800f6d8 <_Balloc+0x56>
 800f6be:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f6c2:	e00e      	b.n	800f6e2 <_Balloc+0x60>
 800f6c4:	2221      	movs	r2, #33	; 0x21
 800f6c6:	2104      	movs	r1, #4
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f000 fab5 	bl	800fc38 <_calloc_r>
 800f6ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6d0:	60e8      	str	r0, [r5, #12]
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d1e4      	bne.n	800f6a2 <_Balloc+0x20>
 800f6d8:	2000      	movs	r0, #0
 800f6da:	bd70      	pop	{r4, r5, r6, pc}
 800f6dc:	6802      	ldr	r2, [r0, #0]
 800f6de:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f6e8:	e7f7      	b.n	800f6da <_Balloc+0x58>

0800f6ea <_Bfree>:
 800f6ea:	b570      	push	{r4, r5, r6, lr}
 800f6ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f6ee:	4606      	mov	r6, r0
 800f6f0:	460d      	mov	r5, r1
 800f6f2:	b93c      	cbnz	r4, 800f704 <_Bfree+0x1a>
 800f6f4:	2010      	movs	r0, #16
 800f6f6:	f7ff ffb1 	bl	800f65c <malloc>
 800f6fa:	6270      	str	r0, [r6, #36]	; 0x24
 800f6fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f700:	6004      	str	r4, [r0, #0]
 800f702:	60c4      	str	r4, [r0, #12]
 800f704:	b13d      	cbz	r5, 800f716 <_Bfree+0x2c>
 800f706:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f708:	686a      	ldr	r2, [r5, #4]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f710:	6029      	str	r1, [r5, #0]
 800f712:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f716:	bd70      	pop	{r4, r5, r6, pc}

0800f718 <__multadd>:
 800f718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f71c:	690d      	ldr	r5, [r1, #16]
 800f71e:	461f      	mov	r7, r3
 800f720:	4606      	mov	r6, r0
 800f722:	460c      	mov	r4, r1
 800f724:	f101 0c14 	add.w	ip, r1, #20
 800f728:	2300      	movs	r3, #0
 800f72a:	f8dc 0000 	ldr.w	r0, [ip]
 800f72e:	b281      	uxth	r1, r0
 800f730:	fb02 7101 	mla	r1, r2, r1, r7
 800f734:	0c0f      	lsrs	r7, r1, #16
 800f736:	0c00      	lsrs	r0, r0, #16
 800f738:	fb02 7000 	mla	r0, r2, r0, r7
 800f73c:	b289      	uxth	r1, r1
 800f73e:	3301      	adds	r3, #1
 800f740:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f744:	429d      	cmp	r5, r3
 800f746:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f74a:	f84c 1b04 	str.w	r1, [ip], #4
 800f74e:	dcec      	bgt.n	800f72a <__multadd+0x12>
 800f750:	b1d7      	cbz	r7, 800f788 <__multadd+0x70>
 800f752:	68a3      	ldr	r3, [r4, #8]
 800f754:	42ab      	cmp	r3, r5
 800f756:	dc12      	bgt.n	800f77e <__multadd+0x66>
 800f758:	6861      	ldr	r1, [r4, #4]
 800f75a:	4630      	mov	r0, r6
 800f75c:	3101      	adds	r1, #1
 800f75e:	f7ff ff90 	bl	800f682 <_Balloc>
 800f762:	6922      	ldr	r2, [r4, #16]
 800f764:	3202      	adds	r2, #2
 800f766:	f104 010c 	add.w	r1, r4, #12
 800f76a:	4680      	mov	r8, r0
 800f76c:	0092      	lsls	r2, r2, #2
 800f76e:	300c      	adds	r0, #12
 800f770:	f7ff ff7c 	bl	800f66c <memcpy>
 800f774:	4621      	mov	r1, r4
 800f776:	4630      	mov	r0, r6
 800f778:	f7ff ffb7 	bl	800f6ea <_Bfree>
 800f77c:	4644      	mov	r4, r8
 800f77e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f782:	3501      	adds	r5, #1
 800f784:	615f      	str	r7, [r3, #20]
 800f786:	6125      	str	r5, [r4, #16]
 800f788:	4620      	mov	r0, r4
 800f78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f78e <__hi0bits>:
 800f78e:	0c02      	lsrs	r2, r0, #16
 800f790:	0412      	lsls	r2, r2, #16
 800f792:	4603      	mov	r3, r0
 800f794:	b9b2      	cbnz	r2, 800f7c4 <__hi0bits+0x36>
 800f796:	0403      	lsls	r3, r0, #16
 800f798:	2010      	movs	r0, #16
 800f79a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f79e:	bf04      	itt	eq
 800f7a0:	021b      	lsleq	r3, r3, #8
 800f7a2:	3008      	addeq	r0, #8
 800f7a4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f7a8:	bf04      	itt	eq
 800f7aa:	011b      	lsleq	r3, r3, #4
 800f7ac:	3004      	addeq	r0, #4
 800f7ae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f7b2:	bf04      	itt	eq
 800f7b4:	009b      	lsleq	r3, r3, #2
 800f7b6:	3002      	addeq	r0, #2
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	db06      	blt.n	800f7ca <__hi0bits+0x3c>
 800f7bc:	005b      	lsls	r3, r3, #1
 800f7be:	d503      	bpl.n	800f7c8 <__hi0bits+0x3a>
 800f7c0:	3001      	adds	r0, #1
 800f7c2:	4770      	bx	lr
 800f7c4:	2000      	movs	r0, #0
 800f7c6:	e7e8      	b.n	800f79a <__hi0bits+0xc>
 800f7c8:	2020      	movs	r0, #32
 800f7ca:	4770      	bx	lr

0800f7cc <__lo0bits>:
 800f7cc:	6803      	ldr	r3, [r0, #0]
 800f7ce:	f013 0207 	ands.w	r2, r3, #7
 800f7d2:	4601      	mov	r1, r0
 800f7d4:	d00b      	beq.n	800f7ee <__lo0bits+0x22>
 800f7d6:	07da      	lsls	r2, r3, #31
 800f7d8:	d423      	bmi.n	800f822 <__lo0bits+0x56>
 800f7da:	0798      	lsls	r0, r3, #30
 800f7dc:	bf49      	itett	mi
 800f7de:	085b      	lsrmi	r3, r3, #1
 800f7e0:	089b      	lsrpl	r3, r3, #2
 800f7e2:	2001      	movmi	r0, #1
 800f7e4:	600b      	strmi	r3, [r1, #0]
 800f7e6:	bf5c      	itt	pl
 800f7e8:	600b      	strpl	r3, [r1, #0]
 800f7ea:	2002      	movpl	r0, #2
 800f7ec:	4770      	bx	lr
 800f7ee:	b298      	uxth	r0, r3
 800f7f0:	b9a8      	cbnz	r0, 800f81e <__lo0bits+0x52>
 800f7f2:	0c1b      	lsrs	r3, r3, #16
 800f7f4:	2010      	movs	r0, #16
 800f7f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f7fa:	bf04      	itt	eq
 800f7fc:	0a1b      	lsreq	r3, r3, #8
 800f7fe:	3008      	addeq	r0, #8
 800f800:	071a      	lsls	r2, r3, #28
 800f802:	bf04      	itt	eq
 800f804:	091b      	lsreq	r3, r3, #4
 800f806:	3004      	addeq	r0, #4
 800f808:	079a      	lsls	r2, r3, #30
 800f80a:	bf04      	itt	eq
 800f80c:	089b      	lsreq	r3, r3, #2
 800f80e:	3002      	addeq	r0, #2
 800f810:	07da      	lsls	r2, r3, #31
 800f812:	d402      	bmi.n	800f81a <__lo0bits+0x4e>
 800f814:	085b      	lsrs	r3, r3, #1
 800f816:	d006      	beq.n	800f826 <__lo0bits+0x5a>
 800f818:	3001      	adds	r0, #1
 800f81a:	600b      	str	r3, [r1, #0]
 800f81c:	4770      	bx	lr
 800f81e:	4610      	mov	r0, r2
 800f820:	e7e9      	b.n	800f7f6 <__lo0bits+0x2a>
 800f822:	2000      	movs	r0, #0
 800f824:	4770      	bx	lr
 800f826:	2020      	movs	r0, #32
 800f828:	4770      	bx	lr

0800f82a <__i2b>:
 800f82a:	b510      	push	{r4, lr}
 800f82c:	460c      	mov	r4, r1
 800f82e:	2101      	movs	r1, #1
 800f830:	f7ff ff27 	bl	800f682 <_Balloc>
 800f834:	2201      	movs	r2, #1
 800f836:	6144      	str	r4, [r0, #20]
 800f838:	6102      	str	r2, [r0, #16]
 800f83a:	bd10      	pop	{r4, pc}

0800f83c <__multiply>:
 800f83c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f840:	4614      	mov	r4, r2
 800f842:	690a      	ldr	r2, [r1, #16]
 800f844:	6923      	ldr	r3, [r4, #16]
 800f846:	429a      	cmp	r2, r3
 800f848:	bfb8      	it	lt
 800f84a:	460b      	movlt	r3, r1
 800f84c:	4688      	mov	r8, r1
 800f84e:	bfbc      	itt	lt
 800f850:	46a0      	movlt	r8, r4
 800f852:	461c      	movlt	r4, r3
 800f854:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f858:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f85c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f860:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f864:	eb07 0609 	add.w	r6, r7, r9
 800f868:	42b3      	cmp	r3, r6
 800f86a:	bfb8      	it	lt
 800f86c:	3101      	addlt	r1, #1
 800f86e:	f7ff ff08 	bl	800f682 <_Balloc>
 800f872:	f100 0514 	add.w	r5, r0, #20
 800f876:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f87a:	462b      	mov	r3, r5
 800f87c:	2200      	movs	r2, #0
 800f87e:	4573      	cmp	r3, lr
 800f880:	d316      	bcc.n	800f8b0 <__multiply+0x74>
 800f882:	f104 0214 	add.w	r2, r4, #20
 800f886:	f108 0114 	add.w	r1, r8, #20
 800f88a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f88e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f892:	9300      	str	r3, [sp, #0]
 800f894:	9b00      	ldr	r3, [sp, #0]
 800f896:	9201      	str	r2, [sp, #4]
 800f898:	4293      	cmp	r3, r2
 800f89a:	d80c      	bhi.n	800f8b6 <__multiply+0x7a>
 800f89c:	2e00      	cmp	r6, #0
 800f89e:	dd03      	ble.n	800f8a8 <__multiply+0x6c>
 800f8a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d05d      	beq.n	800f964 <__multiply+0x128>
 800f8a8:	6106      	str	r6, [r0, #16]
 800f8aa:	b003      	add	sp, #12
 800f8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b0:	f843 2b04 	str.w	r2, [r3], #4
 800f8b4:	e7e3      	b.n	800f87e <__multiply+0x42>
 800f8b6:	f8b2 b000 	ldrh.w	fp, [r2]
 800f8ba:	f1bb 0f00 	cmp.w	fp, #0
 800f8be:	d023      	beq.n	800f908 <__multiply+0xcc>
 800f8c0:	4689      	mov	r9, r1
 800f8c2:	46ac      	mov	ip, r5
 800f8c4:	f04f 0800 	mov.w	r8, #0
 800f8c8:	f859 4b04 	ldr.w	r4, [r9], #4
 800f8cc:	f8dc a000 	ldr.w	sl, [ip]
 800f8d0:	b2a3      	uxth	r3, r4
 800f8d2:	fa1f fa8a 	uxth.w	sl, sl
 800f8d6:	fb0b a303 	mla	r3, fp, r3, sl
 800f8da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f8de:	f8dc 4000 	ldr.w	r4, [ip]
 800f8e2:	4443      	add	r3, r8
 800f8e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f8e8:	fb0b 840a 	mla	r4, fp, sl, r8
 800f8ec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f8f0:	46e2      	mov	sl, ip
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f8f8:	454f      	cmp	r7, r9
 800f8fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f8fe:	f84a 3b04 	str.w	r3, [sl], #4
 800f902:	d82b      	bhi.n	800f95c <__multiply+0x120>
 800f904:	f8cc 8004 	str.w	r8, [ip, #4]
 800f908:	9b01      	ldr	r3, [sp, #4]
 800f90a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f90e:	3204      	adds	r2, #4
 800f910:	f1ba 0f00 	cmp.w	sl, #0
 800f914:	d020      	beq.n	800f958 <__multiply+0x11c>
 800f916:	682b      	ldr	r3, [r5, #0]
 800f918:	4689      	mov	r9, r1
 800f91a:	46a8      	mov	r8, r5
 800f91c:	f04f 0b00 	mov.w	fp, #0
 800f920:	f8b9 c000 	ldrh.w	ip, [r9]
 800f924:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f928:	fb0a 440c 	mla	r4, sl, ip, r4
 800f92c:	445c      	add	r4, fp
 800f92e:	46c4      	mov	ip, r8
 800f930:	b29b      	uxth	r3, r3
 800f932:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f936:	f84c 3b04 	str.w	r3, [ip], #4
 800f93a:	f859 3b04 	ldr.w	r3, [r9], #4
 800f93e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f942:	0c1b      	lsrs	r3, r3, #16
 800f944:	fb0a b303 	mla	r3, sl, r3, fp
 800f948:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f94c:	454f      	cmp	r7, r9
 800f94e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f952:	d805      	bhi.n	800f960 <__multiply+0x124>
 800f954:	f8c8 3004 	str.w	r3, [r8, #4]
 800f958:	3504      	adds	r5, #4
 800f95a:	e79b      	b.n	800f894 <__multiply+0x58>
 800f95c:	46d4      	mov	ip, sl
 800f95e:	e7b3      	b.n	800f8c8 <__multiply+0x8c>
 800f960:	46e0      	mov	r8, ip
 800f962:	e7dd      	b.n	800f920 <__multiply+0xe4>
 800f964:	3e01      	subs	r6, #1
 800f966:	e799      	b.n	800f89c <__multiply+0x60>

0800f968 <__pow5mult>:
 800f968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f96c:	4615      	mov	r5, r2
 800f96e:	f012 0203 	ands.w	r2, r2, #3
 800f972:	4606      	mov	r6, r0
 800f974:	460f      	mov	r7, r1
 800f976:	d007      	beq.n	800f988 <__pow5mult+0x20>
 800f978:	3a01      	subs	r2, #1
 800f97a:	4c21      	ldr	r4, [pc, #132]	; (800fa00 <__pow5mult+0x98>)
 800f97c:	2300      	movs	r3, #0
 800f97e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f982:	f7ff fec9 	bl	800f718 <__multadd>
 800f986:	4607      	mov	r7, r0
 800f988:	10ad      	asrs	r5, r5, #2
 800f98a:	d035      	beq.n	800f9f8 <__pow5mult+0x90>
 800f98c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f98e:	b93c      	cbnz	r4, 800f9a0 <__pow5mult+0x38>
 800f990:	2010      	movs	r0, #16
 800f992:	f7ff fe63 	bl	800f65c <malloc>
 800f996:	6270      	str	r0, [r6, #36]	; 0x24
 800f998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f99c:	6004      	str	r4, [r0, #0]
 800f99e:	60c4      	str	r4, [r0, #12]
 800f9a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f9a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f9a8:	b94c      	cbnz	r4, 800f9be <__pow5mult+0x56>
 800f9aa:	f240 2171 	movw	r1, #625	; 0x271
 800f9ae:	4630      	mov	r0, r6
 800f9b0:	f7ff ff3b 	bl	800f82a <__i2b>
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f9ba:	4604      	mov	r4, r0
 800f9bc:	6003      	str	r3, [r0, #0]
 800f9be:	f04f 0800 	mov.w	r8, #0
 800f9c2:	07eb      	lsls	r3, r5, #31
 800f9c4:	d50a      	bpl.n	800f9dc <__pow5mult+0x74>
 800f9c6:	4639      	mov	r1, r7
 800f9c8:	4622      	mov	r2, r4
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	f7ff ff36 	bl	800f83c <__multiply>
 800f9d0:	4639      	mov	r1, r7
 800f9d2:	4681      	mov	r9, r0
 800f9d4:	4630      	mov	r0, r6
 800f9d6:	f7ff fe88 	bl	800f6ea <_Bfree>
 800f9da:	464f      	mov	r7, r9
 800f9dc:	106d      	asrs	r5, r5, #1
 800f9de:	d00b      	beq.n	800f9f8 <__pow5mult+0x90>
 800f9e0:	6820      	ldr	r0, [r4, #0]
 800f9e2:	b938      	cbnz	r0, 800f9f4 <__pow5mult+0x8c>
 800f9e4:	4622      	mov	r2, r4
 800f9e6:	4621      	mov	r1, r4
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f7ff ff27 	bl	800f83c <__multiply>
 800f9ee:	6020      	str	r0, [r4, #0]
 800f9f0:	f8c0 8000 	str.w	r8, [r0]
 800f9f4:	4604      	mov	r4, r0
 800f9f6:	e7e4      	b.n	800f9c2 <__pow5mult+0x5a>
 800f9f8:	4638      	mov	r0, r7
 800f9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9fe:	bf00      	nop
 800fa00:	08010920 	.word	0x08010920

0800fa04 <__lshift>:
 800fa04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa08:	460c      	mov	r4, r1
 800fa0a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa0e:	6923      	ldr	r3, [r4, #16]
 800fa10:	6849      	ldr	r1, [r1, #4]
 800fa12:	eb0a 0903 	add.w	r9, sl, r3
 800fa16:	68a3      	ldr	r3, [r4, #8]
 800fa18:	4607      	mov	r7, r0
 800fa1a:	4616      	mov	r6, r2
 800fa1c:	f109 0501 	add.w	r5, r9, #1
 800fa20:	42ab      	cmp	r3, r5
 800fa22:	db32      	blt.n	800fa8a <__lshift+0x86>
 800fa24:	4638      	mov	r0, r7
 800fa26:	f7ff fe2c 	bl	800f682 <_Balloc>
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	4680      	mov	r8, r0
 800fa2e:	f100 0114 	add.w	r1, r0, #20
 800fa32:	461a      	mov	r2, r3
 800fa34:	4553      	cmp	r3, sl
 800fa36:	db2b      	blt.n	800fa90 <__lshift+0x8c>
 800fa38:	6920      	ldr	r0, [r4, #16]
 800fa3a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa3e:	f104 0314 	add.w	r3, r4, #20
 800fa42:	f016 021f 	ands.w	r2, r6, #31
 800fa46:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa4a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fa4e:	d025      	beq.n	800fa9c <__lshift+0x98>
 800fa50:	f1c2 0e20 	rsb	lr, r2, #32
 800fa54:	2000      	movs	r0, #0
 800fa56:	681e      	ldr	r6, [r3, #0]
 800fa58:	468a      	mov	sl, r1
 800fa5a:	4096      	lsls	r6, r2
 800fa5c:	4330      	orrs	r0, r6
 800fa5e:	f84a 0b04 	str.w	r0, [sl], #4
 800fa62:	f853 0b04 	ldr.w	r0, [r3], #4
 800fa66:	459c      	cmp	ip, r3
 800fa68:	fa20 f00e 	lsr.w	r0, r0, lr
 800fa6c:	d814      	bhi.n	800fa98 <__lshift+0x94>
 800fa6e:	6048      	str	r0, [r1, #4]
 800fa70:	b108      	cbz	r0, 800fa76 <__lshift+0x72>
 800fa72:	f109 0502 	add.w	r5, r9, #2
 800fa76:	3d01      	subs	r5, #1
 800fa78:	4638      	mov	r0, r7
 800fa7a:	f8c8 5010 	str.w	r5, [r8, #16]
 800fa7e:	4621      	mov	r1, r4
 800fa80:	f7ff fe33 	bl	800f6ea <_Bfree>
 800fa84:	4640      	mov	r0, r8
 800fa86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa8a:	3101      	adds	r1, #1
 800fa8c:	005b      	lsls	r3, r3, #1
 800fa8e:	e7c7      	b.n	800fa20 <__lshift+0x1c>
 800fa90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fa94:	3301      	adds	r3, #1
 800fa96:	e7cd      	b.n	800fa34 <__lshift+0x30>
 800fa98:	4651      	mov	r1, sl
 800fa9a:	e7dc      	b.n	800fa56 <__lshift+0x52>
 800fa9c:	3904      	subs	r1, #4
 800fa9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800faa2:	f841 2f04 	str.w	r2, [r1, #4]!
 800faa6:	459c      	cmp	ip, r3
 800faa8:	d8f9      	bhi.n	800fa9e <__lshift+0x9a>
 800faaa:	e7e4      	b.n	800fa76 <__lshift+0x72>

0800faac <__mcmp>:
 800faac:	6903      	ldr	r3, [r0, #16]
 800faae:	690a      	ldr	r2, [r1, #16]
 800fab0:	1a9b      	subs	r3, r3, r2
 800fab2:	b530      	push	{r4, r5, lr}
 800fab4:	d10c      	bne.n	800fad0 <__mcmp+0x24>
 800fab6:	0092      	lsls	r2, r2, #2
 800fab8:	3014      	adds	r0, #20
 800faba:	3114      	adds	r1, #20
 800fabc:	1884      	adds	r4, r0, r2
 800fabe:	4411      	add	r1, r2
 800fac0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fac4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fac8:	4295      	cmp	r5, r2
 800faca:	d003      	beq.n	800fad4 <__mcmp+0x28>
 800facc:	d305      	bcc.n	800fada <__mcmp+0x2e>
 800face:	2301      	movs	r3, #1
 800fad0:	4618      	mov	r0, r3
 800fad2:	bd30      	pop	{r4, r5, pc}
 800fad4:	42a0      	cmp	r0, r4
 800fad6:	d3f3      	bcc.n	800fac0 <__mcmp+0x14>
 800fad8:	e7fa      	b.n	800fad0 <__mcmp+0x24>
 800fada:	f04f 33ff 	mov.w	r3, #4294967295
 800fade:	e7f7      	b.n	800fad0 <__mcmp+0x24>

0800fae0 <__mdiff>:
 800fae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fae4:	460d      	mov	r5, r1
 800fae6:	4607      	mov	r7, r0
 800fae8:	4611      	mov	r1, r2
 800faea:	4628      	mov	r0, r5
 800faec:	4614      	mov	r4, r2
 800faee:	f7ff ffdd 	bl	800faac <__mcmp>
 800faf2:	1e06      	subs	r6, r0, #0
 800faf4:	d108      	bne.n	800fb08 <__mdiff+0x28>
 800faf6:	4631      	mov	r1, r6
 800faf8:	4638      	mov	r0, r7
 800fafa:	f7ff fdc2 	bl	800f682 <_Balloc>
 800fafe:	2301      	movs	r3, #1
 800fb00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb08:	bfa4      	itt	ge
 800fb0a:	4623      	movge	r3, r4
 800fb0c:	462c      	movge	r4, r5
 800fb0e:	4638      	mov	r0, r7
 800fb10:	6861      	ldr	r1, [r4, #4]
 800fb12:	bfa6      	itte	ge
 800fb14:	461d      	movge	r5, r3
 800fb16:	2600      	movge	r6, #0
 800fb18:	2601      	movlt	r6, #1
 800fb1a:	f7ff fdb2 	bl	800f682 <_Balloc>
 800fb1e:	692b      	ldr	r3, [r5, #16]
 800fb20:	60c6      	str	r6, [r0, #12]
 800fb22:	6926      	ldr	r6, [r4, #16]
 800fb24:	f105 0914 	add.w	r9, r5, #20
 800fb28:	f104 0214 	add.w	r2, r4, #20
 800fb2c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fb30:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fb34:	f100 0514 	add.w	r5, r0, #20
 800fb38:	f04f 0e00 	mov.w	lr, #0
 800fb3c:	f852 ab04 	ldr.w	sl, [r2], #4
 800fb40:	f859 4b04 	ldr.w	r4, [r9], #4
 800fb44:	fa1e f18a 	uxtah	r1, lr, sl
 800fb48:	b2a3      	uxth	r3, r4
 800fb4a:	1ac9      	subs	r1, r1, r3
 800fb4c:	0c23      	lsrs	r3, r4, #16
 800fb4e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fb52:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fb56:	b289      	uxth	r1, r1
 800fb58:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fb5c:	45c8      	cmp	r8, r9
 800fb5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fb62:	4694      	mov	ip, r2
 800fb64:	f845 3b04 	str.w	r3, [r5], #4
 800fb68:	d8e8      	bhi.n	800fb3c <__mdiff+0x5c>
 800fb6a:	45bc      	cmp	ip, r7
 800fb6c:	d304      	bcc.n	800fb78 <__mdiff+0x98>
 800fb6e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fb72:	b183      	cbz	r3, 800fb96 <__mdiff+0xb6>
 800fb74:	6106      	str	r6, [r0, #16]
 800fb76:	e7c5      	b.n	800fb04 <__mdiff+0x24>
 800fb78:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fb7c:	fa1e f381 	uxtah	r3, lr, r1
 800fb80:	141a      	asrs	r2, r3, #16
 800fb82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fb86:	b29b      	uxth	r3, r3
 800fb88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb8c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800fb90:	f845 3b04 	str.w	r3, [r5], #4
 800fb94:	e7e9      	b.n	800fb6a <__mdiff+0x8a>
 800fb96:	3e01      	subs	r6, #1
 800fb98:	e7e9      	b.n	800fb6e <__mdiff+0x8e>

0800fb9a <__d2b>:
 800fb9a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fb9e:	460e      	mov	r6, r1
 800fba0:	2101      	movs	r1, #1
 800fba2:	ec59 8b10 	vmov	r8, r9, d0
 800fba6:	4615      	mov	r5, r2
 800fba8:	f7ff fd6b 	bl	800f682 <_Balloc>
 800fbac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fbb0:	4607      	mov	r7, r0
 800fbb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fbb6:	bb34      	cbnz	r4, 800fc06 <__d2b+0x6c>
 800fbb8:	9301      	str	r3, [sp, #4]
 800fbba:	f1b8 0300 	subs.w	r3, r8, #0
 800fbbe:	d027      	beq.n	800fc10 <__d2b+0x76>
 800fbc0:	a802      	add	r0, sp, #8
 800fbc2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fbc6:	f7ff fe01 	bl	800f7cc <__lo0bits>
 800fbca:	9900      	ldr	r1, [sp, #0]
 800fbcc:	b1f0      	cbz	r0, 800fc0c <__d2b+0x72>
 800fbce:	9a01      	ldr	r2, [sp, #4]
 800fbd0:	f1c0 0320 	rsb	r3, r0, #32
 800fbd4:	fa02 f303 	lsl.w	r3, r2, r3
 800fbd8:	430b      	orrs	r3, r1
 800fbda:	40c2      	lsrs	r2, r0
 800fbdc:	617b      	str	r3, [r7, #20]
 800fbde:	9201      	str	r2, [sp, #4]
 800fbe0:	9b01      	ldr	r3, [sp, #4]
 800fbe2:	61bb      	str	r3, [r7, #24]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	bf14      	ite	ne
 800fbe8:	2102      	movne	r1, #2
 800fbea:	2101      	moveq	r1, #1
 800fbec:	6139      	str	r1, [r7, #16]
 800fbee:	b1c4      	cbz	r4, 800fc22 <__d2b+0x88>
 800fbf0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fbf4:	4404      	add	r4, r0
 800fbf6:	6034      	str	r4, [r6, #0]
 800fbf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fbfc:	6028      	str	r0, [r5, #0]
 800fbfe:	4638      	mov	r0, r7
 800fc00:	b003      	add	sp, #12
 800fc02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc0a:	e7d5      	b.n	800fbb8 <__d2b+0x1e>
 800fc0c:	6179      	str	r1, [r7, #20]
 800fc0e:	e7e7      	b.n	800fbe0 <__d2b+0x46>
 800fc10:	a801      	add	r0, sp, #4
 800fc12:	f7ff fddb 	bl	800f7cc <__lo0bits>
 800fc16:	9b01      	ldr	r3, [sp, #4]
 800fc18:	617b      	str	r3, [r7, #20]
 800fc1a:	2101      	movs	r1, #1
 800fc1c:	6139      	str	r1, [r7, #16]
 800fc1e:	3020      	adds	r0, #32
 800fc20:	e7e5      	b.n	800fbee <__d2b+0x54>
 800fc22:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fc26:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc2a:	6030      	str	r0, [r6, #0]
 800fc2c:	6918      	ldr	r0, [r3, #16]
 800fc2e:	f7ff fdae 	bl	800f78e <__hi0bits>
 800fc32:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fc36:	e7e1      	b.n	800fbfc <__d2b+0x62>

0800fc38 <_calloc_r>:
 800fc38:	b538      	push	{r3, r4, r5, lr}
 800fc3a:	fb02 f401 	mul.w	r4, r2, r1
 800fc3e:	4621      	mov	r1, r4
 800fc40:	f000 f856 	bl	800fcf0 <_malloc_r>
 800fc44:	4605      	mov	r5, r0
 800fc46:	b118      	cbz	r0, 800fc50 <_calloc_r+0x18>
 800fc48:	4622      	mov	r2, r4
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	f7fe fa30 	bl	800e0b0 <memset>
 800fc50:	4628      	mov	r0, r5
 800fc52:	bd38      	pop	{r3, r4, r5, pc}

0800fc54 <_free_r>:
 800fc54:	b538      	push	{r3, r4, r5, lr}
 800fc56:	4605      	mov	r5, r0
 800fc58:	2900      	cmp	r1, #0
 800fc5a:	d045      	beq.n	800fce8 <_free_r+0x94>
 800fc5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc60:	1f0c      	subs	r4, r1, #4
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	bfb8      	it	lt
 800fc66:	18e4      	addlt	r4, r4, r3
 800fc68:	f000 fa29 	bl	80100be <__malloc_lock>
 800fc6c:	4a1f      	ldr	r2, [pc, #124]	; (800fcec <_free_r+0x98>)
 800fc6e:	6813      	ldr	r3, [r2, #0]
 800fc70:	4610      	mov	r0, r2
 800fc72:	b933      	cbnz	r3, 800fc82 <_free_r+0x2e>
 800fc74:	6063      	str	r3, [r4, #4]
 800fc76:	6014      	str	r4, [r2, #0]
 800fc78:	4628      	mov	r0, r5
 800fc7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc7e:	f000 ba1f 	b.w	80100c0 <__malloc_unlock>
 800fc82:	42a3      	cmp	r3, r4
 800fc84:	d90c      	bls.n	800fca0 <_free_r+0x4c>
 800fc86:	6821      	ldr	r1, [r4, #0]
 800fc88:	1862      	adds	r2, r4, r1
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	bf04      	itt	eq
 800fc8e:	681a      	ldreq	r2, [r3, #0]
 800fc90:	685b      	ldreq	r3, [r3, #4]
 800fc92:	6063      	str	r3, [r4, #4]
 800fc94:	bf04      	itt	eq
 800fc96:	1852      	addeq	r2, r2, r1
 800fc98:	6022      	streq	r2, [r4, #0]
 800fc9a:	6004      	str	r4, [r0, #0]
 800fc9c:	e7ec      	b.n	800fc78 <_free_r+0x24>
 800fc9e:	4613      	mov	r3, r2
 800fca0:	685a      	ldr	r2, [r3, #4]
 800fca2:	b10a      	cbz	r2, 800fca8 <_free_r+0x54>
 800fca4:	42a2      	cmp	r2, r4
 800fca6:	d9fa      	bls.n	800fc9e <_free_r+0x4a>
 800fca8:	6819      	ldr	r1, [r3, #0]
 800fcaa:	1858      	adds	r0, r3, r1
 800fcac:	42a0      	cmp	r0, r4
 800fcae:	d10b      	bne.n	800fcc8 <_free_r+0x74>
 800fcb0:	6820      	ldr	r0, [r4, #0]
 800fcb2:	4401      	add	r1, r0
 800fcb4:	1858      	adds	r0, r3, r1
 800fcb6:	4282      	cmp	r2, r0
 800fcb8:	6019      	str	r1, [r3, #0]
 800fcba:	d1dd      	bne.n	800fc78 <_free_r+0x24>
 800fcbc:	6810      	ldr	r0, [r2, #0]
 800fcbe:	6852      	ldr	r2, [r2, #4]
 800fcc0:	605a      	str	r2, [r3, #4]
 800fcc2:	4401      	add	r1, r0
 800fcc4:	6019      	str	r1, [r3, #0]
 800fcc6:	e7d7      	b.n	800fc78 <_free_r+0x24>
 800fcc8:	d902      	bls.n	800fcd0 <_free_r+0x7c>
 800fcca:	230c      	movs	r3, #12
 800fccc:	602b      	str	r3, [r5, #0]
 800fcce:	e7d3      	b.n	800fc78 <_free_r+0x24>
 800fcd0:	6820      	ldr	r0, [r4, #0]
 800fcd2:	1821      	adds	r1, r4, r0
 800fcd4:	428a      	cmp	r2, r1
 800fcd6:	bf04      	itt	eq
 800fcd8:	6811      	ldreq	r1, [r2, #0]
 800fcda:	6852      	ldreq	r2, [r2, #4]
 800fcdc:	6062      	str	r2, [r4, #4]
 800fcde:	bf04      	itt	eq
 800fce0:	1809      	addeq	r1, r1, r0
 800fce2:	6021      	streq	r1, [r4, #0]
 800fce4:	605c      	str	r4, [r3, #4]
 800fce6:	e7c7      	b.n	800fc78 <_free_r+0x24>
 800fce8:	bd38      	pop	{r3, r4, r5, pc}
 800fcea:	bf00      	nop
 800fcec:	20000468 	.word	0x20000468

0800fcf0 <_malloc_r>:
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	1ccd      	adds	r5, r1, #3
 800fcf4:	f025 0503 	bic.w	r5, r5, #3
 800fcf8:	3508      	adds	r5, #8
 800fcfa:	2d0c      	cmp	r5, #12
 800fcfc:	bf38      	it	cc
 800fcfe:	250c      	movcc	r5, #12
 800fd00:	2d00      	cmp	r5, #0
 800fd02:	4606      	mov	r6, r0
 800fd04:	db01      	blt.n	800fd0a <_malloc_r+0x1a>
 800fd06:	42a9      	cmp	r1, r5
 800fd08:	d903      	bls.n	800fd12 <_malloc_r+0x22>
 800fd0a:	230c      	movs	r3, #12
 800fd0c:	6033      	str	r3, [r6, #0]
 800fd0e:	2000      	movs	r0, #0
 800fd10:	bd70      	pop	{r4, r5, r6, pc}
 800fd12:	f000 f9d4 	bl	80100be <__malloc_lock>
 800fd16:	4a21      	ldr	r2, [pc, #132]	; (800fd9c <_malloc_r+0xac>)
 800fd18:	6814      	ldr	r4, [r2, #0]
 800fd1a:	4621      	mov	r1, r4
 800fd1c:	b991      	cbnz	r1, 800fd44 <_malloc_r+0x54>
 800fd1e:	4c20      	ldr	r4, [pc, #128]	; (800fda0 <_malloc_r+0xb0>)
 800fd20:	6823      	ldr	r3, [r4, #0]
 800fd22:	b91b      	cbnz	r3, 800fd2c <_malloc_r+0x3c>
 800fd24:	4630      	mov	r0, r6
 800fd26:	f000 f98f 	bl	8010048 <_sbrk_r>
 800fd2a:	6020      	str	r0, [r4, #0]
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	4630      	mov	r0, r6
 800fd30:	f000 f98a 	bl	8010048 <_sbrk_r>
 800fd34:	1c43      	adds	r3, r0, #1
 800fd36:	d124      	bne.n	800fd82 <_malloc_r+0x92>
 800fd38:	230c      	movs	r3, #12
 800fd3a:	6033      	str	r3, [r6, #0]
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	f000 f9bf 	bl	80100c0 <__malloc_unlock>
 800fd42:	e7e4      	b.n	800fd0e <_malloc_r+0x1e>
 800fd44:	680b      	ldr	r3, [r1, #0]
 800fd46:	1b5b      	subs	r3, r3, r5
 800fd48:	d418      	bmi.n	800fd7c <_malloc_r+0x8c>
 800fd4a:	2b0b      	cmp	r3, #11
 800fd4c:	d90f      	bls.n	800fd6e <_malloc_r+0x7e>
 800fd4e:	600b      	str	r3, [r1, #0]
 800fd50:	50cd      	str	r5, [r1, r3]
 800fd52:	18cc      	adds	r4, r1, r3
 800fd54:	4630      	mov	r0, r6
 800fd56:	f000 f9b3 	bl	80100c0 <__malloc_unlock>
 800fd5a:	f104 000b 	add.w	r0, r4, #11
 800fd5e:	1d23      	adds	r3, r4, #4
 800fd60:	f020 0007 	bic.w	r0, r0, #7
 800fd64:	1ac3      	subs	r3, r0, r3
 800fd66:	d0d3      	beq.n	800fd10 <_malloc_r+0x20>
 800fd68:	425a      	negs	r2, r3
 800fd6a:	50e2      	str	r2, [r4, r3]
 800fd6c:	e7d0      	b.n	800fd10 <_malloc_r+0x20>
 800fd6e:	428c      	cmp	r4, r1
 800fd70:	684b      	ldr	r3, [r1, #4]
 800fd72:	bf16      	itet	ne
 800fd74:	6063      	strne	r3, [r4, #4]
 800fd76:	6013      	streq	r3, [r2, #0]
 800fd78:	460c      	movne	r4, r1
 800fd7a:	e7eb      	b.n	800fd54 <_malloc_r+0x64>
 800fd7c:	460c      	mov	r4, r1
 800fd7e:	6849      	ldr	r1, [r1, #4]
 800fd80:	e7cc      	b.n	800fd1c <_malloc_r+0x2c>
 800fd82:	1cc4      	adds	r4, r0, #3
 800fd84:	f024 0403 	bic.w	r4, r4, #3
 800fd88:	42a0      	cmp	r0, r4
 800fd8a:	d005      	beq.n	800fd98 <_malloc_r+0xa8>
 800fd8c:	1a21      	subs	r1, r4, r0
 800fd8e:	4630      	mov	r0, r6
 800fd90:	f000 f95a 	bl	8010048 <_sbrk_r>
 800fd94:	3001      	adds	r0, #1
 800fd96:	d0cf      	beq.n	800fd38 <_malloc_r+0x48>
 800fd98:	6025      	str	r5, [r4, #0]
 800fd9a:	e7db      	b.n	800fd54 <_malloc_r+0x64>
 800fd9c:	20000468 	.word	0x20000468
 800fda0:	2000046c 	.word	0x2000046c

0800fda4 <__ssputs_r>:
 800fda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fda8:	688e      	ldr	r6, [r1, #8]
 800fdaa:	429e      	cmp	r6, r3
 800fdac:	4682      	mov	sl, r0
 800fdae:	460c      	mov	r4, r1
 800fdb0:	4690      	mov	r8, r2
 800fdb2:	4699      	mov	r9, r3
 800fdb4:	d837      	bhi.n	800fe26 <__ssputs_r+0x82>
 800fdb6:	898a      	ldrh	r2, [r1, #12]
 800fdb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fdbc:	d031      	beq.n	800fe22 <__ssputs_r+0x7e>
 800fdbe:	6825      	ldr	r5, [r4, #0]
 800fdc0:	6909      	ldr	r1, [r1, #16]
 800fdc2:	1a6f      	subs	r7, r5, r1
 800fdc4:	6965      	ldr	r5, [r4, #20]
 800fdc6:	2302      	movs	r3, #2
 800fdc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdcc:	fb95 f5f3 	sdiv	r5, r5, r3
 800fdd0:	f109 0301 	add.w	r3, r9, #1
 800fdd4:	443b      	add	r3, r7
 800fdd6:	429d      	cmp	r5, r3
 800fdd8:	bf38      	it	cc
 800fdda:	461d      	movcc	r5, r3
 800fddc:	0553      	lsls	r3, r2, #21
 800fdde:	d530      	bpl.n	800fe42 <__ssputs_r+0x9e>
 800fde0:	4629      	mov	r1, r5
 800fde2:	f7ff ff85 	bl	800fcf0 <_malloc_r>
 800fde6:	4606      	mov	r6, r0
 800fde8:	b950      	cbnz	r0, 800fe00 <__ssputs_r+0x5c>
 800fdea:	230c      	movs	r3, #12
 800fdec:	f8ca 3000 	str.w	r3, [sl]
 800fdf0:	89a3      	ldrh	r3, [r4, #12]
 800fdf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdf6:	81a3      	strh	r3, [r4, #12]
 800fdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800fdfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe00:	463a      	mov	r2, r7
 800fe02:	6921      	ldr	r1, [r4, #16]
 800fe04:	f7ff fc32 	bl	800f66c <memcpy>
 800fe08:	89a3      	ldrh	r3, [r4, #12]
 800fe0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe12:	81a3      	strh	r3, [r4, #12]
 800fe14:	6126      	str	r6, [r4, #16]
 800fe16:	6165      	str	r5, [r4, #20]
 800fe18:	443e      	add	r6, r7
 800fe1a:	1bed      	subs	r5, r5, r7
 800fe1c:	6026      	str	r6, [r4, #0]
 800fe1e:	60a5      	str	r5, [r4, #8]
 800fe20:	464e      	mov	r6, r9
 800fe22:	454e      	cmp	r6, r9
 800fe24:	d900      	bls.n	800fe28 <__ssputs_r+0x84>
 800fe26:	464e      	mov	r6, r9
 800fe28:	4632      	mov	r2, r6
 800fe2a:	4641      	mov	r1, r8
 800fe2c:	6820      	ldr	r0, [r4, #0]
 800fe2e:	f000 f92d 	bl	801008c <memmove>
 800fe32:	68a3      	ldr	r3, [r4, #8]
 800fe34:	1b9b      	subs	r3, r3, r6
 800fe36:	60a3      	str	r3, [r4, #8]
 800fe38:	6823      	ldr	r3, [r4, #0]
 800fe3a:	441e      	add	r6, r3
 800fe3c:	6026      	str	r6, [r4, #0]
 800fe3e:	2000      	movs	r0, #0
 800fe40:	e7dc      	b.n	800fdfc <__ssputs_r+0x58>
 800fe42:	462a      	mov	r2, r5
 800fe44:	f000 f93d 	bl	80100c2 <_realloc_r>
 800fe48:	4606      	mov	r6, r0
 800fe4a:	2800      	cmp	r0, #0
 800fe4c:	d1e2      	bne.n	800fe14 <__ssputs_r+0x70>
 800fe4e:	6921      	ldr	r1, [r4, #16]
 800fe50:	4650      	mov	r0, sl
 800fe52:	f7ff feff 	bl	800fc54 <_free_r>
 800fe56:	e7c8      	b.n	800fdea <__ssputs_r+0x46>

0800fe58 <_svfiprintf_r>:
 800fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5c:	461d      	mov	r5, r3
 800fe5e:	898b      	ldrh	r3, [r1, #12]
 800fe60:	061f      	lsls	r7, r3, #24
 800fe62:	b09d      	sub	sp, #116	; 0x74
 800fe64:	4680      	mov	r8, r0
 800fe66:	460c      	mov	r4, r1
 800fe68:	4616      	mov	r6, r2
 800fe6a:	d50f      	bpl.n	800fe8c <_svfiprintf_r+0x34>
 800fe6c:	690b      	ldr	r3, [r1, #16]
 800fe6e:	b96b      	cbnz	r3, 800fe8c <_svfiprintf_r+0x34>
 800fe70:	2140      	movs	r1, #64	; 0x40
 800fe72:	f7ff ff3d 	bl	800fcf0 <_malloc_r>
 800fe76:	6020      	str	r0, [r4, #0]
 800fe78:	6120      	str	r0, [r4, #16]
 800fe7a:	b928      	cbnz	r0, 800fe88 <_svfiprintf_r+0x30>
 800fe7c:	230c      	movs	r3, #12
 800fe7e:	f8c8 3000 	str.w	r3, [r8]
 800fe82:	f04f 30ff 	mov.w	r0, #4294967295
 800fe86:	e0c8      	b.n	801001a <_svfiprintf_r+0x1c2>
 800fe88:	2340      	movs	r3, #64	; 0x40
 800fe8a:	6163      	str	r3, [r4, #20]
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	9309      	str	r3, [sp, #36]	; 0x24
 800fe90:	2320      	movs	r3, #32
 800fe92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe96:	2330      	movs	r3, #48	; 0x30
 800fe98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe9c:	9503      	str	r5, [sp, #12]
 800fe9e:	f04f 0b01 	mov.w	fp, #1
 800fea2:	4637      	mov	r7, r6
 800fea4:	463d      	mov	r5, r7
 800fea6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800feaa:	b10b      	cbz	r3, 800feb0 <_svfiprintf_r+0x58>
 800feac:	2b25      	cmp	r3, #37	; 0x25
 800feae:	d13e      	bne.n	800ff2e <_svfiprintf_r+0xd6>
 800feb0:	ebb7 0a06 	subs.w	sl, r7, r6
 800feb4:	d00b      	beq.n	800fece <_svfiprintf_r+0x76>
 800feb6:	4653      	mov	r3, sl
 800feb8:	4632      	mov	r2, r6
 800feba:	4621      	mov	r1, r4
 800febc:	4640      	mov	r0, r8
 800febe:	f7ff ff71 	bl	800fda4 <__ssputs_r>
 800fec2:	3001      	adds	r0, #1
 800fec4:	f000 80a4 	beq.w	8010010 <_svfiprintf_r+0x1b8>
 800fec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feca:	4453      	add	r3, sl
 800fecc:	9309      	str	r3, [sp, #36]	; 0x24
 800fece:	783b      	ldrb	r3, [r7, #0]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	f000 809d 	beq.w	8010010 <_svfiprintf_r+0x1b8>
 800fed6:	2300      	movs	r3, #0
 800fed8:	f04f 32ff 	mov.w	r2, #4294967295
 800fedc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fee0:	9304      	str	r3, [sp, #16]
 800fee2:	9307      	str	r3, [sp, #28]
 800fee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fee8:	931a      	str	r3, [sp, #104]	; 0x68
 800feea:	462f      	mov	r7, r5
 800feec:	2205      	movs	r2, #5
 800feee:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fef2:	4850      	ldr	r0, [pc, #320]	; (8010034 <_svfiprintf_r+0x1dc>)
 800fef4:	f7f0 f97c 	bl	80001f0 <memchr>
 800fef8:	9b04      	ldr	r3, [sp, #16]
 800fefa:	b9d0      	cbnz	r0, 800ff32 <_svfiprintf_r+0xda>
 800fefc:	06d9      	lsls	r1, r3, #27
 800fefe:	bf44      	itt	mi
 800ff00:	2220      	movmi	r2, #32
 800ff02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff06:	071a      	lsls	r2, r3, #28
 800ff08:	bf44      	itt	mi
 800ff0a:	222b      	movmi	r2, #43	; 0x2b
 800ff0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff10:	782a      	ldrb	r2, [r5, #0]
 800ff12:	2a2a      	cmp	r2, #42	; 0x2a
 800ff14:	d015      	beq.n	800ff42 <_svfiprintf_r+0xea>
 800ff16:	9a07      	ldr	r2, [sp, #28]
 800ff18:	462f      	mov	r7, r5
 800ff1a:	2000      	movs	r0, #0
 800ff1c:	250a      	movs	r5, #10
 800ff1e:	4639      	mov	r1, r7
 800ff20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff24:	3b30      	subs	r3, #48	; 0x30
 800ff26:	2b09      	cmp	r3, #9
 800ff28:	d94d      	bls.n	800ffc6 <_svfiprintf_r+0x16e>
 800ff2a:	b1b8      	cbz	r0, 800ff5c <_svfiprintf_r+0x104>
 800ff2c:	e00f      	b.n	800ff4e <_svfiprintf_r+0xf6>
 800ff2e:	462f      	mov	r7, r5
 800ff30:	e7b8      	b.n	800fea4 <_svfiprintf_r+0x4c>
 800ff32:	4a40      	ldr	r2, [pc, #256]	; (8010034 <_svfiprintf_r+0x1dc>)
 800ff34:	1a80      	subs	r0, r0, r2
 800ff36:	fa0b f000 	lsl.w	r0, fp, r0
 800ff3a:	4318      	orrs	r0, r3
 800ff3c:	9004      	str	r0, [sp, #16]
 800ff3e:	463d      	mov	r5, r7
 800ff40:	e7d3      	b.n	800feea <_svfiprintf_r+0x92>
 800ff42:	9a03      	ldr	r2, [sp, #12]
 800ff44:	1d11      	adds	r1, r2, #4
 800ff46:	6812      	ldr	r2, [r2, #0]
 800ff48:	9103      	str	r1, [sp, #12]
 800ff4a:	2a00      	cmp	r2, #0
 800ff4c:	db01      	blt.n	800ff52 <_svfiprintf_r+0xfa>
 800ff4e:	9207      	str	r2, [sp, #28]
 800ff50:	e004      	b.n	800ff5c <_svfiprintf_r+0x104>
 800ff52:	4252      	negs	r2, r2
 800ff54:	f043 0302 	orr.w	r3, r3, #2
 800ff58:	9207      	str	r2, [sp, #28]
 800ff5a:	9304      	str	r3, [sp, #16]
 800ff5c:	783b      	ldrb	r3, [r7, #0]
 800ff5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ff60:	d10c      	bne.n	800ff7c <_svfiprintf_r+0x124>
 800ff62:	787b      	ldrb	r3, [r7, #1]
 800ff64:	2b2a      	cmp	r3, #42	; 0x2a
 800ff66:	d133      	bne.n	800ffd0 <_svfiprintf_r+0x178>
 800ff68:	9b03      	ldr	r3, [sp, #12]
 800ff6a:	1d1a      	adds	r2, r3, #4
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	9203      	str	r2, [sp, #12]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	bfb8      	it	lt
 800ff74:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff78:	3702      	adds	r7, #2
 800ff7a:	9305      	str	r3, [sp, #20]
 800ff7c:	4d2e      	ldr	r5, [pc, #184]	; (8010038 <_svfiprintf_r+0x1e0>)
 800ff7e:	7839      	ldrb	r1, [r7, #0]
 800ff80:	2203      	movs	r2, #3
 800ff82:	4628      	mov	r0, r5
 800ff84:	f7f0 f934 	bl	80001f0 <memchr>
 800ff88:	b138      	cbz	r0, 800ff9a <_svfiprintf_r+0x142>
 800ff8a:	2340      	movs	r3, #64	; 0x40
 800ff8c:	1b40      	subs	r0, r0, r5
 800ff8e:	fa03 f000 	lsl.w	r0, r3, r0
 800ff92:	9b04      	ldr	r3, [sp, #16]
 800ff94:	4303      	orrs	r3, r0
 800ff96:	3701      	adds	r7, #1
 800ff98:	9304      	str	r3, [sp, #16]
 800ff9a:	7839      	ldrb	r1, [r7, #0]
 800ff9c:	4827      	ldr	r0, [pc, #156]	; (801003c <_svfiprintf_r+0x1e4>)
 800ff9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffa2:	2206      	movs	r2, #6
 800ffa4:	1c7e      	adds	r6, r7, #1
 800ffa6:	f7f0 f923 	bl	80001f0 <memchr>
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	d038      	beq.n	8010020 <_svfiprintf_r+0x1c8>
 800ffae:	4b24      	ldr	r3, [pc, #144]	; (8010040 <_svfiprintf_r+0x1e8>)
 800ffb0:	bb13      	cbnz	r3, 800fff8 <_svfiprintf_r+0x1a0>
 800ffb2:	9b03      	ldr	r3, [sp, #12]
 800ffb4:	3307      	adds	r3, #7
 800ffb6:	f023 0307 	bic.w	r3, r3, #7
 800ffba:	3308      	adds	r3, #8
 800ffbc:	9303      	str	r3, [sp, #12]
 800ffbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffc0:	444b      	add	r3, r9
 800ffc2:	9309      	str	r3, [sp, #36]	; 0x24
 800ffc4:	e76d      	b.n	800fea2 <_svfiprintf_r+0x4a>
 800ffc6:	fb05 3202 	mla	r2, r5, r2, r3
 800ffca:	2001      	movs	r0, #1
 800ffcc:	460f      	mov	r7, r1
 800ffce:	e7a6      	b.n	800ff1e <_svfiprintf_r+0xc6>
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	3701      	adds	r7, #1
 800ffd4:	9305      	str	r3, [sp, #20]
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	250a      	movs	r5, #10
 800ffda:	4638      	mov	r0, r7
 800ffdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffe0:	3a30      	subs	r2, #48	; 0x30
 800ffe2:	2a09      	cmp	r2, #9
 800ffe4:	d903      	bls.n	800ffee <_svfiprintf_r+0x196>
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d0c8      	beq.n	800ff7c <_svfiprintf_r+0x124>
 800ffea:	9105      	str	r1, [sp, #20]
 800ffec:	e7c6      	b.n	800ff7c <_svfiprintf_r+0x124>
 800ffee:	fb05 2101 	mla	r1, r5, r1, r2
 800fff2:	2301      	movs	r3, #1
 800fff4:	4607      	mov	r7, r0
 800fff6:	e7f0      	b.n	800ffda <_svfiprintf_r+0x182>
 800fff8:	ab03      	add	r3, sp, #12
 800fffa:	9300      	str	r3, [sp, #0]
 800fffc:	4622      	mov	r2, r4
 800fffe:	4b11      	ldr	r3, [pc, #68]	; (8010044 <_svfiprintf_r+0x1ec>)
 8010000:	a904      	add	r1, sp, #16
 8010002:	4640      	mov	r0, r8
 8010004:	f7fe f8f0 	bl	800e1e8 <_printf_float>
 8010008:	f1b0 3fff 	cmp.w	r0, #4294967295
 801000c:	4681      	mov	r9, r0
 801000e:	d1d6      	bne.n	800ffbe <_svfiprintf_r+0x166>
 8010010:	89a3      	ldrh	r3, [r4, #12]
 8010012:	065b      	lsls	r3, r3, #25
 8010014:	f53f af35 	bmi.w	800fe82 <_svfiprintf_r+0x2a>
 8010018:	9809      	ldr	r0, [sp, #36]	; 0x24
 801001a:	b01d      	add	sp, #116	; 0x74
 801001c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010020:	ab03      	add	r3, sp, #12
 8010022:	9300      	str	r3, [sp, #0]
 8010024:	4622      	mov	r2, r4
 8010026:	4b07      	ldr	r3, [pc, #28]	; (8010044 <_svfiprintf_r+0x1ec>)
 8010028:	a904      	add	r1, sp, #16
 801002a:	4640      	mov	r0, r8
 801002c:	f7fe fb92 	bl	800e754 <_printf_i>
 8010030:	e7ea      	b.n	8010008 <_svfiprintf_r+0x1b0>
 8010032:	bf00      	nop
 8010034:	0801092c 	.word	0x0801092c
 8010038:	08010932 	.word	0x08010932
 801003c:	08010936 	.word	0x08010936
 8010040:	0800e1e9 	.word	0x0800e1e9
 8010044:	0800fda5 	.word	0x0800fda5

08010048 <_sbrk_r>:
 8010048:	b538      	push	{r3, r4, r5, lr}
 801004a:	4c06      	ldr	r4, [pc, #24]	; (8010064 <_sbrk_r+0x1c>)
 801004c:	2300      	movs	r3, #0
 801004e:	4605      	mov	r5, r0
 8010050:	4608      	mov	r0, r1
 8010052:	6023      	str	r3, [r4, #0]
 8010054:	f000 f870 	bl	8010138 <_sbrk>
 8010058:	1c43      	adds	r3, r0, #1
 801005a:	d102      	bne.n	8010062 <_sbrk_r+0x1a>
 801005c:	6823      	ldr	r3, [r4, #0]
 801005e:	b103      	cbz	r3, 8010062 <_sbrk_r+0x1a>
 8010060:	602b      	str	r3, [r5, #0]
 8010062:	bd38      	pop	{r3, r4, r5, pc}
 8010064:	20003840 	.word	0x20003840

08010068 <__ascii_mbtowc>:
 8010068:	b082      	sub	sp, #8
 801006a:	b901      	cbnz	r1, 801006e <__ascii_mbtowc+0x6>
 801006c:	a901      	add	r1, sp, #4
 801006e:	b142      	cbz	r2, 8010082 <__ascii_mbtowc+0x1a>
 8010070:	b14b      	cbz	r3, 8010086 <__ascii_mbtowc+0x1e>
 8010072:	7813      	ldrb	r3, [r2, #0]
 8010074:	600b      	str	r3, [r1, #0]
 8010076:	7812      	ldrb	r2, [r2, #0]
 8010078:	1c10      	adds	r0, r2, #0
 801007a:	bf18      	it	ne
 801007c:	2001      	movne	r0, #1
 801007e:	b002      	add	sp, #8
 8010080:	4770      	bx	lr
 8010082:	4610      	mov	r0, r2
 8010084:	e7fb      	b.n	801007e <__ascii_mbtowc+0x16>
 8010086:	f06f 0001 	mvn.w	r0, #1
 801008a:	e7f8      	b.n	801007e <__ascii_mbtowc+0x16>

0801008c <memmove>:
 801008c:	4288      	cmp	r0, r1
 801008e:	b510      	push	{r4, lr}
 8010090:	eb01 0302 	add.w	r3, r1, r2
 8010094:	d807      	bhi.n	80100a6 <memmove+0x1a>
 8010096:	1e42      	subs	r2, r0, #1
 8010098:	4299      	cmp	r1, r3
 801009a:	d00a      	beq.n	80100b2 <memmove+0x26>
 801009c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80100a4:	e7f8      	b.n	8010098 <memmove+0xc>
 80100a6:	4283      	cmp	r3, r0
 80100a8:	d9f5      	bls.n	8010096 <memmove+0xa>
 80100aa:	1881      	adds	r1, r0, r2
 80100ac:	1ad2      	subs	r2, r2, r3
 80100ae:	42d3      	cmn	r3, r2
 80100b0:	d100      	bne.n	80100b4 <memmove+0x28>
 80100b2:	bd10      	pop	{r4, pc}
 80100b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80100b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80100bc:	e7f7      	b.n	80100ae <memmove+0x22>

080100be <__malloc_lock>:
 80100be:	4770      	bx	lr

080100c0 <__malloc_unlock>:
 80100c0:	4770      	bx	lr

080100c2 <_realloc_r>:
 80100c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100c4:	4607      	mov	r7, r0
 80100c6:	4614      	mov	r4, r2
 80100c8:	460e      	mov	r6, r1
 80100ca:	b921      	cbnz	r1, 80100d6 <_realloc_r+0x14>
 80100cc:	4611      	mov	r1, r2
 80100ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80100d2:	f7ff be0d 	b.w	800fcf0 <_malloc_r>
 80100d6:	b922      	cbnz	r2, 80100e2 <_realloc_r+0x20>
 80100d8:	f7ff fdbc 	bl	800fc54 <_free_r>
 80100dc:	4625      	mov	r5, r4
 80100de:	4628      	mov	r0, r5
 80100e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100e2:	f000 f821 	bl	8010128 <_malloc_usable_size_r>
 80100e6:	42a0      	cmp	r0, r4
 80100e8:	d20f      	bcs.n	801010a <_realloc_r+0x48>
 80100ea:	4621      	mov	r1, r4
 80100ec:	4638      	mov	r0, r7
 80100ee:	f7ff fdff 	bl	800fcf0 <_malloc_r>
 80100f2:	4605      	mov	r5, r0
 80100f4:	2800      	cmp	r0, #0
 80100f6:	d0f2      	beq.n	80100de <_realloc_r+0x1c>
 80100f8:	4631      	mov	r1, r6
 80100fa:	4622      	mov	r2, r4
 80100fc:	f7ff fab6 	bl	800f66c <memcpy>
 8010100:	4631      	mov	r1, r6
 8010102:	4638      	mov	r0, r7
 8010104:	f7ff fda6 	bl	800fc54 <_free_r>
 8010108:	e7e9      	b.n	80100de <_realloc_r+0x1c>
 801010a:	4635      	mov	r5, r6
 801010c:	e7e7      	b.n	80100de <_realloc_r+0x1c>

0801010e <__ascii_wctomb>:
 801010e:	b149      	cbz	r1, 8010124 <__ascii_wctomb+0x16>
 8010110:	2aff      	cmp	r2, #255	; 0xff
 8010112:	bf85      	ittet	hi
 8010114:	238a      	movhi	r3, #138	; 0x8a
 8010116:	6003      	strhi	r3, [r0, #0]
 8010118:	700a      	strbls	r2, [r1, #0]
 801011a:	f04f 30ff 	movhi.w	r0, #4294967295
 801011e:	bf98      	it	ls
 8010120:	2001      	movls	r0, #1
 8010122:	4770      	bx	lr
 8010124:	4608      	mov	r0, r1
 8010126:	4770      	bx	lr

08010128 <_malloc_usable_size_r>:
 8010128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801012c:	1f18      	subs	r0, r3, #4
 801012e:	2b00      	cmp	r3, #0
 8010130:	bfbc      	itt	lt
 8010132:	580b      	ldrlt	r3, [r1, r0]
 8010134:	18c0      	addlt	r0, r0, r3
 8010136:	4770      	bx	lr

08010138 <_sbrk>:
 8010138:	4b04      	ldr	r3, [pc, #16]	; (801014c <_sbrk+0x14>)
 801013a:	6819      	ldr	r1, [r3, #0]
 801013c:	4602      	mov	r2, r0
 801013e:	b909      	cbnz	r1, 8010144 <_sbrk+0xc>
 8010140:	4903      	ldr	r1, [pc, #12]	; (8010150 <_sbrk+0x18>)
 8010142:	6019      	str	r1, [r3, #0]
 8010144:	6818      	ldr	r0, [r3, #0]
 8010146:	4402      	add	r2, r0
 8010148:	601a      	str	r2, [r3, #0]
 801014a:	4770      	bx	lr
 801014c:	20000470 	.word	0x20000470
 8010150:	20003848 	.word	0x20003848

08010154 <_init>:
 8010154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010156:	bf00      	nop
 8010158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801015a:	bc08      	pop	{r3}
 801015c:	469e      	mov	lr, r3
 801015e:	4770      	bx	lr

08010160 <_fini>:
 8010160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010162:	bf00      	nop
 8010164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010166:	bc08      	pop	{r3}
 8010168:	469e      	mov	lr, r3
 801016a:	4770      	bx	lr
